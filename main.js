/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var ps=Object.defineProperty;var ul=Object.getOwnPropertyDescriptor;var hl=Object.getOwnPropertyNames;var dl=Object.prototype.hasOwnProperty;var fl=(n,e)=>{for(var t in e)ps(n,t,{get:e[t],enumerable:!0})},gl=(n,e,t,i)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of hl(e))!dl.call(n,s)&&s!==t&&ps(n,s,{get:()=>e[s],enumerable:!(i=ul(e,s))||i.enumerable});return n};var ml=n=>gl(ps({},"__esModule",{value:!0}),n);var Dd={};fl(Dd,{default:()=>fs});module.exports=ml(Dd);var Re=require("obsidian");var rt=require("obsidian");var zn=require("obsidian");var jn=require("obsidian");var ne="top",ce="bottom",ae="right",oe="left",di="auto",et=[ne,ce,ae,oe],je="start",dt="end",In="clippingParents",fi="viewport",It="popper",Dn="reference",ys=et.reduce(function(n,e){return n.concat([e+"-"+je,e+"-"+dt])},[]),gi=[].concat(et,[di]).reduce(function(n,e){return n.concat([e,e+"-"+je,e+"-"+dt])},[]),pl="beforeRead",yl="read",Tl="afterRead",xl="beforeMain",El="main",vl="afterMain",Sl="beforeWrite",Al="write",Ll="afterWrite",Cn=[pl,yl,Tl,xl,El,vl,Sl,Al,Ll];function de(n){return n?(n.nodeName||"").toLowerCase():null}function ie(n){if(n==null)return window;if(n.toString()!=="[object Window]"){var e=n.ownerDocument;return e&&e.defaultView||window}return n}function Ie(n){var e=ie(n).Element;return n instanceof e||n instanceof Element}function ue(n){var e=ie(n).HTMLElement;return n instanceof e||n instanceof HTMLElement}function Dt(n){if(typeof ShadowRoot=="undefined")return!1;var e=ie(n).ShadowRoot;return n instanceof e||n instanceof ShadowRoot}function bl(n){var e=n.state;Object.keys(e.elements).forEach(function(t){var i=e.styles[t]||{},s=e.attributes[t]||{},r=e.elements[t];!ue(r)||!de(r)||(Object.assign(r.style,i),Object.keys(s).forEach(function(o){var a=s[o];a===!1?r.removeAttribute(o):r.setAttribute(o,a===!0?"":a)}))})}function Rl(n){var e=n.state,t={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,t.popper),e.styles=t,e.elements.arrow&&Object.assign(e.elements.arrow.style,t.arrow),function(){Object.keys(e.elements).forEach(function(i){var s=e.elements[i],r=e.attributes[i]||{},o=Object.keys(e.styles.hasOwnProperty(i)?e.styles[i]:t[i]),a=o.reduce(function(l,c){return l[c]="",l},{});!ue(s)||!de(s)||(Object.assign(s.style,a),Object.keys(r).forEach(function(l){s.removeAttribute(l)}))})}}var wn={name:"applyStyles",enabled:!0,phase:"write",fn:bl,effect:Rl,requires:["computeStyles"]};function fe(n){return n.split("-")[0]}var Pe=Math.max,ft=Math.min,ze=Math.round;function Ct(){var n=navigator.userAgentData;return n!=null&&n.brands&&Array.isArray(n.brands)?n.brands.map(function(e){return e.brand+"/"+e.version}).join(" "):navigator.userAgent}function Kt(){return!/^((?!chrome|android).)*safari/i.test(Ct())}function De(n,e,t){e===void 0&&(e=!1),t===void 0&&(t=!1);var i=n.getBoundingClientRect(),s=1,r=1;e&&ue(n)&&(s=n.offsetWidth>0&&ze(i.width)/n.offsetWidth||1,r=n.offsetHeight>0&&ze(i.height)/n.offsetHeight||1);var o=Ie(n)?ie(n):window,a=o.visualViewport,l=!Kt()&&t,c=(i.left+(l&&a?a.offsetLeft:0))/s,u=(i.top+(l&&a?a.offsetTop:0))/r,h=i.width/s,d=i.height/r;return{width:h,height:d,top:u,right:c+h,bottom:u+d,left:c,x:c,y:u}}function gt(n){var e=De(n),t=n.offsetWidth,i=n.offsetHeight;return Math.abs(e.width-t)<=1&&(t=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:n.offsetLeft,y:n.offsetTop,width:t,height:i}}function Wt(n,e){var t=e.getRootNode&&e.getRootNode();if(n.contains(e))return!0;if(t&&Dt(t)){var i=e;do{if(i&&n.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function ve(n){return ie(n).getComputedStyle(n)}function Ts(n){return["table","td","th"].indexOf(de(n))>=0}function xe(n){return((Ie(n)?n.ownerDocument:n.document)||window.document).documentElement}function Xe(n){return de(n)==="html"?n:n.assignedSlot||n.parentNode||(Dt(n)?n.host:null)||xe(n)}function kn(n){return!ue(n)||ve(n).position==="fixed"?null:n.offsetParent}function Il(n){var e=/firefox/i.test(Ct()),t=/Trident/i.test(Ct());if(t&&ue(n)){var i=ve(n);if(i.position==="fixed")return null}var s=Xe(n);for(Dt(s)&&(s=s.host);ue(s)&&["html","body"].indexOf(de(s))<0;){var r=ve(s);if(r.transform!=="none"||r.perspective!=="none"||r.contain==="paint"||["transform","perspective"].indexOf(r.willChange)!==-1||e&&r.willChange==="filter"||e&&r.filter&&r.filter!=="none")return s;s=s.parentNode}return null}function Oe(n){for(var e=ie(n),t=kn(n);t&&Ts(t)&&ve(t).position==="static";)t=kn(t);return t&&(de(t)==="html"||de(t)==="body"&&ve(t).position==="static")?e:t||Il(n)||e}function mt(n){return["top","bottom"].indexOf(n)>=0?"x":"y"}function pt(n,e,t){return Pe(n,ft(e,t))}function _n(n,e,t){var i=pt(n,e,t);return i>t?t:i}function Yt(){return{top:0,right:0,bottom:0,left:0}}function qt(n){return Object.assign({},Yt(),n)}function jt(n,e){return e.reduce(function(t,i){return t[i]=n,t},{})}var Dl=function(e,t){return e=typeof e=="function"?e(Object.assign({},t.rects,{placement:t.placement})):e,qt(typeof e!="number"?e:jt(e,et))};function Cl(n){var e,t=n.state,i=n.name,s=n.options,r=t.elements.arrow,o=t.modifiersData.popperOffsets,a=fe(t.placement),l=mt(a),c=[oe,ae].indexOf(a)>=0,u=c?"height":"width";if(!(!r||!o)){var h=Dl(s.padding,t),d=gt(r),f=l==="y"?ne:oe,g=l==="y"?ce:ae,m=t.rects.reference[u]+t.rects.reference[l]-o[l]-t.rects.popper[u],y=o[l]-t.rects.reference[l],T=Oe(r),v=T?l==="y"?T.clientHeight||0:T.clientWidth||0:0,E=m/2-y/2,S=h[f],x=v-d[u]-h[g],A=v/2-d[u]/2+E,b=pt(S,A,x),C=l;t.modifiersData[i]=(e={},e[C]=b,e.centerOffset=b-A,e)}}function wl(n){var e=n.state,t=n.options,i=t.element,s=i===void 0?"[data-popper-arrow]":i;s!=null&&(typeof s=="string"&&(s=e.elements.popper.querySelector(s),!s)||Wt(e.elements.popper,s)&&(e.elements.arrow=s))}var Pn={name:"arrow",enabled:!0,phase:"main",fn:Cl,effect:wl,requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function Ce(n){return n.split("-")[1]}var kl={top:"auto",right:"auto",bottom:"auto",left:"auto"};function _l(n,e){var t=n.x,i=n.y,s=e.devicePixelRatio||1;return{x:ze(t*s)/s||0,y:ze(i*s)/s||0}}function On(n){var e,t=n.popper,i=n.popperRect,s=n.placement,r=n.variation,o=n.offsets,a=n.position,l=n.gpuAcceleration,c=n.adaptive,u=n.roundOffsets,h=n.isFixed,d=o.x,f=d===void 0?0:d,g=o.y,m=g===void 0?0:g,y=typeof u=="function"?u({x:f,y:m}):{x:f,y:m};f=y.x,m=y.y;var T=o.hasOwnProperty("x"),v=o.hasOwnProperty("y"),E=oe,S=ne,x=window;if(c){var A=Oe(t),b="clientHeight",C="clientWidth";if(A===ie(t)&&(A=xe(t),ve(A).position!=="static"&&a==="absolute"&&(b="scrollHeight",C="scrollWidth")),A=A,s===ne||(s===oe||s===ae)&&r===dt){S=ce;var _=h&&A===x&&x.visualViewport?x.visualViewport.height:A[b];m-=_-i.height,m*=l?1:-1}if(s===oe||(s===ne||s===ce)&&r===dt){E=ae;var D=h&&A===x&&x.visualViewport?x.visualViewport.width:A[C];f-=D-i.width,f*=l?1:-1}}var w=Object.assign({position:a},c&&kl),B=u===!0?_l({x:f,y:m},ie(t)):{x:f,y:m};if(f=B.x,m=B.y,l){var P;return Object.assign({},w,(P={},P[S]=v?"0":"",P[E]=T?"0":"",P.transform=(x.devicePixelRatio||1)<=1?"translate("+f+"px, "+m+"px)":"translate3d("+f+"px, "+m+"px, 0)",P))}return Object.assign({},w,(e={},e[S]=v?m+"px":"",e[E]=T?f+"px":"",e.transform="",e))}function Pl(n){var e=n.state,t=n.options,i=t.gpuAcceleration,s=i===void 0?!0:i,r=t.adaptive,o=r===void 0?!0:r,a=t.roundOffsets,l=a===void 0?!0:a,c={placement:fe(e.placement),variation:Ce(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:s,isFixed:e.options.strategy==="fixed"};e.modifiersData.popperOffsets!=null&&(e.styles.popper=Object.assign({},e.styles.popper,On(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:o,roundOffsets:l})))),e.modifiersData.arrow!=null&&(e.styles.arrow=Object.assign({},e.styles.arrow,On(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})}var Fn={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:Pl,data:{}};var mi={passive:!0};function Ol(n){var e=n.state,t=n.instance,i=n.options,s=i.scroll,r=s===void 0?!0:s,o=i.resize,a=o===void 0?!0:o,l=ie(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return r&&c.forEach(function(u){u.addEventListener("scroll",t.update,mi)}),a&&l.addEventListener("resize",t.update,mi),function(){r&&c.forEach(function(u){u.removeEventListener("scroll",t.update,mi)}),a&&l.removeEventListener("resize",t.update,mi)}}var Mn={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:Ol,data:{}};var Fl={left:"right",right:"left",bottom:"top",top:"bottom"};function wt(n){return n.replace(/left|right|bottom|top/g,function(e){return Fl[e]})}var Ml={start:"end",end:"start"};function pi(n){return n.replace(/start|end/g,function(e){return Ml[e]})}function yt(n){var e=ie(n),t=e.pageXOffset,i=e.pageYOffset;return{scrollLeft:t,scrollTop:i}}function Tt(n){return De(xe(n)).left+yt(n).scrollLeft}function xs(n,e){var t=ie(n),i=xe(n),s=t.visualViewport,r=i.clientWidth,o=i.clientHeight,a=0,l=0;if(s){r=s.width,o=s.height;var c=Kt();(c||!c&&e==="fixed")&&(a=s.offsetLeft,l=s.offsetTop)}return{width:r,height:o,x:a+Tt(n),y:l}}function Es(n){var e,t=xe(n),i=yt(n),s=(e=n.ownerDocument)==null?void 0:e.body,r=Pe(t.scrollWidth,t.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),o=Pe(t.scrollHeight,t.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),a=-i.scrollLeft+Tt(n),l=-i.scrollTop;return ve(s||t).direction==="rtl"&&(a+=Pe(t.clientWidth,s?s.clientWidth:0)-r),{width:r,height:o,x:a,y:l}}function xt(n){var e=ve(n),t=e.overflow,i=e.overflowX,s=e.overflowY;return/auto|scroll|overlay|hidden/.test(t+s+i)}function yi(n){return["html","body","#document"].indexOf(de(n))>=0?n.ownerDocument.body:ue(n)&&xt(n)?n:yi(Xe(n))}function tt(n,e){var t;e===void 0&&(e=[]);var i=yi(n),s=i===((t=n.ownerDocument)==null?void 0:t.body),r=ie(i),o=s?[r].concat(r.visualViewport||[],xt(i)?i:[]):i,a=e.concat(o);return s?a:a.concat(tt(Xe(o)))}function kt(n){return Object.assign({},n,{left:n.x,top:n.y,right:n.x+n.width,bottom:n.y+n.height})}function Nl(n,e){var t=De(n,!1,e==="fixed");return t.top=t.top+n.clientTop,t.left=t.left+n.clientLeft,t.bottom=t.top+n.clientHeight,t.right=t.left+n.clientWidth,t.width=n.clientWidth,t.height=n.clientHeight,t.x=t.left,t.y=t.top,t}function Nn(n,e,t){return e===fi?kt(xs(n,t)):Ie(e)?Nl(e,t):kt(Es(xe(n)))}function Bl(n){var e=tt(Xe(n)),t=["absolute","fixed"].indexOf(ve(n).position)>=0,i=t&&ue(n)?Oe(n):n;return Ie(i)?e.filter(function(s){return Ie(s)&&Wt(s,i)&&de(s)!=="body"}):[]}function vs(n,e,t,i){var s=e==="clippingParents"?Bl(n):[].concat(e),r=[].concat(s,[t]),o=r[0],a=r.reduce(function(l,c){var u=Nn(n,c,i);return l.top=Pe(u.top,l.top),l.right=ft(u.right,l.right),l.bottom=ft(u.bottom,l.bottom),l.left=Pe(u.left,l.left),l},Nn(n,o,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function zt(n){var e=n.reference,t=n.element,i=n.placement,s=i?fe(i):null,r=i?Ce(i):null,o=e.x+e.width/2-t.width/2,a=e.y+e.height/2-t.height/2,l;switch(s){case ne:l={x:o,y:e.y-t.height};break;case ce:l={x:o,y:e.y+e.height};break;case ae:l={x:e.x+e.width,y:a};break;case oe:l={x:e.x-t.width,y:a};break;default:l={x:e.x,y:e.y}}var c=s?mt(s):null;if(c!=null){var u=c==="y"?"height":"width";switch(r){case je:l[c]=l[c]-(e[u]/2-t[u]/2);break;case dt:l[c]=l[c]+(e[u]/2-t[u]/2);break;default:}}return l}function Fe(n,e){e===void 0&&(e={});var t=e,i=t.placement,s=i===void 0?n.placement:i,r=t.strategy,o=r===void 0?n.strategy:r,a=t.boundary,l=a===void 0?In:a,c=t.rootBoundary,u=c===void 0?fi:c,h=t.elementContext,d=h===void 0?It:h,f=t.altBoundary,g=f===void 0?!1:f,m=t.padding,y=m===void 0?0:m,T=qt(typeof y!="number"?y:jt(y,et)),v=d===It?Dn:It,E=n.rects.popper,S=n.elements[g?v:d],x=vs(Ie(S)?S:S.contextElement||xe(n.elements.popper),l,u,o),A=De(n.elements.reference),b=zt({reference:A,element:E,strategy:"absolute",placement:s}),C=kt(Object.assign({},E,b)),_=d===It?C:A,D={top:x.top-_.top+T.top,bottom:_.bottom-x.bottom+T.bottom,left:x.left-_.left+T.left,right:_.right-x.right+T.right},w=n.modifiersData.offset;if(d===It&&w){var B=w[s];Object.keys(D).forEach(function(P){var $=[ae,ce].indexOf(P)>=0?1:-1,U=[ne,ce].indexOf(P)>=0?"y":"x";D[P]+=B[U]*$})}return D}function Ss(n,e){e===void 0&&(e={});var t=e,i=t.placement,s=t.boundary,r=t.rootBoundary,o=t.padding,a=t.flipVariations,l=t.allowedAutoPlacements,c=l===void 0?gi:l,u=Ce(i),h=u?a?ys:ys.filter(function(g){return Ce(g)===u}):et,d=h.filter(function(g){return c.indexOf(g)>=0});d.length===0&&(d=h);var f=d.reduce(function(g,m){return g[m]=Fe(n,{placement:m,boundary:s,rootBoundary:r,padding:o})[fe(m)],g},{});return Object.keys(f).sort(function(g,m){return f[g]-f[m]})}function Ul(n){if(fe(n)===di)return[];var e=wt(n);return[pi(n),e,pi(e)]}function $l(n){var e=n.state,t=n.options,i=n.name;if(!e.modifiersData[i]._skip){for(var s=t.mainAxis,r=s===void 0?!0:s,o=t.altAxis,a=o===void 0?!0:o,l=t.fallbackPlacements,c=t.padding,u=t.boundary,h=t.rootBoundary,d=t.altBoundary,f=t.flipVariations,g=f===void 0?!0:f,m=t.allowedAutoPlacements,y=e.options.placement,T=fe(y),v=T===y,E=l||(v||!g?[wt(y)]:Ul(y)),S=[y].concat(E).reduce(function(Z,ee){return Z.concat(fe(ee)===di?Ss(e,{placement:ee,boundary:u,rootBoundary:h,padding:c,flipVariations:g,allowedAutoPlacements:m}):ee)},[]),x=e.rects.reference,A=e.rects.popper,b=new Map,C=!0,_=S[0],D=0;D<S.length;D++){var w=S[D],B=fe(w),P=Ce(w)===je,$=[ne,ce].indexOf(B)>=0,U=$?"width":"height",N=Fe(e,{placement:w,boundary:u,rootBoundary:h,altBoundary:d,padding:c}),K=$?P?ae:oe:P?ce:ne;x[U]>A[U]&&(K=wt(K));var X=wt(K),F=[];if(r&&F.push(N[B]<=0),a&&F.push(N[K]<=0,N[X]<=0),F.every(function(Z){return Z})){_=w,C=!1;break}b.set(w,F)}if(C)for(var O=g?3:1,q=function(ee){var re=S.find(function(Te){var be=b.get(Te);if(be)return be.slice(0,ee).every(function(ut){return ut})});if(re)return _=re,"break"},W=O;W>0;W--){var j=q(W);if(j==="break")break}e.placement!==_&&(e.modifiersData[i]._skip=!0,e.placement=_,e.reset=!0)}}var Bn={name:"flip",enabled:!0,phase:"main",fn:$l,requiresIfExists:["offset"],data:{_skip:!1}};function Un(n,e,t){return t===void 0&&(t={x:0,y:0}),{top:n.top-e.height-t.y,right:n.right-e.width+t.x,bottom:n.bottom-e.height+t.y,left:n.left-e.width-t.x}}function $n(n){return[ne,ae,ce,oe].some(function(e){return n[e]>=0})}function Gl(n){var e=n.state,t=n.name,i=e.rects.reference,s=e.rects.popper,r=e.modifiersData.preventOverflow,o=Fe(e,{elementContext:"reference"}),a=Fe(e,{altBoundary:!0}),l=Un(o,i),c=Un(a,s,r),u=$n(l),h=$n(c);e.modifiersData[t]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:h},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":h})}var Gn={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:Gl};function Hl(n,e,t){var i=fe(n),s=[oe,ne].indexOf(i)>=0?-1:1,r=typeof t=="function"?t(Object.assign({},e,{placement:n})):t,o=r[0],a=r[1];return o=o||0,a=(a||0)*s,[oe,ae].indexOf(i)>=0?{x:a,y:o}:{x:o,y:a}}function Vl(n){var e=n.state,t=n.options,i=n.name,s=t.offset,r=s===void 0?[0,0]:s,o=gi.reduce(function(u,h){return u[h]=Hl(h,e.rects,r),u},{}),a=o[e.placement],l=a.x,c=a.y;e.modifiersData.popperOffsets!=null&&(e.modifiersData.popperOffsets.x+=l,e.modifiersData.popperOffsets.y+=c),e.modifiersData[i]=o}var Hn={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:Vl};function Kl(n){var e=n.state,t=n.name;e.modifiersData[t]=zt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})}var Vn={name:"popperOffsets",enabled:!0,phase:"read",fn:Kl,data:{}};function As(n){return n==="x"?"y":"x"}function Wl(n){var e=n.state,t=n.options,i=n.name,s=t.mainAxis,r=s===void 0?!0:s,o=t.altAxis,a=o===void 0?!1:o,l=t.boundary,c=t.rootBoundary,u=t.altBoundary,h=t.padding,d=t.tether,f=d===void 0?!0:d,g=t.tetherOffset,m=g===void 0?0:g,y=Fe(e,{boundary:l,rootBoundary:c,padding:h,altBoundary:u}),T=fe(e.placement),v=Ce(e.placement),E=!v,S=mt(T),x=As(S),A=e.modifiersData.popperOffsets,b=e.rects.reference,C=e.rects.popper,_=typeof m=="function"?m(Object.assign({},e.rects,{placement:e.placement})):m,D=typeof _=="number"?{mainAxis:_,altAxis:_}:Object.assign({mainAxis:0,altAxis:0},_),w=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,B={x:0,y:0};if(A){if(r){var P,$=S==="y"?ne:oe,U=S==="y"?ce:ae,N=S==="y"?"height":"width",K=A[S],X=K+y[$],F=K-y[U],O=f?-C[N]/2:0,q=v===je?b[N]:C[N],W=v===je?-C[N]:-b[N],j=e.elements.arrow,Z=f&&j?gt(j):{width:0,height:0},ee=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:Yt(),re=ee[$],Te=ee[U],be=pt(0,b[N],Z[N]),ut=E?b[N]/2-O-be-re-D.mainAxis:q-be-re-D.mainAxis,rl=E?-b[N]/2+O+be+Te+D.mainAxis:W+be+Te+D.mainAxis,gs=e.elements.arrow&&Oe(e.elements.arrow),nl=gs?S==="y"?gs.clientTop||0:gs.clientLeft||0:0,Tn=(P=w==null?void 0:w[S])!=null?P:0,ol=K+ut-Tn-nl,al=K+rl-Tn,xn=pt(f?ft(X,ol):X,K,f?Pe(F,al):F);A[S]=xn,B[S]=xn-K}if(a){var En,ll=S==="x"?ne:oe,cl=S==="x"?ce:ae,ht=A[x],hi=x==="y"?"height":"width",vn=ht+y[ll],Sn=ht-y[cl],ms=[ne,oe].indexOf(T)!==-1,An=(En=w==null?void 0:w[x])!=null?En:0,Ln=ms?vn:ht-b[hi]-C[hi]-An+D.altAxis,bn=ms?ht+b[hi]+C[hi]-An-D.altAxis:Sn,Rn=f&&ms?_n(Ln,ht,bn):pt(f?Ln:vn,ht,f?bn:Sn);A[x]=Rn,B[x]=Rn-ht}e.modifiersData[i]=B}}var Kn={name:"preventOverflow",enabled:!0,phase:"main",fn:Wl,requiresIfExists:["offset"]};function Ls(n){return{scrollLeft:n.scrollLeft,scrollTop:n.scrollTop}}function bs(n){return n===ie(n)||!ue(n)?yt(n):Ls(n)}function Yl(n){var e=n.getBoundingClientRect(),t=ze(e.width)/n.offsetWidth||1,i=ze(e.height)/n.offsetHeight||1;return t!==1||i!==1}function Rs(n,e,t){t===void 0&&(t=!1);var i=ue(e),s=ue(e)&&Yl(e),r=xe(e),o=De(n,s,t),a={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(i||!i&&!t)&&((de(e)!=="body"||xt(r))&&(a=bs(e)),ue(e)?(l=De(e,!0),l.x+=e.clientLeft,l.y+=e.clientTop):r&&(l.x=Tt(r))),{x:o.left+a.scrollLeft-l.x,y:o.top+a.scrollTop-l.y,width:o.width,height:o.height}}function ql(n){var e=new Map,t=new Set,i=[];n.forEach(function(r){e.set(r.name,r)});function s(r){t.add(r.name);var o=[].concat(r.requires||[],r.requiresIfExists||[]);o.forEach(function(a){if(!t.has(a)){var l=e.get(a);l&&s(l)}}),i.push(r)}return n.forEach(function(r){t.has(r.name)||s(r)}),i}function Is(n){var e=ql(n);return Cn.reduce(function(t,i){return t.concat(e.filter(function(s){return s.phase===i}))},[])}function Ds(n){var e;return function(){return e||(e=new Promise(function(t){Promise.resolve().then(function(){e=void 0,t(n())})})),e}}function Cs(n){var e=n.reduce(function(t,i){var s=t[i.name];return t[i.name]=s?Object.assign({},s,i,{options:Object.assign({},s.options,i.options),data:Object.assign({},s.data,i.data)}):i,t},{});return Object.keys(e).map(function(t){return e[t]})}var Wn={placement:"bottom",modifiers:[],strategy:"absolute"};function Yn(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return!e.some(function(i){return!(i&&typeof i.getBoundingClientRect=="function")})}function qn(n){n===void 0&&(n={});var e=n,t=e.defaultModifiers,i=t===void 0?[]:t,s=e.defaultOptions,r=s===void 0?Wn:s;return function(a,l,c){c===void 0&&(c=r);var u={placement:"bottom",orderedModifiers:[],options:Object.assign({},Wn,r),modifiersData:{},elements:{reference:a,popper:l},attributes:{},styles:{}},h=[],d=!1,f={state:u,setOptions:function(T){var v=typeof T=="function"?T(u.options):T;m(),u.options=Object.assign({},r,u.options,v),u.scrollParents={reference:Ie(a)?tt(a):a.contextElement?tt(a.contextElement):[],popper:tt(l)};var E=Is(Cs([].concat(i,u.options.modifiers)));return u.orderedModifiers=E.filter(function(S){return S.enabled}),g(),f.update()},forceUpdate:function(){if(!d){var T=u.elements,v=T.reference,E=T.popper;if(Yn(v,E)){u.rects={reference:Rs(v,Oe(E),u.options.strategy==="fixed"),popper:gt(E)},u.reset=!1,u.placement=u.options.placement,u.orderedModifiers.forEach(function(D){return u.modifiersData[D.name]=Object.assign({},D.data)});for(var S=0;S<u.orderedModifiers.length;S++){if(u.reset===!0){u.reset=!1,S=-1;continue}var x=u.orderedModifiers[S],A=x.fn,b=x.options,C=b===void 0?{}:b,_=x.name;typeof A=="function"&&(u=A({state:u,options:C,name:_,instance:f})||u)}}}},update:Ds(function(){return new Promise(function(y){f.forceUpdate(),y(u)})}),destroy:function(){m(),d=!0}};if(!Yn(a,l))return f;f.setOptions(c).then(function(y){!d&&c.onFirstUpdate&&c.onFirstUpdate(y)});function g(){u.orderedModifiers.forEach(function(y){var T=y.name,v=y.options,E=v===void 0?{}:v,S=y.effect;if(typeof S=="function"){var x=S({state:u,name:T,instance:f,options:E}),A=function(){};h.push(x||A)}})}function m(){h.forEach(function(y){return y()}),h=[]}return f}}var jl=[Mn,Vn,Fn,wn,Hn,Bn,Kn,Pn,Gn],ws=qn({defaultModifiers:jl});var zl=(n,e)=>(n%e+e)%e,ks=class{constructor(e,t,i){this.owner=e,this.containerEl=t,t.on("click",".suggestion-item",this.onSuggestionClick.bind(this)),t.on("mousemove",".suggestion-item",this.onSuggestionMouseover.bind(this)),i.register([],"ArrowUp",s=>{if(!s.isComposing)return this.setSelectedItem(this.selectedItem-1,!0),!1}),i.register([],"ArrowDown",s=>{if(!s.isComposing)return this.setSelectedItem(this.selectedItem+1,!0),!1}),i.register([],"Enter",s=>{if(!s.isComposing)return this.useSelectedItem(s),!1})}onSuggestionClick(e,t){e.preventDefault();let i=this.suggestions.indexOf(t);this.setSelectedItem(i,!1),this.useSelectedItem(e)}onSuggestionMouseover(e,t){let i=this.suggestions.indexOf(t);this.setSelectedItem(i,!1)}setSuggestions(e){this.containerEl.empty();let t=[];e.forEach(i=>{let s=this.containerEl.createDiv("suggestion-item");this.owner.renderSuggestion(i,s),t.push(s)}),this.values=e,this.suggestions=t,this.setSelectedItem(0,!1)}useSelectedItem(e){let t=this.values[this.selectedItem];t&&this.owner.selectSuggestion(t,e)}setSelectedItem(e,t){let i=zl(e,this.suggestions.length),s=this.suggestions[this.selectedItem],r=this.suggestions[i];s==null||s.removeClass("is-selected"),r==null||r.addClass("is-selected"),this.selectedItem=i,t&&r.scrollIntoView(!1)}},_t=class{constructor(e){this.inputEl=e,this.scope=new jn.Scope,this.suggestEl=createDiv("suggestion-container");let t=this.suggestEl.createDiv("suggestion");this.suggest=new ks(this,t,this.scope),this.scope.register([],"Escape",this.close.bind(this)),this.inputEl.addEventListener("input",this.onInputChanged.bind(this)),this.inputEl.addEventListener("focus",this.onInputChanged.bind(this)),this.inputEl.addEventListener("blur",this.close.bind(this)),this.suggestEl.on("mousedown",".suggestion-container",i=>{i.preventDefault()})}onInputChanged(){let e=this.inputEl.value,t=this.getSuggestions(e);if(!t){this.close();return}t.length>0?(this.suggest.setSuggestions(t),this.open(app.dom.appContainerEl,this.inputEl)):this.close()}open(e,t){app.keymap.pushScope(this.scope),e.appendChild(this.suggestEl),this.popper=ws(t,this.suggestEl,{placement:"bottom-start",modifiers:[{name:"sameWidth",enabled:!0,fn:({state:i,instance:s})=>{let r=`${i.rects.reference.width}px`;i.styles.popper.width!==r&&(i.styles.popper.width=r,s.update())},phase:"beforeWrite",requires:["computeStyles"]}]})}close(){app.keymap.popScope(this.scope),this.suggest.setSuggestions([]),this.popper&&this.popper.destroy(),this.suggestEl.detach()}};var Ti=class extends _t{getSuggestions(e){let t=app.vault.getAllLoadedFiles(),i=[],s=e.toLowerCase();return t.forEach(r=>{r instanceof zn.TFolder&&r.path.toLowerCase().contains(s)&&i.push(r)}),i}renderSuggestion(e,t){t.setText(e.path)}selectSuggestion(e){this.inputEl.value=e.path,this.inputEl.trigger("input"),this.close()}};var eo=require("obsidian");var Xn=require("obsidian");function Qn(n){let e=new Xn.Notice("",8e3);n instanceof it&&n.console_msg?(e.noticeEl.innerHTML=`<b>Templater Error</b>:<br/>${n.message}<br/>Check console for more information`,console.error("Templater Error:",n.message,`
`,n.console_msg)):e.noticeEl.innerHTML=`<b>Templater Error</b>:<br/>${n.message}`}var it=class extends Error{constructor(t,i){super(t);this.console_msg=i;this.name=this.constructor.name,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}};function Jn(n,e){try{return n()}catch(t){return Qn(new it(e,t.message)),null}}var st=require("obsidian");function Xl(n){n=(0,st.normalizePath)(n);let e=app.vault.getAbstractFileByPath(n);if(!e)throw new it(`Folder "${n}" doesn't exist`);if(!(e instanceof st.TFolder))throw new it(`${n} is a file, not a folder`);return e}function Zn(n){let e=Xl(n),t=[];return st.Vault.recurseChildren(e,i=>{i instanceof st.TFile&&t.push(i)}),t.sort((i,s)=>i.basename.localeCompare(s.basename)),t}var xi=class extends _t{constructor(t,i,s){super(t);this.inputEl=t;this.plugin=i;this.mode=s}get_folder(t){return""}get_error_msg(t){switch(t){case 0:return"Templates folder doesn't exist";case 1:return"User Scripts folder doesn't exist"}}getSuggestions(t){let i=Jn(()=>Zn(this.get_folder(this.mode)),this.get_error_msg(this.mode));if(!i)return[];let s=[],r=t.toLowerCase();return i.forEach(o=>{o instanceof eo.TFile&&o.extension==="md"&&o.path.toLowerCase().contains(r)&&s.push(o)}),s}renderSuggestion(t,i){i.setText(t.path)}selectSuggestion(t){this.inputEl.value=t.path,this.inputEl.trigger("input"),this.close()}};var Ei=class extends rt.PluginSettingTab{constructor(t,i){super(t,i)}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Functions"}),this.addToggle("\u6FC0\u6D3B\u590D\u5236\u5757","\u662F\u5426\u542F\u7528\u590D\u5236\u5757\u7684\u70B9\u51FB\u590D\u5236\u529F\u80FD","enable_clickCopy_block"),this.addToggle("\u81EA\u52A8\u56FA\u5B9A\u7B14\u8BB0","\u5728\u542F\u52A8\u5E93\u65F6\u56FA\u5B9A\u6240\u6709\u7B14\u8BB0\u9875\u9762","enable_auto_pin"),this.addToggle("\u81EA\u52A8\u89E3\u6790 m3u8 ","\u5C06 .m3u8\u89C6 \u9891\u89E3\u6790\u4E3A .mp4 \u64AD\u653E","enable_parse_m3u8"),this.addToggle("\u542F\u7528\u60AC\u6D6E\u5C55\u5F00","\u662F\u5426\u9ED8\u8BA4\u542F\u7528\u60AC\u6D6E\u5C55\u5F00\u4FA7\u8FB9\u680F\u529F\u80FD","setup_enable_hover_sider"),t.createEl("h2",{text:"Notes"}),this.addToggle("\u989C\u8272\u5C55\u5ECA","\u7528\u4E8E\u521B\u5EFA\u4E00\u4E2A\u53EF\u89C6\u5316\u53EF\u4EA4\u4E92\u7684\u989C\u8272\u5C55\u793A\u5ECA\u7B14\u8BB0\u9875\u9762","enable_color_gallery"),this.addFileSuggest("\u989C\u8272\u5C55\u5ECA\u7684\u7B14\u8BB0\u8DEF\u5F84","\u5728\u8FD9\u91CC\u6307\u5B9A\u989C\u8272\u5C55\u5ECA\u7684\u7B14\u8BB0\u8DEF\u5F84","folder_color_gallery"),t.createEl("hr"),this.addToggle("\u56FE\u6807\u5C55\u5ECA","\u7528\u4E8E\u521B\u5EFA\u4E00\u4E2A\u53EF\u89C6\u5316\u7684\u56FE\u6807\u5C55\u793A\u5ECA\u7B14\u8BB0\u9875\u9762","enable_icon_gallery"),this.addFileSuggest("\u56FE\u6807\u5C55\u5ECA\u7684\u7B14\u8BB0\u8DEF\u5F84","\u5728\u8FD9\u91CC\u6307\u5B9A\u56FE\u6807\u5C55\u5ECA\u7684\u7B14\u8BB0\u8DEF\u5F84","folder_icon_gallery")}addDropdown(t,i){new rt.Setting(this.containerEl).setName(t).setDesc(i).addDropdown(s=>s.addOption("none","").addOption("none2",""))}addFileSuggest(t,i,s,r="\u793A\u4F8B\uFF1Afolder1/folder2/file1"){new rt.Setting(this.containerEl).setName(t).setDesc(i).addSearch(o=>{new xi(o.inputEl,this.plugin,0),o.setPlaceholder(r).setValue(this.plugin.settings[s]).onChange(a=>{this.plugin.settings[s]=a,this.plugin.saveSettings()}),o.containerEl.addClass("templater_search")})}addFolderSuggest(t,i,s,r="\u793A\u4F8B\uFF1Afolder1/folder2"){new rt.Setting(this.containerEl).setName(t).setDesc(i).addSearch(o=>{new Ti(o.inputEl),o.setPlaceholder(r).setValue(this.plugin.settings[s]).onChange(a=>{this.plugin.settings[s]=a,this.plugin.saveSettings()}),o.containerEl.addClass("templater_search")})}addToggle(t,i,s,r,o){let a=new rt.Setting(this.containerEl).setName(t).setDesc(i).addToggle(l=>l.setValue(this.plugin.settings[s]).onChange(async c=>{this.plugin.settings[s]=c,this.plugin.saveSettings(),o&&o(c)}));r&&a.addText(l=>l.setPlaceholder(r))}addText(t,i,s,r,o){new rt.Setting(this.containerEl).setName(t).setDesc(i).addText(a=>a.setPlaceholder(s).setValue(this.plugin.settings[r]).onChange(async l=>{this.plugin.settings[r]=l,this.plugin.saveSettings(),o&&o(l)}))}};var _s={setup_enable_hover_sider:!1,enable_clickCopy_block:!0,enable_auto_pin:!1,enable_parse_m3u8:!0,enable_color_gallery:!0,folder_color_gallery:"",enable_icon_gallery:!0,folder_icon_gallery:""};var so=require("obsidian");var Et=require("obsidian");function to(n){navigator.clipboard.writeText(n).then(()=>{new Et.Notice("\u{1F600}Text copied: "+n)}).catch(e=>{new Et.Notice("copy text error: ",e)})}function io(n){let e=new Image;e.crossOrigin="anonymous",e.src=n.src,e.onload=()=>{let t=document.createElement("canvas");t.width=e.width,t.height=e.height;let i=t.getContext("2d");i&&(i.fillStyle="#fff",i.fillRect(0,0,t.width,t.height),i.drawImage(e,0,0));try{t.toBlob(async s=>{await navigator.clipboard.write([new ClipboardItem({"image/png":s})]).then(()=>{new Et.Notice("\u{1F601}Copied to clipboard: ![["+n.alt+"]]")},()=>{new Et.Notice("\u{1F62D}COPY IMAGE ERROR...")})})}catch(s){new Et.Notice("\u{1F62D}COPY IMAGE ERROR..."),console.error(s)}},e.onerror=()=>{new Et.Notice("\u{1F62D}COPY IMAGE ERROR...")}}var Xt=class extends so.MarkdownRenderChild{constructor(t,i){super(i);this.settings=t;this.renderedDiv=i}async onload(){this.renderClickCopyBlock(this.containerEl)}renderClickCopyBlock(t){let i=t.findAll(".cpb"),s=this.settings.enable_clickCopy_block;for(let r of i)s?(r.removeEventListener("click",this.clickHandler),r.addEventListener("click",this.clickHandler)):r.removeEventListener("click",this.clickHandler)}clickHandler(t){var r,o;let i=(r=t.target)==null?void 0:r.closest("span.cpb:not(:has(*))"),s=(o=t.target)==null?void 0:o.closest(":is(.cpb span) img");i&&!s&&to(i.innerText),s&&!t.ctrlKey&&!t.shiftKey&&!t.altKey&&!t.metaKey&&io(s)}};var vi=require("obsidian"),Qt=class extends vi.MarkdownRenderChild{constructor(t,i){super(i);this.settings=t;this.renderedDiv=i}async onload(){this.renderColorGallery()}renderColorGallery(){var i;let t=this.containerEl.findAll("li > ul > li");for(let s of t){let r=(i=s.textContent)!=null?i:"";if(!r)return;let o=createEl("button");o.style.backgroundColor=r,o.setAttribute("data-colorValue",r),o.setAttribute("aria-label",r),o.addEventListener("click",()=>{navigator.clipboard.writeText(r),new vi.Notice("\u989C\u8272\u503C\u6210\u529F\u590D\u5236\uFF1A"+r)}),o.addEventListener("mouseover",()=>{let a=s.parentElement.parentElement;a.classList.add("transition-effects"),a.style.backgroundColor=r,a.style.borderColor=`${r}`}),o.addEventListener("mouseout",()=>{let a=s.parentElement.parentElement;a.style.backgroundColor="",a.style.borderColor=""}),s.innerHTML="",s.appendChild(o)}}};var Si=require("obsidian"),Jt=class extends Si.MarkdownRenderChild{constructor(t,i){super(i);this.settings=t;this.renderedDiv=i}async onload(){this.renderIconGallery()}renderIconGallery(){var i;let t=this.containerEl.findAll("div > ul > li");for(let s of t){let r=h=>h.replace(/&amp;|&lt;|&gt;|&quot;|&#x27;/g,d=>({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#x27;":"'"})[d]||d),o=s.find("p"),l=o.find("code").innerHTML.toString();l=r(l),o.outerHTML=l,s.addEventListener("click",()=>{navigator.clipboard.writeText(l),new Si.Notice("\u56FE\u6807\u503C\u6210\u529F\u590D\u5236\uFF01")});let c=s.find("ul > li");if(!c)return;let u=(i=c.textContent)!=null?i:"";if(!u)return;s.setAttribute("aria-label",u)}}};function Ql(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var Zo={exports:{}};(function(n,e){(function(t){var i=/^(?=((?:[a-zA-Z0-9+\-.]+:)?))\1(?=((?:\/\/[^\/?#]*)?))\2(?=((?:(?:[^?#\/]*\/)*[^;?#\/]*)?))\3((?:;[^?#]*)?)(\?[^#]*)?(#[^]*)?$/,s=/^(?=([^\/?#]*))\1([^]*)$/,r=/(?:\/|^)\.(?=\/)/g,o=/(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g,a={buildAbsoluteURL:function(l,c,u){if(u=u||{},l=l.trim(),c=c.trim(),!c){if(!u.alwaysNormalize)return l;var h=a.parseURL(l);if(!h)throw new Error("Error trying to parse base URL.");return h.path=a.normalizePath(h.path),a.buildURLFromParts(h)}var d=a.parseURL(c);if(!d)throw new Error("Error trying to parse relative URL.");if(d.scheme)return u.alwaysNormalize?(d.path=a.normalizePath(d.path),a.buildURLFromParts(d)):c;var f=a.parseURL(l);if(!f)throw new Error("Error trying to parse base URL.");if(!f.netLoc&&f.path&&f.path[0]!=="/"){var g=s.exec(f.path);f.netLoc=g[1],f.path=g[2]}f.netLoc&&!f.path&&(f.path="/");var m={scheme:f.scheme,netLoc:d.netLoc,path:null,params:d.params,query:d.query,fragment:d.fragment};if(!d.netLoc&&(m.netLoc=f.netLoc,d.path[0]!=="/"))if(!d.path)m.path=f.path,d.params||(m.params=f.params,d.query||(m.query=f.query));else{var y=f.path,T=y.substring(0,y.lastIndexOf("/")+1)+d.path;m.path=a.normalizePath(T)}return m.path===null&&(m.path=u.alwaysNormalize?a.normalizePath(d.path):d.path),a.buildURLFromParts(m)},parseURL:function(l){var c=i.exec(l);return c?{scheme:c[1]||"",netLoc:c[2]||"",path:c[3]||"",params:c[4]||"",query:c[5]||"",fragment:c[6]||""}:null},normalizePath:function(l){for(l=l.split("").reverse().join("").replace(r,"");l.length!==(l=l.replace(o,"")).length;);return l.split("").reverse().join("")},buildURLFromParts:function(l){return l.scheme+l.netLoc+l.path+l.params+l.query+l.fragment}};n.exports=a})()})(Zo);var on=Zo.exports;function ro(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(n,s).enumerable})),t.push.apply(t,i)}return t}function ye(n){for(var e=1;e<arguments.length;e++){var t=arguments[e]!=null?arguments[e]:{};e%2?ro(Object(t),!0).forEach(function(i){ec(n,i,t[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):ro(Object(t)).forEach(function(i){Object.defineProperty(n,i,Object.getOwnPropertyDescriptor(t,i))})}return n}function Jl(n,e){if(typeof n!="object"||!n)return n;var t=n[Symbol.toPrimitive];if(t!==void 0){var i=t.call(n,e||"default");if(typeof i!="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(n)}function Zl(n){var e=Jl(n,"string");return typeof e=="symbol"?e:String(e)}function ec(n,e,t){return e=Zl(e),e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function le(){return le=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=t[i])}return n},le.apply(this,arguments)}var M=Number.isFinite||function(n){return typeof n=="number"&&isFinite(n)},tc=Number.isSafeInteger||function(n){return typeof n=="number"&&Math.abs(n)<=ic},ic=Number.MAX_SAFE_INTEGER||9007199254740991,p=function(n){return n.MEDIA_ATTACHING="hlsMediaAttaching",n.MEDIA_ATTACHED="hlsMediaAttached",n.MEDIA_DETACHING="hlsMediaDetaching",n.MEDIA_DETACHED="hlsMediaDetached",n.BUFFER_RESET="hlsBufferReset",n.BUFFER_CODECS="hlsBufferCodecs",n.BUFFER_CREATED="hlsBufferCreated",n.BUFFER_APPENDING="hlsBufferAppending",n.BUFFER_APPENDED="hlsBufferAppended",n.BUFFER_EOS="hlsBufferEos",n.BUFFER_FLUSHING="hlsBufferFlushing",n.BUFFER_FLUSHED="hlsBufferFlushed",n.MANIFEST_LOADING="hlsManifestLoading",n.MANIFEST_LOADED="hlsManifestLoaded",n.MANIFEST_PARSED="hlsManifestParsed",n.LEVEL_SWITCHING="hlsLevelSwitching",n.LEVEL_SWITCHED="hlsLevelSwitched",n.LEVEL_LOADING="hlsLevelLoading",n.LEVEL_LOADED="hlsLevelLoaded",n.LEVEL_UPDATED="hlsLevelUpdated",n.LEVEL_PTS_UPDATED="hlsLevelPtsUpdated",n.LEVELS_UPDATED="hlsLevelsUpdated",n.AUDIO_TRACKS_UPDATED="hlsAudioTracksUpdated",n.AUDIO_TRACK_SWITCHING="hlsAudioTrackSwitching",n.AUDIO_TRACK_SWITCHED="hlsAudioTrackSwitched",n.AUDIO_TRACK_LOADING="hlsAudioTrackLoading",n.AUDIO_TRACK_LOADED="hlsAudioTrackLoaded",n.SUBTITLE_TRACKS_UPDATED="hlsSubtitleTracksUpdated",n.SUBTITLE_TRACKS_CLEARED="hlsSubtitleTracksCleared",n.SUBTITLE_TRACK_SWITCH="hlsSubtitleTrackSwitch",n.SUBTITLE_TRACK_LOADING="hlsSubtitleTrackLoading",n.SUBTITLE_TRACK_LOADED="hlsSubtitleTrackLoaded",n.SUBTITLE_FRAG_PROCESSED="hlsSubtitleFragProcessed",n.CUES_PARSED="hlsCuesParsed",n.NON_NATIVE_TEXT_TRACKS_FOUND="hlsNonNativeTextTracksFound",n.INIT_PTS_FOUND="hlsInitPtsFound",n.FRAG_LOADING="hlsFragLoading",n.FRAG_LOAD_EMERGENCY_ABORTED="hlsFragLoadEmergencyAborted",n.FRAG_LOADED="hlsFragLoaded",n.FRAG_DECRYPTED="hlsFragDecrypted",n.FRAG_PARSING_INIT_SEGMENT="hlsFragParsingInitSegment",n.FRAG_PARSING_USERDATA="hlsFragParsingUserdata",n.FRAG_PARSING_METADATA="hlsFragParsingMetadata",n.FRAG_PARSED="hlsFragParsed",n.FRAG_BUFFERED="hlsFragBuffered",n.FRAG_CHANGED="hlsFragChanged",n.FPS_DROP="hlsFpsDrop",n.FPS_DROP_LEVEL_CAPPING="hlsFpsDropLevelCapping",n.MAX_AUTO_LEVEL_UPDATED="hlsMaxAutoLevelUpdated",n.ERROR="hlsError",n.DESTROYING="hlsDestroying",n.KEY_LOADING="hlsKeyLoading",n.KEY_LOADED="hlsKeyLoaded",n.LIVE_BACK_BUFFER_REACHED="hlsLiveBackBufferReached",n.BACK_BUFFER_REACHED="hlsBackBufferReached",n.STEERING_MANIFEST_LOADED="hlsSteeringManifestLoaded",n}({}),V=function(n){return n.NETWORK_ERROR="networkError",n.MEDIA_ERROR="mediaError",n.KEY_SYSTEM_ERROR="keySystemError",n.MUX_ERROR="muxError",n.OTHER_ERROR="otherError",n}({}),I=function(n){return n.KEY_SYSTEM_NO_KEYS="keySystemNoKeys",n.KEY_SYSTEM_NO_ACCESS="keySystemNoAccess",n.KEY_SYSTEM_NO_SESSION="keySystemNoSession",n.KEY_SYSTEM_NO_CONFIGURED_LICENSE="keySystemNoConfiguredLicense",n.KEY_SYSTEM_LICENSE_REQUEST_FAILED="keySystemLicenseRequestFailed",n.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED="keySystemServerCertificateRequestFailed",n.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED="keySystemServerCertificateUpdateFailed",n.KEY_SYSTEM_SESSION_UPDATE_FAILED="keySystemSessionUpdateFailed",n.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED="keySystemStatusOutputRestricted",n.KEY_SYSTEM_STATUS_INTERNAL_ERROR="keySystemStatusInternalError",n.MANIFEST_LOAD_ERROR="manifestLoadError",n.MANIFEST_LOAD_TIMEOUT="manifestLoadTimeOut",n.MANIFEST_PARSING_ERROR="manifestParsingError",n.MANIFEST_INCOMPATIBLE_CODECS_ERROR="manifestIncompatibleCodecsError",n.LEVEL_EMPTY_ERROR="levelEmptyError",n.LEVEL_LOAD_ERROR="levelLoadError",n.LEVEL_LOAD_TIMEOUT="levelLoadTimeOut",n.LEVEL_PARSING_ERROR="levelParsingError",n.LEVEL_SWITCH_ERROR="levelSwitchError",n.AUDIO_TRACK_LOAD_ERROR="audioTrackLoadError",n.AUDIO_TRACK_LOAD_TIMEOUT="audioTrackLoadTimeOut",n.SUBTITLE_LOAD_ERROR="subtitleTrackLoadError",n.SUBTITLE_TRACK_LOAD_TIMEOUT="subtitleTrackLoadTimeOut",n.FRAG_LOAD_ERROR="fragLoadError",n.FRAG_LOAD_TIMEOUT="fragLoadTimeOut",n.FRAG_DECRYPT_ERROR="fragDecryptError",n.FRAG_PARSING_ERROR="fragParsingError",n.FRAG_GAP="fragGap",n.REMUX_ALLOC_ERROR="remuxAllocError",n.KEY_LOAD_ERROR="keyLoadError",n.KEY_LOAD_TIMEOUT="keyLoadTimeOut",n.BUFFER_ADD_CODEC_ERROR="bufferAddCodecError",n.BUFFER_INCOMPATIBLE_CODECS_ERROR="bufferIncompatibleCodecsError",n.BUFFER_APPEND_ERROR="bufferAppendError",n.BUFFER_APPENDING_ERROR="bufferAppendingError",n.BUFFER_STALLED_ERROR="bufferStalledError",n.BUFFER_FULL_ERROR="bufferFullError",n.BUFFER_SEEK_OVER_HOLE="bufferSeekOverHole",n.BUFFER_NUDGE_ON_STALL="bufferNudgeOnStall",n.INTERNAL_EXCEPTION="internalException",n.INTERNAL_ABORTED="aborted",n.UNKNOWN="unknown",n}({}),St=function(){},Js={trace:St,debug:St,log:St,warn:St,info:St,error:St},ei=Js;function sc(n){let e=self.console[n];return e?e.bind(self.console,`[${n}] >`):St}function rc(n,...e){e.forEach(function(t){ei[t]=n[t]?n[t].bind(n):sc(t)})}function nc(n,e){if(typeof console=="object"&&n===!0||typeof n=="object"){rc(n,"debug","log","info","warn","error");try{ei.log(`Debug logs enabled for "${e}" in hls.js version 1.5.13`)}catch(t){ei=Js}}else ei=Js}var L=ei,oc=/^(\d+)x(\d+)$/,no=/(.+?)=(".*?"|.*?)(?:,|$)/g,te=class{constructor(e){typeof e=="string"&&(e=te.parseAttrList(e)),le(this,e)}get clientAttrs(){return Object.keys(this).filter(e=>e.substring(0,2)==="X-")}decimalInteger(e){let t=parseInt(this[e],10);return t>Number.MAX_SAFE_INTEGER?1/0:t}hexadecimalInteger(e){if(this[e]){let t=(this[e]||"0x").slice(2);t=(t.length&1?"0":"")+t;let i=new Uint8Array(t.length/2);for(let s=0;s<t.length/2;s++)i[s]=parseInt(t.slice(s*2,s*2+2),16);return i}else return null}hexadecimalIntegerAsNumber(e){let t=parseInt(this[e],16);return t>Number.MAX_SAFE_INTEGER?1/0:t}decimalFloatingPoint(e){return parseFloat(this[e])}optionalFloat(e,t){let i=this[e];return i?parseFloat(i):t}enumeratedString(e){return this[e]}bool(e){return this[e]==="YES"}decimalResolution(e){let t=oc.exec(this[e]);if(t!==null)return{width:parseInt(t[1],10),height:parseInt(t[2],10)}}static parseAttrList(e){let t,i={},s='"';for(no.lastIndex=0;(t=no.exec(e))!==null;){let r=t[2];r.indexOf(s)===0&&r.lastIndexOf(s)===r.length-1&&(r=r.slice(1,-1));let o=t[1].trim();i[o]=r}return i}};function ac(n){return n!=="ID"&&n!=="CLASS"&&n!=="START-DATE"&&n!=="DURATION"&&n!=="END-DATE"&&n!=="END-ON-NEXT"}function lc(n){return n==="SCTE35-OUT"||n==="SCTE35-IN"}var $i=class{constructor(e,t){if(this.attr=void 0,this._startDate=void 0,this._endDate=void 0,this._badValueForSameId=void 0,t){let i=t.attr;for(let s in i)if(Object.prototype.hasOwnProperty.call(e,s)&&e[s]!==i[s]){L.warn(`DATERANGE tag attribute: "${s}" does not match for tags with ID: "${e.ID}"`),this._badValueForSameId=s;break}e=le(new te({}),i,e)}if(this.attr=e,this._startDate=new Date(e["START-DATE"]),"END-DATE"in this.attr){let i=new Date(this.attr["END-DATE"]);M(i.getTime())&&(this._endDate=i)}}get id(){return this.attr.ID}get class(){return this.attr.CLASS}get startDate(){return this._startDate}get endDate(){if(this._endDate)return this._endDate;let e=this.duration;return e!==null?new Date(this._startDate.getTime()+e*1e3):null}get duration(){if("DURATION"in this.attr){let e=this.attr.decimalFloatingPoint("DURATION");if(M(e))return e}else if(this._endDate)return(this._endDate.getTime()-this._startDate.getTime())/1e3;return null}get plannedDuration(){return"PLANNED-DURATION"in this.attr?this.attr.decimalFloatingPoint("PLANNED-DURATION"):null}get endOnNext(){return this.attr.bool("END-ON-NEXT")}get isValid(){return!!this.id&&!this._badValueForSameId&&M(this.startDate.getTime())&&(this.duration===null||this.duration>=0)&&(!this.endOnNext||!!this.class)}},Gt=class{constructor(){this.aborted=!1,this.loaded=0,this.retry=0,this.total=0,this.chunkCount=0,this.bwEstimate=0,this.loading={start:0,first:0,end:0},this.parsing={start:0,end:0},this.buffering={start:0,first:0,end:0}}},Q={AUDIO:"audio",VIDEO:"video",AUDIOVIDEO:"audiovideo"},Gi=class{constructor(e){this._byteRange=null,this._url=null,this.baseurl=void 0,this.relurl=void 0,this.elementaryStreams={[Q.AUDIO]:null,[Q.VIDEO]:null,[Q.AUDIOVIDEO]:null},this.baseurl=e}setByteRange(e,t){let i=e.split("@",2),s;i.length===1?s=(t==null?void 0:t.byteRangeEndOffset)||0:s=parseInt(i[1]),this._byteRange=[s,parseInt(i[0])+s]}get byteRange(){return this._byteRange?this._byteRange:[]}get byteRangeStartOffset(){return this.byteRange[0]}get byteRangeEndOffset(){return this.byteRange[1]}get url(){return!this._url&&this.baseurl&&this.relurl&&(this._url=on.buildAbsoluteURL(this.baseurl,this.relurl,{alwaysNormalize:!0})),this._url||""}set url(e){this._url=e}},ti=class extends Gi{constructor(e,t){super(t),this._decryptdata=null,this.rawProgramDateTime=null,this.programDateTime=null,this.tagList=[],this.duration=0,this.sn=0,this.levelkeys=void 0,this.type=void 0,this.loader=null,this.keyLoader=null,this.level=-1,this.cc=0,this.startPTS=void 0,this.endPTS=void 0,this.startDTS=void 0,this.endDTS=void 0,this.start=0,this.deltaPTS=void 0,this.maxStartPTS=void 0,this.minEndPTS=void 0,this.stats=new Gt,this.data=void 0,this.bitrateTest=!1,this.title=null,this.initSegment=null,this.endList=void 0,this.gap=void 0,this.urlId=0,this.type=e}get decryptdata(){let{levelkeys:e}=this;if(!e&&!this._decryptdata)return null;if(!this._decryptdata&&this.levelkeys&&!this.levelkeys.NONE){let t=this.levelkeys.identity;if(t)this._decryptdata=t.getDecryptData(this.sn);else{let i=Object.keys(this.levelkeys);if(i.length===1)return this._decryptdata=this.levelkeys[i[0]].getDecryptData(this.sn)}}return this._decryptdata}get end(){return this.start+this.duration}get endProgramDateTime(){if(this.programDateTime===null||!M(this.programDateTime))return null;let e=M(this.duration)?this.duration:0;return this.programDateTime+e*1e3}get encrypted(){var e;if((e=this._decryptdata)!=null&&e.encrypted)return!0;if(this.levelkeys){let t=Object.keys(this.levelkeys),i=t.length;if(i>1||i===1&&this.levelkeys[t[0]].encrypted)return!0}return!1}setKeyFormat(e){if(this.levelkeys){let t=this.levelkeys[e];t&&!this._decryptdata&&(this._decryptdata=t.getDecryptData(this.sn))}}abortRequests(){var e,t;(e=this.loader)==null||e.abort(),(t=this.keyLoader)==null||t.abort()}setElementaryStreamInfo(e,t,i,s,r,o=!1){let{elementaryStreams:a}=this,l=a[e];if(!l){a[e]={startPTS:t,endPTS:i,startDTS:s,endDTS:r,partial:o};return}l.startPTS=Math.min(l.startPTS,t),l.endPTS=Math.max(l.endPTS,i),l.startDTS=Math.min(l.startDTS,s),l.endDTS=Math.max(l.endDTS,r)}clearElementaryStreamInfo(){let{elementaryStreams:e}=this;e[Q.AUDIO]=null,e[Q.VIDEO]=null,e[Q.AUDIOVIDEO]=null}},Zs=class extends Gi{constructor(e,t,i,s,r){super(i),this.fragOffset=0,this.duration=0,this.gap=!1,this.independent=!1,this.relurl=void 0,this.fragment=void 0,this.index=void 0,this.stats=new Gt,this.duration=e.decimalFloatingPoint("DURATION"),this.gap=e.bool("GAP"),this.independent=e.bool("INDEPENDENT"),this.relurl=e.enumeratedString("URI"),this.fragment=t,this.index=s;let o=e.enumeratedString("BYTERANGE");o&&this.setByteRange(o,r),r&&(this.fragOffset=r.fragOffset+r.duration)}get start(){return this.fragment.start+this.fragOffset}get end(){return this.start+this.duration}get loaded(){let{elementaryStreams:e}=this;return!!(e.audio||e.video||e.audiovideo)}},cc=10,er=class{constructor(e){this.PTSKnown=!1,this.alignedSliding=!1,this.averagetargetduration=void 0,this.endCC=0,this.endSN=0,this.fragments=void 0,this.fragmentHint=void 0,this.partList=null,this.dateRanges=void 0,this.live=!0,this.ageHeader=0,this.advancedDateTime=void 0,this.updated=!0,this.advanced=!0,this.availabilityDelay=void 0,this.misses=0,this.startCC=0,this.startSN=0,this.startTimeOffset=null,this.targetduration=0,this.totalduration=0,this.type=null,this.url=void 0,this.m3u8="",this.version=null,this.canBlockReload=!1,this.canSkipUntil=0,this.canSkipDateRanges=!1,this.skippedSegments=0,this.recentlyRemovedDateranges=void 0,this.partHoldBack=0,this.holdBack=0,this.partTarget=0,this.preloadHint=void 0,this.renditionReports=void 0,this.tuneInGoal=0,this.deltaUpdateFailed=void 0,this.driftStartTime=0,this.driftEndTime=0,this.driftStart=0,this.driftEnd=0,this.encryptedFragments=void 0,this.playlistParsingError=null,this.variableList=null,this.hasVariableRefs=!1,this.fragments=[],this.encryptedFragments=[],this.dateRanges={},this.url=e}reloaded(e){if(!e){this.advanced=!0,this.updated=!0;return}let t=this.lastPartSn-e.lastPartSn,i=this.lastPartIndex-e.lastPartIndex;this.updated=this.endSN!==e.endSN||!!i||!!t||!this.live,this.advanced=this.endSN>e.endSN||t>0||t===0&&i>0,this.updated||this.advanced?this.misses=Math.floor(e.misses*.6):this.misses=e.misses+1,this.availabilityDelay=e.availabilityDelay}get hasProgramDateTime(){return this.fragments.length?M(this.fragments[this.fragments.length-1].programDateTime):!1}get levelTargetDuration(){return this.averagetargetduration||this.targetduration||cc}get drift(){let e=this.driftEndTime-this.driftStartTime;return e>0?(this.driftEnd-this.driftStart)*1e3/e:1}get edge(){return this.partEnd||this.fragmentEnd}get partEnd(){var e;return(e=this.partList)!=null&&e.length?this.partList[this.partList.length-1].end:this.fragmentEnd}get fragmentEnd(){var e;return(e=this.fragments)!=null&&e.length?this.fragments[this.fragments.length-1].end:0}get age(){return this.advancedDateTime?Math.max(Date.now()-this.advancedDateTime,0)/1e3:0}get lastPartIndex(){var e;return(e=this.partList)!=null&&e.length?this.partList[this.partList.length-1].index:-1}get lastPartSn(){var e;return(e=this.partList)!=null&&e.length?this.partList[this.partList.length-1].fragment.sn:this.endSN}};function an(n){return Uint8Array.from(atob(n),e=>e.charCodeAt(0))}function uc(n){let e=tr(n).subarray(0,16),t=new Uint8Array(16);return t.set(e,16-e.length),t}function hc(n){let e=function(i,s,r){let o=i[s];i[s]=i[r],i[r]=o};e(n,0,3),e(n,1,2),e(n,4,5),e(n,6,7)}function dc(n){let e=n.split(":"),t=null;if(e[0]==="data"&&e.length===2){let i=e[1].split(";"),s=i[i.length-1].split(",");if(s.length===2){let r=s[0]==="base64",o=s[1];r?(i.splice(-1,1),t=an(o)):t=uc(o)}}return t}function tr(n){return Uint8Array.from(unescape(encodeURIComponent(n)),e=>e.charCodeAt(0))}var Ht=typeof self!="undefined"?self:void 0,se={CLEARKEY:"org.w3.clearkey",FAIRPLAY:"com.apple.fps",PLAYREADY:"com.microsoft.playready",WIDEVINE:"com.widevine.alpha"},Le={CLEARKEY:"org.w3.clearkey",FAIRPLAY:"com.apple.streamingkeydelivery",PLAYREADY:"com.microsoft.playready",WIDEVINE:"urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed"};function oo(n){switch(n){case Le.FAIRPLAY:return se.FAIRPLAY;case Le.PLAYREADY:return se.PLAYREADY;case Le.WIDEVINE:return se.WIDEVINE;case Le.CLEARKEY:return se.CLEARKEY}}var ea={WIDEVINE:"edef8ba979d64acea3c827dcd51d21ed"};function fc(n){if(n===ea.WIDEVINE)return se.WIDEVINE}function ao(n){switch(n){case se.FAIRPLAY:return Le.FAIRPLAY;case se.PLAYREADY:return Le.PLAYREADY;case se.WIDEVINE:return Le.WIDEVINE;case se.CLEARKEY:return Le.CLEARKEY}}function Ps(n){let{drmSystems:e,widevineLicenseUrl:t}=n,i=e?[se.FAIRPLAY,se.WIDEVINE,se.PLAYREADY,se.CLEARKEY].filter(s=>!!e[s]):[];return!i[se.WIDEVINE]&&t&&i.push(se.WIDEVINE),i}var ta=function(n){return Ht!=null&&(n=Ht.navigator)!=null&&n.requestMediaKeySystemAccess?self.navigator.requestMediaKeySystemAccess.bind(self.navigator):null}();function gc(n,e,t,i){let s;switch(n){case se.FAIRPLAY:s=["cenc","sinf"];break;case se.WIDEVINE:case se.PLAYREADY:s=["cenc"];break;case se.CLEARKEY:s=["cenc","keyids"];break;default:throw new Error(`Unknown key-system: ${n}`)}return mc(s,e,t,i)}function mc(n,e,t,i){return[{initDataTypes:n,persistentState:i.persistentState||"optional",distinctiveIdentifier:i.distinctiveIdentifier||"optional",sessionTypes:i.sessionTypes||[i.sessionType||"temporary"],audioCapabilities:e.map(r=>({contentType:`audio/mp4; codecs="${r}"`,robustness:i.audioRobustness||"",encryptionScheme:i.audioEncryptionScheme||null})),videoCapabilities:t.map(r=>({contentType:`video/mp4; codecs="${r}"`,robustness:i.videoRobustness||"",encryptionScheme:i.videoEncryptionScheme||null}))}]}function Lt(n,e,t){return Uint8Array.prototype.slice?n.slice(e,t):new Uint8Array(Array.prototype.slice.call(n,e,t))}var ln=(n,e)=>e+10<=n.length&&n[e]===73&&n[e+1]===68&&n[e+2]===51&&n[e+3]<255&&n[e+4]<255&&n[e+6]<128&&n[e+7]<128&&n[e+8]<128&&n[e+9]<128,ia=(n,e)=>e+10<=n.length&&n[e]===51&&n[e+1]===68&&n[e+2]===73&&n[e+3]<255&&n[e+4]<255&&n[e+6]<128&&n[e+7]<128&&n[e+8]<128&&n[e+9]<128,si=(n,e)=>{let t=e,i=0;for(;ln(n,e);){i+=10;let s=ds(n,e+6);i+=s,ia(n,e+10)&&(i+=10),e+=i}if(i>0)return n.subarray(t,t+i)},ds=(n,e)=>{let t=0;return t=(n[e]&127)<<21,t|=(n[e+1]&127)<<14,t|=(n[e+2]&127)<<7,t|=n[e+3]&127,t},pc=(n,e)=>ln(n,e)&&ds(n,e+6)+10<=n.length-e,cn=n=>{let e=ra(n);for(let t=0;t<e.length;t++){let i=e[t];if(sa(i))return Sc(i)}},sa=n=>n&&n.key==="PRIV"&&n.info==="com.apple.streaming.transportStreamTimestamp",yc=n=>{let e=String.fromCharCode(n[0],n[1],n[2],n[3]),t=ds(n,4),i=10;return{type:e,size:t,data:n.subarray(i,i+t)}},ra=n=>{let e=0,t=[];for(;ln(n,e);){let i=ds(n,e+6);e+=10;let s=e+i;for(;e+8<s;){let r=yc(n.subarray(e)),o=Tc(r);o&&t.push(o),e+=r.size+10}ia(n,e)&&(e+=10)}return t},Tc=n=>n.type==="PRIV"?xc(n):n.type[0]==="W"?vc(n):Ec(n),xc=n=>{if(n.size<2)return;let e=Ye(n.data,!0),t=new Uint8Array(n.data.subarray(e.length+1));return{key:n.type,info:e,data:t.buffer}},Ec=n=>{if(n.size<2)return;if(n.type==="TXXX"){let t=1,i=Ye(n.data.subarray(t),!0);t+=i.length+1;let s=Ye(n.data.subarray(t));return{key:n.type,info:i,data:s}}let e=Ye(n.data.subarray(1));return{key:n.type,data:e}},vc=n=>{if(n.type==="WXXX"){if(n.size<2)return;let t=1,i=Ye(n.data.subarray(t),!0);t+=i.length+1;let s=Ye(n.data.subarray(t));return{key:n.type,info:i,data:s}}let e=Ye(n.data);return{key:n.type,data:e}},Sc=n=>{if(n.data.byteLength===8){let e=new Uint8Array(n.data),t=e[3]&1,i=(e[4]<<23)+(e[5]<<15)+(e[6]<<7)+e[7];return i/=45,t&&(i+=4772185884e-2),Math.round(i)}},Ye=(n,e=!1)=>{let t=Ac();if(t){let c=t.decode(n);if(e){let u=c.indexOf("\0");return u!==-1?c.substring(0,u):c}return c.replace(/\0/g,"")}let i=n.length,s,r,o,a="",l=0;for(;l<i;){if(s=n[l++],s===0&&e)return a;if(s===0||s===3)continue;switch(s>>4){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:a+=String.fromCharCode(s);break;case 12:case 13:r=n[l++],a+=String.fromCharCode((s&31)<<6|r&63);break;case 14:r=n[l++],o=n[l++],a+=String.fromCharCode((s&15)<<12|(r&63)<<6|(o&63)<<0);break}}return a},Os;function Ac(){if(!navigator.userAgent.includes("PlayStation 4"))return!Os&&typeof self.TextDecoder!="undefined"&&(Os=new self.TextDecoder("utf-8")),Os}var He={hexDump:function(n){let e="";for(let t=0;t<n.length;t++){let i=n[t].toString(16);i.length<2&&(i="0"+i),e+=i}return e}},Hi=Math.pow(2,32)-1,Lc=[].push,na={video:1,audio:2,id3:3,text:4};function he(n){return String.fromCharCode.apply(null,n)}function oa(n,e){let t=n[e]<<8|n[e+1];return t<0?65536+t:t}function G(n,e){let t=aa(n,e);return t<0?4294967296+t:t}function lo(n,e){let t=G(n,e);return t*=Math.pow(2,32),t+=G(n,e+4),t}function aa(n,e){return n[e]<<24|n[e+1]<<16|n[e+2]<<8|n[e+3]}function Fs(n,e,t){n[e]=t>>24,n[e+1]=t>>16&255,n[e+2]=t>>8&255,n[e+3]=t&255}function bc(n){let e=n.byteLength;for(let t=0;t<e;){let i=G(n,t);if(i>8&&n[t+4]===109&&n[t+5]===111&&n[t+6]===111&&n[t+7]===102)return!0;t=i>1?t+i:e}return!1}function Y(n,e){let t=[];if(!e.length)return t;let i=n.byteLength;for(let s=0;s<i;){let r=G(n,s),o=he(n.subarray(s+4,s+8)),a=r>1?s+r:i;if(o===e[0])if(e.length===1)t.push(n.subarray(s+8,a));else{let l=Y(n.subarray(s+8,a),e.slice(1));l.length&&Lc.apply(t,l)}s=a}return t}function Rc(n){let e=[],t=n[0],i=8,s=G(n,i);i+=4;let r=0,o=0;t===0?(r=G(n,i),o=G(n,i+4),i+=8):(r=lo(n,i),o=lo(n,i+8),i+=16),i+=2;let a=n.length+o,l=oa(n,i);i+=2;for(let c=0;c<l;c++){let u=i,h=G(n,u);u+=4;let d=h&2147483647;if((h&2147483648)>>>31===1)return L.warn("SIDX has hierarchical references (not supported)"),null;let g=G(n,u);u+=4,e.push({referenceSize:d,subsegmentDuration:g,info:{duration:g/s,start:a,end:a+d-1}}),a+=d,u+=4,i=u}return{earliestPresentationTime:r,timescale:s,version:t,referencesCount:l,references:e}}function la(n){let e=[],t=Y(n,["moov","trak"]);for(let s=0;s<t.length;s++){let r=t[s],o=Y(r,["tkhd"])[0];if(o){let a=o[0],l=G(o,a===0?12:20),c=Y(r,["mdia","mdhd"])[0];if(c){a=c[0];let u=G(c,a===0?12:20),h=Y(r,["mdia","hdlr"])[0];if(h){let d=he(h.subarray(8,12)),f={soun:Q.AUDIO,vide:Q.VIDEO}[d];if(f){let g=Y(r,["mdia","minf","stbl","stsd"])[0],m=Ic(g);e[l]={timescale:u,type:f},e[f]=ye({timescale:u,id:l},m)}}}}}return Y(n,["moov","mvex","trex"]).forEach(s=>{let r=G(s,4),o=e[r];o&&(o.default={duration:G(s,12),flags:G(s,20)})}),e}function Ic(n){let e=n.subarray(8),t=e.subarray(8+78),i=he(e.subarray(4,8)),s=i,r=i==="enca"||i==="encv";if(r){let a=Y(e,[i])[0].subarray(i==="enca"?28:78);Y(a,["sinf"]).forEach(c=>{let u=Y(c,["schm"])[0];if(u){let h=he(u.subarray(4,8));if(h==="cbcs"||h==="cenc"){let d=Y(c,["frma"])[0];d&&(s=he(d))}}})}switch(s){case"avc1":case"avc2":case"avc3":case"avc4":{let o=Y(t,["avcC"])[0];s+="."+Ai(o[1])+Ai(o[2])+Ai(o[3]);break}case"mp4a":{let o=Y(e,[i])[0],a=Y(o.subarray(28),["esds"])[0];if(a&&a.length>12){let l=4;if(a[l++]!==3)break;l=Ms(a,l),l+=2;let c=a[l++];if(c&128&&(l+=2),c&64&&(l+=a[l++]),a[l++]!==4)break;l=Ms(a,l);let u=a[l++];if(u===64)s+="."+Ai(u);else break;if(l+=12,a[l++]!==5)break;l=Ms(a,l);let h=a[l++],d=(h&248)>>3;d===31&&(d+=1+((h&7)<<3)+((a[l]&224)>>5)),s+="."+d}break}case"hvc1":case"hev1":{let o=Y(t,["hvcC"])[0],a=o[1],l=["","A","B","C"][a>>6],c=a&31,u=G(o,2),h=(a&32)>>5?"H":"L",d=o[12],f=o.subarray(6,12);s+="."+l+c,s+="."+u.toString(16).toUpperCase(),s+="."+h+d;let g="";for(let m=f.length;m--;){let y=f[m];(y||g)&&(g="."+y.toString(16).toUpperCase()+g)}s+=g;break}case"dvh1":case"dvhe":{let o=Y(t,["dvcC"])[0],a=o[2]>>1&127,l=o[2]<<5&32|o[3]>>3&31;s+="."+Ge(a)+"."+Ge(l);break}case"vp09":{let o=Y(t,["vpcC"])[0],a=o[4],l=o[5],c=o[6]>>4&15;s+="."+Ge(a)+"."+Ge(l)+"."+Ge(c);break}case"av01":{let o=Y(t,["av1C"])[0],a=o[1]>>>5,l=o[1]&31,c=o[2]>>>7?"H":"M",u=(o[2]&64)>>6,h=(o[2]&32)>>5,d=a===2&&u?h?12:10:u?10:8,f=(o[2]&16)>>4,g=(o[2]&8)>>3,m=(o[2]&4)>>2,y=o[2]&3,T=1,v=1,E=1,S=0;s+="."+a+"."+Ge(l)+c+"."+Ge(d)+"."+f+"."+g+m+y+"."+Ge(T)+"."+Ge(v)+"."+Ge(E)+"."+S;break}}return{codec:s,encrypted:r}}function Ms(n,e){let t=e+5;for(;n[e++]&128&&e<t;);return e}function Ai(n){return("0"+n.toString(16).toUpperCase()).slice(-2)}function Ge(n){return(n<10?"0":"")+n}function Dc(n,e){if(!n||!e)return n;let t=e.keyId;return t&&e.isCommonEncryption&&Y(n,["moov","trak"]).forEach(s=>{let o=Y(s,["mdia","minf","stbl","stsd"])[0].subarray(8),a=Y(o,["enca"]),l=a.length>0;l||(a=Y(o,["encv"])),a.forEach(c=>{let u=l?c.subarray(28):c.subarray(78);Y(u,["sinf"]).forEach(d=>{let f=ca(d);if(f){let g=f.subarray(8,24);g.some(m=>m!==0)||(L.log(`[eme] Patching keyId in 'enc${l?"a":"v"}>sinf>>tenc' box: ${He.hexDump(g)} -> ${He.hexDump(t)}`),f.set(t,8))}})})}),n}function ca(n){let e=Y(n,["schm"])[0];if(e){let t=he(e.subarray(4,8));if(t==="cbcs"||t==="cenc")return Y(n,["schi","tenc"])[0]}return L.error("[eme] missing 'schm' box"),null}function Cc(n,e){return Y(e,["moof","traf"]).reduce((t,i)=>{let s=Y(i,["tfdt"])[0],r=s[0],o=Y(i,["tfhd"]).reduce((a,l)=>{let c=G(l,4),u=n[c];if(u){let h=G(s,4);if(r===1){if(h===Hi)return L.warn("[mp4-demuxer]: Ignoring assumed invalid signed 64-bit track fragment decode time"),a;h*=Hi+1,h+=G(s,8)}let d=u.timescale||9e4,f=h/d;if(M(f)&&(a===null||f<a))return f}return a},null);return o!==null&&M(o)&&(t===null||o<t)?o:t},null)}function wc(n,e){let t=0,i=0,s=0,r=Y(n,["moof","traf"]);for(let o=0;o<r.length;o++){let a=r[o],l=Y(a,["tfhd"])[0],c=G(l,4),u=e[c];if(!u)continue;let h=u.default,d=G(l,0)|(h==null?void 0:h.flags),f=h==null?void 0:h.duration;d&8&&(d&2?f=G(l,12):f=G(l,8));let g=u.timescale||9e4,m=Y(a,["trun"]);for(let y=0;y<m.length;y++){if(t=kc(m[y]),!t&&f){let T=G(m[y],4);t=f*T}u.type===Q.VIDEO?i+=t/g:u.type===Q.AUDIO&&(s+=t/g)}}if(i===0&&s===0){let o=1/0,a=0,l=0,c=Y(n,["sidx"]);for(let u=0;u<c.length;u++){let h=Rc(c[u]);if(h!=null&&h.references){o=Math.min(o,h.earliestPresentationTime/h.timescale);let d=h.references.reduce((f,g)=>f+g.info.duration||0,0);a=Math.max(a,d+h.earliestPresentationTime/h.timescale),l=a-o}}if(l&&M(l))return l}return i||s}function kc(n){let e=G(n,0),t=8;e&1&&(t+=4),e&4&&(t+=4);let i=0,s=G(n,4);for(let r=0;r<s;r++){if(e&256){let o=G(n,t);i+=o,t+=4}e&512&&(t+=4),e&1024&&(t+=4),e&2048&&(t+=4)}return i}function _c(n,e,t){Y(e,["moof","traf"]).forEach(i=>{Y(i,["tfhd"]).forEach(s=>{let r=G(s,4),o=n[r];if(!o)return;let a=o.timescale||9e4;Y(i,["tfdt"]).forEach(l=>{let c=l[0],u=t*a;if(u){let h=G(l,4);if(c===0)h-=u,h=Math.max(h,0),Fs(l,4,h);else{h*=Math.pow(2,32),h+=G(l,8),h-=u,h=Math.max(h,0);let d=Math.floor(h/(Hi+1)),f=Math.floor(h%(Hi+1));Fs(l,4,d),Fs(l,8,f)}}})})})}function Pc(n){let e={valid:null,remainder:null},t=Y(n,["moof"]);if(t.length<2)return e.remainder=n,e;let i=t[t.length-1];return e.valid=Lt(n,0,i.byteOffset-8),e.remainder=Lt(n,i.byteOffset-8),e}function _e(n,e){let t=new Uint8Array(n.length+e.length);return t.set(n),t.set(e,n.length),t}function co(n,e){let t=[],i=e.samples,s=e.timescale,r=e.id,o=!1;return Y(i,["moof"]).map(l=>{let c=l.byteOffset-8;Y(l,["traf"]).map(h=>{let d=Y(h,["tfdt"]).map(f=>{let g=f[0],m=G(f,4);return g===1&&(m*=Math.pow(2,32),m+=G(f,8)),m/s})[0];return d!==void 0&&(n=d),Y(h,["tfhd"]).map(f=>{let g=G(f,4),m=G(f,0)&16777215,y=(m&1)!==0,T=(m&2)!==0,v=(m&8)!==0,E=0,S=(m&16)!==0,x=0,A=(m&32)!==0,b=8;g===r&&(y&&(b+=8),T&&(b+=4),v&&(E=G(f,b),b+=4),S&&(x=G(f,b),b+=4),A&&(b+=4),e.type==="video"&&(o=Oc(e.codec)),Y(h,["trun"]).map(C=>{let _=C[0],D=G(C,0)&16777215,w=(D&1)!==0,B=0,P=(D&4)!==0,$=(D&256)!==0,U=0,N=(D&512)!==0,K=0,X=(D&1024)!==0,F=(D&2048)!==0,O=0,q=G(C,4),W=8;w&&(B=G(C,W),W+=4),P&&(W+=4);let j=B+c;for(let Z=0;Z<q;Z++){if($?(U=G(C,W),W+=4):U=E,N?(K=G(C,W),W+=4):K=x,X&&(W+=4),F&&(_===0?O=G(C,W):O=aa(C,W),W+=4),e.type===Q.VIDEO){let ee=0;for(;ee<K;){let re=G(i,j);if(j+=4,Fc(o,i[j])){let Te=i.subarray(j,j+re);ua(Te,o?2:1,n+O/s,t)}j+=re,ee+=re+4}}n+=U/s}}))})})}),t}function Oc(n){if(!n)return!1;let e=n.indexOf("."),t=e<0?n:n.substring(0,e);return t==="hvc1"||t==="hev1"||t==="dvh1"||t==="dvhe"}function Fc(n,e){if(n){let t=e>>1&63;return t===39||t===40}else return(e&31)===6}function ua(n,e,t,i){let s=ha(n),r=0;r+=e;let o=0,a=0,l=0;for(;r<s.length;){o=0;do{if(r>=s.length)break;l=s[r++],o+=l}while(l===255);a=0;do{if(r>=s.length)break;l=s[r++],a+=l}while(l===255);let c=s.length-r,u=r;if(a<c)r+=a;else if(a>c){L.error(`Malformed SEI payload. ${a} is too small, only ${c} bytes left to parse.`);break}if(o===4){if(s[u++]===181){let d=oa(s,u);if(u+=2,d===49){let f=G(s,u);if(u+=4,f===1195456820){let g=s[u++];if(g===3){let m=s[u++],y=31&m,T=64&m,v=T?2+y*3:0,E=new Uint8Array(v);if(T){E[0]=m;for(let S=1;S<v;S++)E[S]=s[u++]}i.push({type:g,payloadType:o,pts:t,bytes:E})}}}}}else if(o===5&&a>16){let h=[];for(let g=0;g<16;g++){let m=s[u++].toString(16);h.push(m.length==1?"0"+m:m),(g===3||g===5||g===7||g===9)&&h.push("-")}let d=a-16,f=new Uint8Array(d);for(let g=0;g<d;g++)f[g]=s[u++];i.push({payloadType:o,pts:t,uuid:h.join(""),userData:Ye(f),userDataBytes:f})}}}function ha(n){let e=n.byteLength,t=[],i=1;for(;i<e-2;)n[i]===0&&n[i+1]===0&&n[i+2]===3?(t.push(i+2),i+=2):i++;if(t.length===0)return n;let s=e-t.length,r=new Uint8Array(s),o=0;for(i=0;i<s;o++,i++)o===t[0]&&(o++,t.shift()),r[i]=n[o];return r}function Mc(n){let e=n[0],t="",i="",s=0,r=0,o=0,a=0,l=0,c=0;if(e===0){for(;he(n.subarray(c,c+1))!=="\0";)t+=he(n.subarray(c,c+1)),c+=1;for(t+=he(n.subarray(c,c+1)),c+=1;he(n.subarray(c,c+1))!=="\0";)i+=he(n.subarray(c,c+1)),c+=1;i+=he(n.subarray(c,c+1)),c+=1,s=G(n,12),r=G(n,16),a=G(n,20),l=G(n,24),c=28}else if(e===1){c+=4,s=G(n,c),c+=4;let h=G(n,c);c+=4;let d=G(n,c);for(c+=4,o=2**32*h+d,tc(o)||(o=Number.MAX_SAFE_INTEGER,L.warn("Presentation time exceeds safe integer limit and wrapped to max safe integer in parsing emsg box")),a=G(n,c),c+=4,l=G(n,c),c+=4;he(n.subarray(c,c+1))!=="\0";)t+=he(n.subarray(c,c+1)),c+=1;for(t+=he(n.subarray(c,c+1)),c+=1;he(n.subarray(c,c+1))!=="\0";)i+=he(n.subarray(c,c+1)),c+=1;i+=he(n.subarray(c,c+1)),c+=1}let u=n.subarray(c,n.byteLength);return{schemeIdUri:t,value:i,timeScale:s,presentationTime:o,presentationTimeDelta:r,eventDuration:a,id:l,payload:u}}function Nc(n,...e){let t=e.length,i=8,s=t;for(;s--;)i+=e[s].byteLength;let r=new Uint8Array(i);for(r[0]=i>>24&255,r[1]=i>>16&255,r[2]=i>>8&255,r[3]=i&255,r.set(n,4),s=0,i=8;s<t;s++)r.set(e[s],i),i+=e[s].byteLength;return r}function Bc(n,e,t){if(n.byteLength!==16)throw new RangeError("Invalid system id");let i,s;if(e){i=1,s=new Uint8Array(e.length*16);for(let a=0;a<e.length;a++){let l=e[a];if(l.byteLength!==16)throw new RangeError("Invalid key");s.set(l,a*16)}}else i=0,s=new Uint8Array;let r;i>0?(r=new Uint8Array(4),e.length>0&&new DataView(r.buffer).setUint32(0,e.length,!1)):r=new Uint8Array;let o=new Uint8Array(4);return t&&t.byteLength>0&&new DataView(o.buffer).setUint32(0,t.byteLength,!1),Nc([112,115,115,104],new Uint8Array([i,0,0,0]),n,r,s,o,t||new Uint8Array)}function Uc(n){if(!(n instanceof ArrayBuffer)||n.byteLength<32)return null;let e={version:0,systemId:"",kids:null,data:null},t=new DataView(n),i=t.getUint32(0);if(n.byteLength!==i&&i>44||t.getUint32(4)!==1886614376||(e.version=t.getUint32(8)>>>24,e.version>1))return null;e.systemId=He.hexDump(new Uint8Array(n,12,16));let r=t.getUint32(28);if(e.version===0){if(i-32<r)return null;e.data=new Uint8Array(n,32,r)}else if(e.version===1){e.kids=[];for(let o=0;o<r;o++)e.kids.push(new Uint8Array(n,32+o*16,16))}return e}var Li={},bt=class{static clearKeyUriToKeyIdMap(){Li={}}constructor(e,t,i,s=[1],r=null){this.uri=void 0,this.method=void 0,this.keyFormat=void 0,this.keyFormatVersions=void 0,this.encrypted=void 0,this.isCommonEncryption=void 0,this.iv=null,this.key=null,this.keyId=null,this.pssh=null,this.method=e,this.uri=t,this.keyFormat=i,this.keyFormatVersions=s,this.iv=r,this.encrypted=e?e!=="NONE":!1,this.isCommonEncryption=this.encrypted&&e!=="AES-128"}isSupported(){if(this.method){if(this.method==="AES-128"||this.method==="NONE")return!0;if(this.keyFormat==="identity")return this.method==="SAMPLE-AES";switch(this.keyFormat){case Le.FAIRPLAY:case Le.WIDEVINE:case Le.PLAYREADY:case Le.CLEARKEY:return["ISO-23001-7","SAMPLE-AES","SAMPLE-AES-CENC","SAMPLE-AES-CTR"].indexOf(this.method)!==-1}}return!1}getDecryptData(e){if(!this.encrypted||!this.uri)return null;if(this.method==="AES-128"&&this.uri&&!this.iv){typeof e!="number"&&(this.method==="AES-128"&&!this.iv&&L.warn(`missing IV for initialization segment with method="${this.method}" - compliance issue`),e=0);let i=$c(e);return new bt(this.method,this.uri,"identity",this.keyFormatVersions,i)}let t=dc(this.uri);if(t)switch(this.keyFormat){case Le.WIDEVINE:this.pssh=t,t.length>=22&&(this.keyId=t.subarray(t.length-22,t.length-6));break;case Le.PLAYREADY:{let i=new Uint8Array([154,4,240,121,152,64,66,134,171,146,230,91,224,136,95,149]);this.pssh=Bc(i,null,t);let s=new Uint16Array(t.buffer,t.byteOffset,t.byteLength/2),r=String.fromCharCode.apply(null,Array.from(s)),o=r.substring(r.indexOf("<"),r.length),c=new DOMParser().parseFromString(o,"text/xml").getElementsByTagName("KID")[0];if(c){let u=c.childNodes[0]?c.childNodes[0].nodeValue:c.getAttribute("VALUE");if(u){let h=an(u).subarray(0,16);hc(h),this.keyId=h}}break}default:{let i=t.subarray(0,16);if(i.length!==16){let s=new Uint8Array(16);s.set(i,16-i.length),i=s}this.keyId=i;break}}if(!this.keyId||this.keyId.byteLength!==16){let i=Li[this.uri];if(!i){let s=Object.keys(Li).length%Number.MAX_SAFE_INTEGER;i=new Uint8Array(16),new DataView(i.buffer,12,4).setUint32(0,s),Li[this.uri]=i}this.keyId=i}return this}};function $c(n){let e=new Uint8Array(16);for(let t=12;t<16;t++)e[t]=n>>8*(15-t)&255;return e}var da=/\{\$([a-zA-Z0-9-_]+)\}/g;function uo(n){return da.test(n)}function Se(n,e,t){if(n.variableList!==null||n.hasVariableRefs)for(let i=t.length;i--;){let s=t[i],r=e[s];r&&(e[s]=ir(n,r))}}function ir(n,e){if(n.variableList!==null||n.hasVariableRefs){let t=n.variableList;return e.replace(da,i=>{let s=i.substring(2,i.length-1),r=t==null?void 0:t[s];return r===void 0?(n.playlistParsingError||(n.playlistParsingError=new Error(`Missing preceding EXT-X-DEFINE tag for Variable Reference: "${s}"`)),i):r})}return e}function ho(n,e,t){let i=n.variableList;i||(n.variableList=i={});let s,r;if("QUERYPARAM"in e){s=e.QUERYPARAM;try{let o=new self.URL(t).searchParams;if(o.has(s))r=o.get(s);else throw new Error(`"${s}" does not match any query parameter in URI: "${t}"`)}catch(o){n.playlistParsingError||(n.playlistParsingError=new Error(`EXT-X-DEFINE QUERYPARAM: ${o.message}`))}}else s=e.NAME,r=e.VALUE;s in i?n.playlistParsingError||(n.playlistParsingError=new Error(`EXT-X-DEFINE duplicate Variable Name declarations: "${s}"`)):i[s]=r||""}function Gc(n,e,t){let i=e.IMPORT;if(t&&i in t){let s=n.variableList;s||(n.variableList=s={}),s[i]=t[i]}else n.playlistParsingError||(n.playlistParsingError=new Error(`EXT-X-DEFINE IMPORT attribute not found in Multivariant Playlist: "${i}"`))}function Rt(n=!0){return typeof self=="undefined"?void 0:(n||!self.MediaSource)&&self.ManagedMediaSource||self.MediaSource||self.WebKitMediaSource}function Hc(n){return typeof self!="undefined"&&n===self.ManagedMediaSource}var Vi={audio:{a3ds:1,"ac-3":.95,"ac-4":1,alac:.9,alaw:1,dra1:1,"dts+":1,"dts-":1,dtsc:1,dtse:1,dtsh:1,"ec-3":.9,enca:1,fLaC:.9,flac:.9,FLAC:.9,g719:1,g726:1,m4ae:1,mha1:1,mha2:1,mhm1:1,mhm2:1,mlpa:1,mp4a:1,"raw ":1,Opus:1,opus:1,samr:1,sawb:1,sawp:1,sevc:1,sqcp:1,ssmv:1,twos:1,ulaw:1},video:{avc1:1,avc2:1,avc3:1,avc4:1,avcp:1,av01:.8,drac:1,dva1:1,dvav:1,dvh1:.7,dvhe:.7,encv:1,hev1:.75,hvc1:.75,mjp2:1,mp4v:1,mvc1:1,mvc2:1,mvc3:1,mvc4:1,resv:1,rv60:1,s263:1,svc1:1,svc2:1,"vc-1":1,vp08:1,vp09:.9},text:{stpp:1,wvtt:1}};function Vc(n,e){let t=Vi[e];return!!t&&!!t[n.slice(0,4)]}function Ns(n,e,t=!0){return!n.split(",").some(i=>!fa(i,e,t))}function fa(n,e,t=!0){var i;let s=Rt(t);return(i=s==null?void 0:s.isTypeSupported(ri(n,e)))!=null?i:!1}function ri(n,e){return`${e}/mp4;codecs="${n}"`}function fo(n){if(n){let e=n.substring(0,4);return Vi.video[e]}return 2}function Ki(n){return n.split(",").reduce((e,t)=>{let i=Vi.video[t];return i?(i*2+e)/(e?3:2):(Vi.audio[t]+e)/(e?2:1)},0)}var Bs={};function Kc(n,e=!0){if(Bs[n])return Bs[n];let t={flac:["flac","fLaC","FLAC"],opus:["opus","Opus"]}[n];for(let i=0;i<t.length;i++)if(fa(t[i],"audio",e))return Bs[n]=t[i],t[i];return n}var Wc=/flac|opus/i;function Wi(n,e=!0){return n.replace(Wc,t=>Kc(t.toLowerCase(),e))}function go(n,e){return n&&n!=="mp4a"?n:e&&e.split(",")[0]}function Yc(n){let e=n.split(",");for(let t=0;t<e.length;t++){let i=e[t].split(".");if(i.length>2){let s=i.shift()+".";s+=parseInt(i.shift()).toString(16),s+=("000"+parseInt(i.shift()).toString(16)).slice(-4),e[t]=s}}return e.join(",")}var mo=/#EXT-X-STREAM-INF:([^\r\n]*)(?:[\r\n](?:#[^\r\n]*)?)*([^\r\n]+)|#EXT-X-(SESSION-DATA|SESSION-KEY|DEFINE|CONTENT-STEERING|START):([^\r\n]*)[\r\n]+/g,po=/#EXT-X-MEDIA:(.*)/g,qc=/^#EXT(?:INF|-X-TARGETDURATION):/m,yo=new RegExp([/#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,/(?!#) *(\S[^\r\n]*)/.source,/#EXT-X-BYTERANGE:*(.+)/.source,/#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,/#.*/.source].join("|"),"g"),jc=new RegExp([/#(EXTM3U)/.source,/#EXT-X-(DATERANGE|DEFINE|KEY|MAP|PART|PART-INF|PLAYLIST-TYPE|PRELOAD-HINT|RENDITION-REPORT|SERVER-CONTROL|SKIP|START):(.+)/.source,/#EXT-X-(BITRATE|DISCONTINUITY-SEQUENCE|MEDIA-SEQUENCE|TARGETDURATION|VERSION): *(\d+)/.source,/#EXT-X-(DISCONTINUITY|ENDLIST|GAP|INDEPENDENT-SEGMENTS)/.source,/(#)([^:]*):(.*)/.source,/(#)(.*)(?:.*)\r?\n?/.source].join("|")),ke=class{static findGroup(e,t){for(let i=0;i<e.length;i++){let s=e[i];if(s.id===t)return s}}static resolve(e,t){return on.buildAbsoluteURL(t,e,{alwaysNormalize:!0})}static isMediaPlaylist(e){return qc.test(e)}static parseMasterPlaylist(e,t){let i=uo(e),s={contentSteering:null,levels:[],playlistParsingError:null,sessionData:null,sessionKeys:null,startTimeOffset:null,variableList:null,hasVariableRefs:i},r=[];mo.lastIndex=0;let o;for(;(o=mo.exec(e))!=null;)if(o[1]){var a;let c=new te(o[1]);Se(s,c,["CODECS","SUPPLEMENTAL-CODECS","ALLOWED-CPC","PATHWAY-ID","STABLE-VARIANT-ID","AUDIO","VIDEO","SUBTITLES","CLOSED-CAPTIONS","NAME"]);let u=ir(s,o[2]),h={attrs:c,bitrate:c.decimalInteger("BANDWIDTH")||c.decimalInteger("AVERAGE-BANDWIDTH"),name:c.NAME,url:ke.resolve(u,t)},d=c.decimalResolution("RESOLUTION");d&&(h.width=d.width,h.height=d.height),zc(c.CODECS,h),(a=h.unknownCodecs)!=null&&a.length||r.push(h),s.levels.push(h)}else if(o[3]){let c=o[3],u=o[4];switch(c){case"SESSION-DATA":{let h=new te(u);Se(s,h,["DATA-ID","LANGUAGE","VALUE","URI"]);let d=h["DATA-ID"];d&&(s.sessionData===null&&(s.sessionData={}),s.sessionData[d]=h);break}case"SESSION-KEY":{let h=To(u,t,s);h.encrypted&&h.isSupported()?(s.sessionKeys===null&&(s.sessionKeys=[]),s.sessionKeys.push(h)):L.warn(`[Keys] Ignoring invalid EXT-X-SESSION-KEY tag: "${u}"`);break}case"DEFINE":{{let h=new te(u);Se(s,h,["NAME","VALUE","QUERYPARAM"]),ho(s,h,t)}break}case"CONTENT-STEERING":{let h=new te(u);Se(s,h,["SERVER-URI","PATHWAY-ID"]),s.contentSteering={uri:ke.resolve(h["SERVER-URI"],t),pathwayId:h["PATHWAY-ID"]||"."};break}case"START":{s.startTimeOffset=xo(u);break}}}let l=r.length>0&&r.length<s.levels.length;return s.levels=l?r:s.levels,s.levels.length===0&&(s.playlistParsingError=new Error("no levels found in manifest")),s}static parseMasterPlaylistMedia(e,t,i){let s,r={},o=i.levels,a={AUDIO:o.map(c=>({id:c.attrs.AUDIO,audioCodec:c.audioCodec})),SUBTITLES:o.map(c=>({id:c.attrs.SUBTITLES,textCodec:c.textCodec})),"CLOSED-CAPTIONS":[]},l=0;for(po.lastIndex=0;(s=po.exec(e))!==null;){let c=new te(s[1]),u=c.TYPE;if(u){let h=a[u],d=r[u]||[];r[u]=d,Se(i,c,["URI","GROUP-ID","LANGUAGE","ASSOC-LANGUAGE","STABLE-RENDITION-ID","NAME","INSTREAM-ID","CHARACTERISTICS","CHANNELS"]);let f=c.LANGUAGE,g=c["ASSOC-LANGUAGE"],m=c.CHANNELS,y=c.CHARACTERISTICS,T=c["INSTREAM-ID"],v={attrs:c,bitrate:0,id:l++,groupId:c["GROUP-ID"]||"",name:c.NAME||f||"",type:u,default:c.bool("DEFAULT"),autoselect:c.bool("AUTOSELECT"),forced:c.bool("FORCED"),lang:f,url:c.URI?ke.resolve(c.URI,t):""};if(g&&(v.assocLang=g),m&&(v.channels=m),y&&(v.characteristics=y),T&&(v.instreamId=T),h!=null&&h.length){let E=ke.findGroup(h,v.groupId)||h[0];Eo(v,E,"audioCodec"),Eo(v,E,"textCodec")}d.push(v)}}return r}static parseLevelPlaylist(e,t,i,s,r,o){let a=new er(t),l=a.fragments,c=null,u=0,h=0,d=0,f=0,g=null,m=new ti(s,t),y,T,v,E=-1,S=!1,x=null;for(yo.lastIndex=0,a.m3u8=e,a.hasVariableRefs=uo(e);(y=yo.exec(e))!==null;){S&&(S=!1,m=new ti(s,t),m.start=d,m.sn=u,m.cc=f,m.level=i,c&&(m.initSegment=c,m.rawProgramDateTime=c.rawProgramDateTime,c.rawProgramDateTime=null,x&&(m.setByteRange(x),x=null)));let _=y[1];if(_){m.duration=parseFloat(_);let D=(" "+y[2]).slice(1);m.title=D||null,m.tagList.push(D?["INF",_,D]:["INF",_])}else if(y[3]){if(M(m.duration)){m.start=d,v&&Ao(m,v,a),m.sn=u,m.level=i,m.cc=f,l.push(m);let D=(" "+y[3]).slice(1);m.relurl=ir(a,D),vo(m,g),g=m,d+=m.duration,u++,h=0,S=!0}}else if(y[4]){let D=(" "+y[4]).slice(1);g?m.setByteRange(D,g):m.setByteRange(D)}else if(y[5])m.rawProgramDateTime=(" "+y[5]).slice(1),m.tagList.push(["PROGRAM-DATE-TIME",m.rawProgramDateTime]),E===-1&&(E=l.length);else{if(y=y[0].match(jc),!y){L.warn("No matches on slow regex match for level playlist!");continue}for(T=1;T<y.length&&typeof y[T]=="undefined";T++);let D=(" "+y[T]).slice(1),w=(" "+y[T+1]).slice(1),B=y[T+2]?(" "+y[T+2]).slice(1):"";switch(D){case"PLAYLIST-TYPE":a.type=w.toUpperCase();break;case"MEDIA-SEQUENCE":u=a.startSN=parseInt(w);break;case"SKIP":{let P=new te(w);Se(a,P,["RECENTLY-REMOVED-DATERANGES"]);let $=P.decimalInteger("SKIPPED-SEGMENTS");if(M($)){a.skippedSegments=$;for(let N=$;N--;)l.unshift(null);u+=$}let U=P.enumeratedString("RECENTLY-REMOVED-DATERANGES");U&&(a.recentlyRemovedDateranges=U.split("	"));break}case"TARGETDURATION":a.targetduration=Math.max(parseInt(w),1);break;case"VERSION":a.version=parseInt(w);break;case"INDEPENDENT-SEGMENTS":case"EXTM3U":break;case"ENDLIST":a.live=!1;break;case"#":(w||B)&&m.tagList.push(B?[w,B]:[w]);break;case"DISCONTINUITY":f++,m.tagList.push(["DIS"]);break;case"GAP":m.gap=!0,m.tagList.push([D]);break;case"BITRATE":m.tagList.push([D,w]);break;case"DATERANGE":{let P=new te(w);Se(a,P,["ID","CLASS","START-DATE","END-DATE","SCTE35-CMD","SCTE35-OUT","SCTE35-IN"]),Se(a,P,P.clientAttrs);let $=new $i(P,a.dateRanges[P.ID]);$.isValid||a.skippedSegments?a.dateRanges[$.id]=$:L.warn(`Ignoring invalid DATERANGE tag: "${w}"`),m.tagList.push(["EXT-X-DATERANGE",w]);break}case"DEFINE":{{let P=new te(w);Se(a,P,["NAME","VALUE","IMPORT","QUERYPARAM"]),"IMPORT"in P?Gc(a,P,o):ho(a,P,t)}break}case"DISCONTINUITY-SEQUENCE":f=parseInt(w);break;case"KEY":{let P=To(w,t,a);if(P.isSupported()){if(P.method==="NONE"){v=void 0;break}v||(v={}),v[P.keyFormat]&&(v=le({},v)),v[P.keyFormat]=P}else L.warn(`[Keys] Ignoring invalid EXT-X-KEY tag: "${w}"`);break}case"START":a.startTimeOffset=xo(w);break;case"MAP":{let P=new te(w);if(Se(a,P,["BYTERANGE","URI"]),m.duration){let $=new ti(s,t);So($,P,i,v),c=$,m.initSegment=c,c.rawProgramDateTime&&!m.rawProgramDateTime&&(m.rawProgramDateTime=c.rawProgramDateTime)}else{let $=m.byteRangeEndOffset;if($){let U=m.byteRangeStartOffset;x=`${$-U}@${U}`}else x=null;So(m,P,i,v),c=m,S=!0}break}case"SERVER-CONTROL":{let P=new te(w);a.canBlockReload=P.bool("CAN-BLOCK-RELOAD"),a.canSkipUntil=P.optionalFloat("CAN-SKIP-UNTIL",0),a.canSkipDateRanges=a.canSkipUntil>0&&P.bool("CAN-SKIP-DATERANGES"),a.partHoldBack=P.optionalFloat("PART-HOLD-BACK",0),a.holdBack=P.optionalFloat("HOLD-BACK",0);break}case"PART-INF":{let P=new te(w);a.partTarget=P.decimalFloatingPoint("PART-TARGET");break}case"PART":{let P=a.partList;P||(P=a.partList=[]);let $=h>0?P[P.length-1]:void 0,U=h++,N=new te(w);Se(a,N,["BYTERANGE","URI"]);let K=new Zs(N,m,t,U,$);P.push(K),m.duration+=K.duration;break}case"PRELOAD-HINT":{let P=new te(w);Se(a,P,["URI"]),a.preloadHint=P;break}case"RENDITION-REPORT":{let P=new te(w);Se(a,P,["URI"]),a.renditionReports=a.renditionReports||[],a.renditionReports.push(P);break}default:L.warn(`line parsed but not handled: ${y}`);break}}}g&&!g.relurl?(l.pop(),d-=g.duration,a.partList&&(a.fragmentHint=g)):a.partList&&(vo(m,g),m.cc=f,a.fragmentHint=m,v&&Ao(m,v,a));let A=l.length,b=l[0],C=l[A-1];if(d+=a.skippedSegments*a.targetduration,d>0&&A&&C){a.averagetargetduration=d/A;let _=C.sn;a.endSN=_!=="initSegment"?_:0,a.live||(C.endList=!0),b&&(a.startCC=b.cc)}else a.endSN=0,a.startCC=0;return a.fragmentHint&&(d+=a.fragmentHint.duration),a.totalduration=d,a.endCC=f,E>0&&Xc(l,E),a}};function To(n,e,t){var i,s;let r=new te(n);Se(t,r,["KEYFORMAT","KEYFORMATVERSIONS","URI","IV","URI"]);let o=(i=r.METHOD)!=null?i:"",a=r.URI,l=r.hexadecimalInteger("IV"),c=r.KEYFORMATVERSIONS,u=(s=r.KEYFORMAT)!=null?s:"identity";a&&r.IV&&!l&&L.error(`Invalid IV: ${r.IV}`);let h=a?ke.resolve(a,e):"",d=(c||"1").split("/").map(Number).filter(Number.isFinite);return new bt(o,h,u,d,l)}function xo(n){let t=new te(n).decimalFloatingPoint("TIME-OFFSET");return M(t)?t:null}function zc(n,e){let t=(n||"").split(/[ ,]+/).filter(i=>i);["video","audio","text"].forEach(i=>{let s=t.filter(r=>Vc(r,i));s.length&&(e[`${i}Codec`]=s.join(","),t=t.filter(r=>s.indexOf(r)===-1))}),e.unknownCodecs=t}function Eo(n,e,t){let i=e[t];i&&(n[t]=i)}function Xc(n,e){let t=n[e];for(let i=e;i--;){let s=n[i];if(!s)return;s.programDateTime=t.programDateTime-s.duration*1e3,t=s}}function vo(n,e){n.rawProgramDateTime?n.programDateTime=Date.parse(n.rawProgramDateTime):e!=null&&e.programDateTime&&(n.programDateTime=e.endProgramDateTime),M(n.programDateTime)||(n.programDateTime=null,n.rawProgramDateTime=null)}function So(n,e,t,i){n.relurl=e.URI,e.BYTERANGE&&n.setByteRange(e.BYTERANGE),n.level=t,n.sn="initSegment",i&&(n.levelkeys=i),n.initSegment=null}function Ao(n,e,t){n.levelkeys=e;let{encryptedFragments:i}=t;(!i.length||i[i.length-1].levelkeys!==e)&&Object.keys(e).some(s=>e[s].isCommonEncryption)&&i.push(n)}var z={MANIFEST:"manifest",LEVEL:"level",AUDIO_TRACK:"audioTrack",SUBTITLE_TRACK:"subtitleTrack"},H={MAIN:"main",AUDIO:"audio",SUBTITLE:"subtitle"};function Lo(n){let{type:e}=n;switch(e){case z.AUDIO_TRACK:return H.AUDIO;case z.SUBTITLE_TRACK:return H.SUBTITLE;default:return H.MAIN}}function Us(n,e){let t=n.url;return(t===void 0||t.indexOf("data:")===0)&&(t=e.url),t}var sr=class{constructor(e){this.hls=void 0,this.loaders=Object.create(null),this.variableList=null,this.hls=e,this.registerListeners()}startLoad(e){}stopLoad(){this.destroyInternalLoaders()}registerListeners(){let{hls:e}=this;e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.LEVEL_LOADING,this.onLevelLoading,this),e.on(p.AUDIO_TRACK_LOADING,this.onAudioTrackLoading,this),e.on(p.SUBTITLE_TRACK_LOADING,this.onSubtitleTrackLoading,this)}unregisterListeners(){let{hls:e}=this;e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.LEVEL_LOADING,this.onLevelLoading,this),e.off(p.AUDIO_TRACK_LOADING,this.onAudioTrackLoading,this),e.off(p.SUBTITLE_TRACK_LOADING,this.onSubtitleTrackLoading,this)}createInternalLoader(e){let t=this.hls.config,i=t.pLoader,s=t.loader,r=i||s,o=new r(t);return this.loaders[e.type]=o,o}getInternalLoader(e){return this.loaders[e.type]}resetInternalLoader(e){this.loaders[e]&&delete this.loaders[e]}destroyInternalLoaders(){for(let e in this.loaders){let t=this.loaders[e];t&&t.destroy(),this.resetInternalLoader(e)}}destroy(){this.variableList=null,this.unregisterListeners(),this.destroyInternalLoaders()}onManifestLoading(e,t){let{url:i}=t;this.variableList=null,this.load({id:null,level:0,responseType:"text",type:z.MANIFEST,url:i,deliveryDirectives:null})}onLevelLoading(e,t){let{id:i,level:s,pathwayId:r,url:o,deliveryDirectives:a}=t;this.load({id:i,level:s,pathwayId:r,responseType:"text",type:z.LEVEL,url:o,deliveryDirectives:a})}onAudioTrackLoading(e,t){let{id:i,groupId:s,url:r,deliveryDirectives:o}=t;this.load({id:i,groupId:s,level:null,responseType:"text",type:z.AUDIO_TRACK,url:r,deliveryDirectives:o})}onSubtitleTrackLoading(e,t){let{id:i,groupId:s,url:r,deliveryDirectives:o}=t;this.load({id:i,groupId:s,level:null,responseType:"text",type:z.SUBTITLE_TRACK,url:r,deliveryDirectives:o})}load(e){var t;let i=this.hls.config,s=this.getInternalLoader(e);if(s){let c=s.context;if(c&&c.url===e.url&&c.level===e.level){L.trace("[playlist-loader]: playlist request ongoing");return}L.log(`[playlist-loader]: aborting previous loader for type: ${e.type}`),s.abort()}let r;if(e.type===z.MANIFEST?r=i.manifestLoadPolicy.default:r=le({},i.playlistLoadPolicy.default,{timeoutRetry:null,errorRetry:null}),s=this.createInternalLoader(e),M((t=e.deliveryDirectives)==null?void 0:t.part)){let c;if(e.type===z.LEVEL&&e.level!==null?c=this.hls.levels[e.level].details:e.type===z.AUDIO_TRACK&&e.id!==null?c=this.hls.audioTracks[e.id].details:e.type===z.SUBTITLE_TRACK&&e.id!==null&&(c=this.hls.subtitleTracks[e.id].details),c){let u=c.partTarget,h=c.targetduration;if(u&&h){let d=Math.max(u*3,h*.8)*1e3;r=le({},r,{maxTimeToFirstByteMs:Math.min(d,r.maxTimeToFirstByteMs),maxLoadTimeMs:Math.min(d,r.maxTimeToFirstByteMs)})}}}let o=r.errorRetry||r.timeoutRetry||{},a={loadPolicy:r,timeout:r.maxLoadTimeMs,maxRetry:o.maxNumRetry||0,retryDelay:o.retryDelayMs||0,maxRetryDelay:o.maxRetryDelayMs||0},l={onSuccess:(c,u,h,d)=>{let f=this.getInternalLoader(h);this.resetInternalLoader(h.type);let g=c.data;if(g.indexOf("#EXTM3U")!==0){this.handleManifestParsingError(c,h,new Error("no EXTM3U delimiter"),d||null,u);return}u.parsing.start=performance.now(),ke.isMediaPlaylist(g)?this.handleTrackOrLevelPlaylist(c,u,h,d||null,f):this.handleMasterPlaylist(c,u,h,d)},onError:(c,u,h,d)=>{this.handleNetworkError(u,h,!1,c,d)},onTimeout:(c,u,h)=>{this.handleNetworkError(u,h,!0,void 0,c)}};s.load(e,a,l)}handleMasterPlaylist(e,t,i,s){let r=this.hls,o=e.data,a=Us(e,i),l=ke.parseMasterPlaylist(o,a);if(l.playlistParsingError){this.handleManifestParsingError(e,i,l.playlistParsingError,s,t);return}let{contentSteering:c,levels:u,sessionData:h,sessionKeys:d,startTimeOffset:f,variableList:g}=l;this.variableList=g;let{AUDIO:m=[],SUBTITLES:y,"CLOSED-CAPTIONS":T}=ke.parseMasterPlaylistMedia(o,a,l);m.length&&!m.some(E=>!E.url)&&u[0].audioCodec&&!u[0].attrs.AUDIO&&(L.log("[playlist-loader]: audio codec signaled in quality level, but no embedded audio track signaled, create one"),m.unshift({type:"main",name:"main",groupId:"main",default:!1,autoselect:!1,forced:!1,id:-1,attrs:new te({}),bitrate:0,url:""})),r.trigger(p.MANIFEST_LOADED,{levels:u,audioTracks:m,subtitles:y,captions:T,contentSteering:c,url:a,stats:t,networkDetails:s,sessionData:h,sessionKeys:d,startTimeOffset:f,variableList:g})}handleTrackOrLevelPlaylist(e,t,i,s,r){let o=this.hls,{id:a,level:l,type:c}=i,u=Us(e,i),h=0,d=M(l)?l:M(a)?a:0,f=Lo(i),g=ke.parseLevelPlaylist(e.data,u,d,f,h,this.variableList);if(c===z.MANIFEST){let m={attrs:new te({}),bitrate:0,details:g,name:"",url:u};o.trigger(p.MANIFEST_LOADED,{levels:[m],audioTracks:[],url:u,stats:t,networkDetails:s,sessionData:null,sessionKeys:null,contentSteering:null,startTimeOffset:null,variableList:null})}t.parsing.end=performance.now(),i.levelDetails=g,this.handlePlaylistLoaded(g,e,t,i,s,r)}handleManifestParsingError(e,t,i,s,r){this.hls.trigger(p.ERROR,{type:V.NETWORK_ERROR,details:I.MANIFEST_PARSING_ERROR,fatal:t.type===z.MANIFEST,url:e.url,err:i,error:i,reason:i.message,response:e,context:t,networkDetails:s,stats:r})}handleNetworkError(e,t,i=!1,s,r){let o=`A network ${i?"timeout":"error"+(s?" (status "+s.code+")":"")} occurred while loading ${e.type}`;e.type===z.LEVEL?o+=`: ${e.level} id: ${e.id}`:(e.type===z.AUDIO_TRACK||e.type===z.SUBTITLE_TRACK)&&(o+=` id: ${e.id} group-id: "${e.groupId}"`);let a=new Error(o);L.warn(`[playlist-loader]: ${o}`);let l=I.UNKNOWN,c=!1,u=this.getInternalLoader(e);switch(e.type){case z.MANIFEST:l=i?I.MANIFEST_LOAD_TIMEOUT:I.MANIFEST_LOAD_ERROR,c=!0;break;case z.LEVEL:l=i?I.LEVEL_LOAD_TIMEOUT:I.LEVEL_LOAD_ERROR,c=!1;break;case z.AUDIO_TRACK:l=i?I.AUDIO_TRACK_LOAD_TIMEOUT:I.AUDIO_TRACK_LOAD_ERROR,c=!1;break;case z.SUBTITLE_TRACK:l=i?I.SUBTITLE_TRACK_LOAD_TIMEOUT:I.SUBTITLE_LOAD_ERROR,c=!1;break}u&&this.resetInternalLoader(e.type);let h={type:V.NETWORK_ERROR,details:l,fatal:c,url:e.url,loader:u,context:e,error:a,networkDetails:t,stats:r};if(s){let d=(t==null?void 0:t.url)||e.url;h.response=ye({url:d,data:void 0},s)}this.hls.trigger(p.ERROR,h)}handlePlaylistLoaded(e,t,i,s,r,o){let a=this.hls,{type:l,level:c,id:u,groupId:h,deliveryDirectives:d}=s,f=Us(t,s),g=Lo(s),m=typeof s.level=="number"&&g===H.MAIN?c:void 0;if(!e.fragments.length){let T=new Error("No Segments found in Playlist");a.trigger(p.ERROR,{type:V.NETWORK_ERROR,details:I.LEVEL_EMPTY_ERROR,fatal:!1,url:f,error:T,reason:T.message,response:t,context:s,level:m,parent:g,networkDetails:r,stats:i});return}e.targetduration||(e.playlistParsingError=new Error("Missing Target Duration"));let y=e.playlistParsingError;if(y){a.trigger(p.ERROR,{type:V.NETWORK_ERROR,details:I.LEVEL_PARSING_ERROR,fatal:!1,url:f,error:y,reason:y.message,response:t,context:s,level:m,parent:g,networkDetails:r,stats:i});return}switch(e.live&&o&&(o.getCacheAge&&(e.ageHeader=o.getCacheAge()||0),(!o.getCacheAge||isNaN(e.ageHeader))&&(e.ageHeader=0)),l){case z.MANIFEST:case z.LEVEL:a.trigger(p.LEVEL_LOADED,{details:e,level:m||0,id:u||0,stats:i,networkDetails:r,deliveryDirectives:d});break;case z.AUDIO_TRACK:a.trigger(p.AUDIO_TRACK_LOADED,{details:e,id:u||0,groupId:h||"",stats:i,networkDetails:r,deliveryDirectives:d});break;case z.SUBTITLE_TRACK:a.trigger(p.SUBTITLE_TRACK_LOADED,{details:e,id:u||0,groupId:h||"",stats:i,networkDetails:r,deliveryDirectives:d});break}}};function ga(n,e){let t;try{t=new Event("addtrack")}catch(i){t=document.createEvent("Event"),t.initEvent("addtrack",!1,!1)}t.track=n,e.dispatchEvent(t)}function ma(n,e){let t=n.mode;if(t==="disabled"&&(n.mode="hidden"),n.cues&&!n.cues.getCueById(e.id))try{if(n.addCue(e),!n.cues.getCueById(e.id))throw new Error(`addCue is failed for: ${e}`)}catch(i){L.debug(`[texttrack-utils]: ${i}`);try{let s=new self.TextTrackCue(e.startTime,e.endTime,e.text);s.id=e.id,n.addCue(s)}catch(s){L.debug(`[texttrack-utils]: Legacy TextTrackCue fallback failed: ${s}`)}}t==="disabled"&&(n.mode=t)}function Nt(n){let e=n.mode;if(e==="disabled"&&(n.mode="hidden"),n.cues)for(let t=n.cues.length;t--;)n.removeCue(n.cues[t]);e==="disabled"&&(n.mode=e)}function rr(n,e,t,i){let s=n.mode;if(s==="disabled"&&(n.mode="hidden"),n.cues&&n.cues.length>0){let r=Jc(n.cues,e,t);for(let o=0;o<r.length;o++)(!i||i(r[o]))&&n.removeCue(r[o])}s==="disabled"&&(n.mode=s)}function Qc(n,e){if(e<n[0].startTime)return 0;let t=n.length-1;if(e>n[t].endTime)return-1;let i=0,s=t;for(;i<=s;){let r=Math.floor((s+i)/2);if(e<n[r].startTime)s=r-1;else if(e>n[r].startTime&&i<t)i=r+1;else return r}return n[i].startTime-e<e-n[s].startTime?i:s}function Jc(n,e,t){let i=[],s=Qc(n,e);if(s>-1)for(let r=s,o=n.length;r<o;r++){let a=n[r];if(a.startTime>=e&&a.endTime<=t)i.push(a);else if(a.startTime>t)return i}return i}function Pi(n){let e=[];for(let t=0;t<n.length;t++){let i=n[t];(i.kind==="subtitles"||i.kind==="captions")&&i.label&&e.push(n[t])}return e}var Ue={audioId3:"org.id3",dateRange:"com.apple.quicktime.HLS",emsg:"https://aomedia.org/emsg/ID3"},Zc=.25;function nr(){if(typeof self!="undefined")return self.VTTCue||self.TextTrackCue}function bo(n,e,t,i,s){let r=new n(e,t,"");try{r.value=i,s&&(r.type=s)}catch(o){r=new n(e,t,JSON.stringify(s?ye({type:s},i):i))}return r}var bi=(()=>{let n=nr();try{n&&new n(0,Number.POSITIVE_INFINITY,"")}catch(e){return Number.MAX_VALUE}return Number.POSITIVE_INFINITY})();function $s(n,e){return n.getTime()/1e3-e}function eu(n){return Uint8Array.from(n.replace(/^0x/,"").replace(/([\da-fA-F]{2}) ?/g,"0x$1 ").replace(/ +$/,"").split(" ")).buffer}var or=class{constructor(e){this.hls=void 0,this.id3Track=null,this.media=null,this.dateRangeCuesAppended={},this.hls=e,this._registerListeners()}destroy(){this._unregisterListeners(),this.id3Track=null,this.media=null,this.dateRangeCuesAppended={},this.hls=null}_registerListeners(){let{hls:e}=this;e.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.FRAG_PARSING_METADATA,this.onFragParsingMetadata,this),e.on(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.on(p.LEVEL_UPDATED,this.onLevelUpdated,this)}_unregisterListeners(){let{hls:e}=this;e.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.FRAG_PARSING_METADATA,this.onFragParsingMetadata,this),e.off(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.off(p.LEVEL_UPDATED,this.onLevelUpdated,this)}onMediaAttached(e,t){this.media=t.media}onMediaDetaching(){this.id3Track&&(Nt(this.id3Track),this.id3Track=null,this.media=null,this.dateRangeCuesAppended={})}onManifestLoading(){this.dateRangeCuesAppended={}}createTrack(e){let t=this.getID3Track(e.textTracks);return t.mode="hidden",t}getID3Track(e){if(this.media){for(let t=0;t<e.length;t++){let i=e[t];if(i.kind==="metadata"&&i.label==="id3")return ga(i,this.media),i}return this.media.addTextTrack("metadata","id3")}}onFragParsingMetadata(e,t){if(!this.media)return;let{hls:{config:{enableEmsgMetadataCues:i,enableID3MetadataCues:s}}}=this;if(!i&&!s)return;let{samples:r}=t;this.id3Track||(this.id3Track=this.createTrack(this.media));let o=nr();if(o)for(let a=0;a<r.length;a++){let l=r[a].type;if(l===Ue.emsg&&!i||!s)continue;let c=ra(r[a].data);if(c){let u=r[a].pts,h=u+r[a].duration;h>bi&&(h=bi),h-u<=0&&(h=u+Zc);for(let f=0;f<c.length;f++){let g=c[f];if(!sa(g)){this.updateId3CueEnds(u,l);let m=bo(o,u,h,g,l);m&&this.id3Track.addCue(m)}}}}}updateId3CueEnds(e,t){var i;let s=(i=this.id3Track)==null?void 0:i.cues;if(s)for(let r=s.length;r--;){let o=s[r];o.type===t&&o.startTime<e&&o.endTime===bi&&(o.endTime=e)}}onBufferFlushing(e,{startOffset:t,endOffset:i,type:s}){let{id3Track:r,hls:o}=this;if(!o)return;let{config:{enableEmsgMetadataCues:a,enableID3MetadataCues:l}}=o;if(r&&(a||l)){let c;s==="audio"?c=u=>u.type===Ue.audioId3&&l:s==="video"?c=u=>u.type===Ue.emsg&&a:c=u=>u.type===Ue.audioId3&&l||u.type===Ue.emsg&&a,rr(r,t,i,c)}}onLevelUpdated(e,{details:t}){if(!this.media||!t.hasProgramDateTime||!this.hls.config.enableDateRangeMetadataCues)return;let{dateRangeCuesAppended:i,id3Track:s}=this,{dateRanges:r}=t,o=Object.keys(r);if(s){let u=Object.keys(i).filter(h=>!o.includes(h));for(let h=u.length;h--;){let d=u[h];Object.keys(i[d].cues).forEach(f=>{s.removeCue(i[d].cues[f])}),delete i[d]}}let a=t.fragments[t.fragments.length-1];if(o.length===0||!M(a==null?void 0:a.programDateTime))return;this.id3Track||(this.id3Track=this.createTrack(this.media));let l=a.programDateTime/1e3-a.start,c=nr();for(let u=0;u<o.length;u++){let h=o[u],d=r[h],f=$s(d.startDate,l),g=i[h],m=(g==null?void 0:g.cues)||{},y=(g==null?void 0:g.durationKnown)||!1,T=bi,v=d.endDate;if(v)T=$s(v,l),y=!0;else if(d.endOnNext&&!y){let S=o.reduce((x,A)=>{if(A!==d.id){let b=r[A];if(b.class===d.class&&b.startDate>d.startDate&&(!x||d.startDate<x.startDate))return b}return x},null);S&&(T=$s(S.startDate,l),y=!0)}let E=Object.keys(d.attr);for(let S=0;S<E.length;S++){let x=E[S];if(!ac(x))continue;let A=m[x];if(A)y&&!g.durationKnown&&(A.endTime=T);else if(c){let b=d.attr[x];lc(x)&&(b=eu(b));let C=bo(c,f,T,{key:x,data:b},Ue.dateRange);C&&(C.id=h,this.id3Track.addCue(C),m[x]=C)}}i[h]={cues:m,dateRange:d,durationKnown:y}}}},ar=class{constructor(e){this.hls=void 0,this.config=void 0,this.media=null,this.levelDetails=null,this.currentTime=0,this.stallCount=0,this._latency=null,this.timeupdateHandler=()=>this.timeupdate(),this.hls=e,this.config=e.config,this.registerListeners()}get latency(){return this._latency||0}get maxLatency(){let{config:e,levelDetails:t}=this;return e.liveMaxLatencyDuration!==void 0?e.liveMaxLatencyDuration:t?e.liveMaxLatencyDurationCount*t.targetduration:0}get targetLatency(){let{levelDetails:e}=this;if(e===null)return null;let{holdBack:t,partHoldBack:i,targetduration:s}=e,{liveSyncDuration:r,liveSyncDurationCount:o,lowLatencyMode:a}=this.config,l=this.hls.userConfig,c=a&&i||t;(l.liveSyncDuration||l.liveSyncDurationCount||c===0)&&(c=r!==void 0?r:o*s);let u=s,h=1;return c+Math.min(this.stallCount*h,u)}get liveSyncPosition(){let e=this.estimateLiveEdge(),t=this.targetLatency,i=this.levelDetails;if(e===null||t===null||i===null)return null;let s=i.edge,r=e-t-this.edgeStalled,o=s-i.totalduration,a=s-(this.config.lowLatencyMode&&i.partTarget||i.targetduration);return Math.min(Math.max(o,r),a)}get drift(){let{levelDetails:e}=this;return e===null?1:e.drift}get edgeStalled(){let{levelDetails:e}=this;if(e===null)return 0;let t=(this.config.lowLatencyMode&&e.partTarget||e.targetduration)*3;return Math.max(e.age-t,0)}get forwardBufferLength(){let{media:e,levelDetails:t}=this;if(!e||!t)return 0;let i=e.buffered.length;return(i?e.buffered.end(i-1):t.edge)-this.currentTime}destroy(){this.unregisterListeners(),this.onMediaDetaching(),this.levelDetails=null,this.hls=this.timeupdateHandler=null}registerListeners(){this.hls.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),this.hls.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),this.hls.on(p.MANIFEST_LOADING,this.onManifestLoading,this),this.hls.on(p.LEVEL_UPDATED,this.onLevelUpdated,this),this.hls.on(p.ERROR,this.onError,this)}unregisterListeners(){this.hls.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),this.hls.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),this.hls.off(p.MANIFEST_LOADING,this.onManifestLoading,this),this.hls.off(p.LEVEL_UPDATED,this.onLevelUpdated,this),this.hls.off(p.ERROR,this.onError,this)}onMediaAttached(e,t){this.media=t.media,this.media.addEventListener("timeupdate",this.timeupdateHandler)}onMediaDetaching(){this.media&&(this.media.removeEventListener("timeupdate",this.timeupdateHandler),this.media=null)}onManifestLoading(){this.levelDetails=null,this._latency=null,this.stallCount=0}onLevelUpdated(e,{details:t}){this.levelDetails=t,t.advanced&&this.timeupdate(),!t.live&&this.media&&this.media.removeEventListener("timeupdate",this.timeupdateHandler)}onError(e,t){var i;t.details===I.BUFFER_STALLED_ERROR&&(this.stallCount++,(i=this.levelDetails)!=null&&i.live&&L.warn("[playback-rate-controller]: Stall detected, adjusting target latency"))}timeupdate(){let{media:e,levelDetails:t}=this;if(!e||!t)return;this.currentTime=e.currentTime;let i=this.computeLatency();if(i===null)return;this._latency=i;let{lowLatencyMode:s,maxLiveSyncPlaybackRate:r}=this.config;if(!s||r===1||!t.live)return;let o=this.targetLatency;if(o===null)return;let a=i-o,l=Math.min(this.maxLatency,o+t.targetduration);if(a<l&&a>.05&&this.forwardBufferLength>1){let u=Math.min(2,Math.max(1,r)),h=Math.round(2/(1+Math.exp(-.75*a-this.edgeStalled))*20)/20;e.playbackRate=Math.min(u,Math.max(1,h))}else e.playbackRate!==1&&e.playbackRate!==0&&(e.playbackRate=1)}estimateLiveEdge(){let{levelDetails:e}=this;return e===null?null:e.edge+e.age}computeLatency(){let e=this.estimateLiveEdge();return e===null?null:e-this.currentTime}},lr=["NONE","TYPE-0","TYPE-1",null];function tu(n){return lr.indexOf(n)>-1}var Yi=["SDR","PQ","HLG"];function iu(n){return!!n&&Yi.indexOf(n)>-1}var Oi={No:"",Yes:"YES",v2:"v2"};function Ro(n){let{canSkipUntil:e,canSkipDateRanges:t,age:i}=n,s=i<e/2;return e&&s?t?Oi.v2:Oi.Yes:Oi.No}var qi=class{constructor(e,t,i){this.msn=void 0,this.part=void 0,this.skip=void 0,this.msn=e,this.part=t,this.skip=i}addDirectives(e){let t=new self.URL(e);return this.msn!==void 0&&t.searchParams.set("_HLS_msn",this.msn.toString()),this.part!==void 0&&t.searchParams.set("_HLS_part",this.part.toString()),this.skip&&t.searchParams.set("_HLS_skip",this.skip),t.href}},lt=class{constructor(e){this._attrs=void 0,this.audioCodec=void 0,this.bitrate=void 0,this.codecSet=void 0,this.url=void 0,this.frameRate=void 0,this.height=void 0,this.id=void 0,this.name=void 0,this.videoCodec=void 0,this.width=void 0,this.details=void 0,this.fragmentError=0,this.loadError=0,this.loaded=void 0,this.realBitrate=0,this.supportedPromise=void 0,this.supportedResult=void 0,this._avgBitrate=0,this._audioGroups=void 0,this._subtitleGroups=void 0,this._urlId=0,this.url=[e.url],this._attrs=[e.attrs],this.bitrate=e.bitrate,e.details&&(this.details=e.details),this.id=e.id||0,this.name=e.name,this.width=e.width||0,this.height=e.height||0,this.frameRate=e.attrs.optionalFloat("FRAME-RATE",0),this._avgBitrate=e.attrs.decimalInteger("AVERAGE-BANDWIDTH"),this.audioCodec=e.audioCodec,this.videoCodec=e.videoCodec,this.codecSet=[e.videoCodec,e.audioCodec].filter(t=>!!t).map(t=>t.substring(0,4)).join(","),this.addGroupId("audio",e.attrs.AUDIO),this.addGroupId("text",e.attrs.SUBTITLES)}get maxBitrate(){return Math.max(this.realBitrate,this.bitrate)}get averageBitrate(){return this._avgBitrate||this.realBitrate||this.bitrate}get attrs(){return this._attrs[0]}get codecs(){return this.attrs.CODECS||""}get pathwayId(){return this.attrs["PATHWAY-ID"]||"."}get videoRange(){return this.attrs["VIDEO-RANGE"]||"SDR"}get score(){return this.attrs.optionalFloat("SCORE",0)}get uri(){return this.url[0]||""}hasAudioGroup(e){return Io(this._audioGroups,e)}hasSubtitleGroup(e){return Io(this._subtitleGroups,e)}get audioGroups(){return this._audioGroups}get subtitleGroups(){return this._subtitleGroups}addGroupId(e,t){if(t){if(e==="audio"){let i=this._audioGroups;i||(i=this._audioGroups=[]),i.indexOf(t)===-1&&i.push(t)}else if(e==="text"){let i=this._subtitleGroups;i||(i=this._subtitleGroups=[]),i.indexOf(t)===-1&&i.push(t)}}}get urlId(){return 0}set urlId(e){}get audioGroupIds(){return this.audioGroups?[this.audioGroupId]:void 0}get textGroupIds(){return this.subtitleGroups?[this.textGroupId]:void 0}get audioGroupId(){var e;return(e=this.audioGroups)==null?void 0:e[0]}get textGroupId(){var e;return(e=this.subtitleGroups)==null?void 0:e[0]}addFallback(){}};function Io(n,e){return!e||!n?!1:n.indexOf(e)!==-1}function Gs(n,e){let t=e.startPTS;if(M(t)){let i=0,s;e.sn>n.sn?(i=t-n.start,s=n):(i=n.start-t,s=e),s.duration!==i&&(s.duration=i)}else e.sn>n.sn?n.cc===e.cc&&n.minEndPTS?e.start=n.start+(n.minEndPTS-n.start):e.start=n.start+n.duration:e.start=Math.max(n.start-e.duration,0)}function pa(n,e,t,i,s,r){i-t<=0&&(L.warn("Fragment should have a positive duration",e),i=t+e.duration,r=s+e.duration);let a=t,l=i,c=e.startPTS,u=e.endPTS;if(M(c)){let y=Math.abs(c-t);M(e.deltaPTS)?e.deltaPTS=Math.max(y,e.deltaPTS):e.deltaPTS=y,a=Math.max(t,c),t=Math.min(t,c),s=Math.min(s,e.startDTS),l=Math.min(i,u),i=Math.max(i,u),r=Math.max(r,e.endDTS)}let h=t-e.start;e.start!==0&&(e.start=t),e.duration=i-e.start,e.startPTS=t,e.maxStartPTS=a,e.startDTS=s,e.endPTS=i,e.minEndPTS=l,e.endDTS=r;let d=e.sn;if(!n||d<n.startSN||d>n.endSN)return 0;let f,g=d-n.startSN,m=n.fragments;for(m[g]=e,f=g;f>0;f--)Gs(m[f],m[f-1]);for(f=g;f<m.length-1;f++)Gs(m[f],m[f+1]);return n.fragmentHint&&Gs(m[m.length-1],n.fragmentHint),n.PTSKnown=n.alignedSliding=!0,h}function su(n,e){let t=null,i=n.fragments;for(let l=i.length-1;l>=0;l--){let c=i[l].initSegment;if(c){t=c;break}}n.fragmentHint&&delete n.fragmentHint.endPTS;let s=0,r;if(ou(n,e,(l,c)=>{l.relurl&&(s=l.cc-c.cc),M(l.startPTS)&&M(l.endPTS)&&(c.start=c.startPTS=l.startPTS,c.startDTS=l.startDTS,c.maxStartPTS=l.maxStartPTS,c.endPTS=l.endPTS,c.endDTS=l.endDTS,c.minEndPTS=l.minEndPTS,c.duration=l.endPTS-l.startPTS,c.duration&&(r=c),e.PTSKnown=e.alignedSliding=!0),c.elementaryStreams=l.elementaryStreams,c.loader=l.loader,c.stats=l.stats,l.initSegment&&(c.initSegment=l.initSegment,t=l.initSegment)}),t&&(e.fragmentHint?e.fragments.concat(e.fragmentHint):e.fragments).forEach(c=>{var u;c&&(!c.initSegment||c.initSegment.relurl===((u=t)==null?void 0:u.relurl))&&(c.initSegment=t)}),e.skippedSegments)if(e.deltaUpdateFailed=e.fragments.some(l=>!l),e.deltaUpdateFailed){L.warn("[level-helper] Previous playlist missing segments skipped in delta playlist");for(let l=e.skippedSegments;l--;)e.fragments.shift();e.startSN=e.fragments[0].sn,e.startCC=e.fragments[0].cc}else e.canSkipDateRanges&&(e.dateRanges=ru(n.dateRanges,e.dateRanges,e.recentlyRemovedDateranges));let o=e.fragments;if(s){L.warn("discontinuity sliding from playlist, take drift into account");for(let l=0;l<o.length;l++)o[l].cc+=s}e.skippedSegments&&(e.startCC=e.fragments[0].cc),nu(n.partList,e.partList,(l,c)=>{c.elementaryStreams=l.elementaryStreams,c.stats=l.stats}),r?pa(e,r,r.startPTS,r.endPTS,r.startDTS,r.endDTS):ya(n,e),o.length&&(e.totalduration=e.edge-o[0].start),e.driftStartTime=n.driftStartTime,e.driftStart=n.driftStart;let a=e.advancedDateTime;if(e.advanced&&a){let l=e.edge;e.driftStart||(e.driftStartTime=a,e.driftStart=l),e.driftEndTime=a,e.driftEnd=l}else e.driftEndTime=n.driftEndTime,e.driftEnd=n.driftEnd,e.advancedDateTime=n.advancedDateTime}function ru(n,e,t){let i=le({},n);return t&&t.forEach(s=>{delete i[s]}),Object.keys(e).forEach(s=>{let r=new $i(e[s].attr,i[s]);r.isValid?i[s]=r:L.warn(`Ignoring invalid Playlist Delta Update DATERANGE tag: "${JSON.stringify(e[s].attr)}"`)}),i}function nu(n,e,t){if(n&&e){let i=0;for(let s=0,r=n.length;s<=r;s++){let o=n[s],a=e[s+i];o&&a&&o.index===a.index&&o.fragment.sn===a.fragment.sn?t(o,a):i--}}}function ou(n,e,t){let i=e.skippedSegments,s=Math.max(n.startSN,e.startSN)-e.startSN,r=(n.fragmentHint?1:0)+(i?e.endSN:Math.min(n.endSN,e.endSN))-e.startSN,o=e.startSN-n.startSN,a=e.fragmentHint?e.fragments.concat(e.fragmentHint):e.fragments,l=n.fragmentHint?n.fragments.concat(n.fragmentHint):n.fragments;for(let c=s;c<=r;c++){let u=l[o+c],h=a[c];i&&!h&&c<i&&(h=e.fragments[c]=u),u&&h&&t(u,h)}}function ya(n,e){let t=e.startSN+e.skippedSegments-n.startSN,i=n.fragments;t<0||t>=i.length||cr(e,i[t].start)}function cr(n,e){if(e){let t=n.fragments;for(let i=n.skippedSegments;i<t.length;i++)t[i].start+=e;n.fragmentHint&&(n.fragmentHint.start+=e)}}function au(n,e=1/0){let t=1e3*n.targetduration;if(n.updated){let i=n.fragments,s=4;if(i.length&&t*s>e){let r=i[i.length-1].duration*1e3;r<t&&(t=r)}}else t/=2;return Math.round(t)}function lu(n,e,t){if(!(n!=null&&n.details))return null;let i=n.details,s=i.fragments[e-i.startSN];return s||(s=i.fragmentHint,s&&s.sn===e)?s:e<i.startSN&&t&&t.sn===e?t:null}function Do(n,e,t){var i;return n!=null&&n.details?Ta((i=n.details)==null?void 0:i.partList,e,t):null}function Ta(n,e,t){if(n)for(let i=n.length;i--;){let s=n[i];if(s.index===t&&s.fragment.sn===e)return s}return null}function xa(n){n.forEach((e,t)=>{let{details:i}=e;i!=null&&i.fragments&&i.fragments.forEach(s=>{s.level=t})})}function ji(n){switch(n.details){case I.FRAG_LOAD_TIMEOUT:case I.KEY_LOAD_TIMEOUT:case I.LEVEL_LOAD_TIMEOUT:case I.MANIFEST_LOAD_TIMEOUT:return!0}return!1}function Co(n,e){let t=ji(e);return n.default[`${t?"timeout":"error"}Retry`]}function un(n,e){let t=n.backoff==="linear"?1:Math.pow(2,e);return Math.min(t*n.retryDelayMs,n.maxRetryDelayMs)}function wo(n){return ye(ye({},n),{errorRetry:null,timeoutRetry:null})}function zi(n,e,t,i){if(!n)return!1;let s=i==null?void 0:i.code,r=e<n.maxNumRetry&&(cu(s)||!!t);return n.shouldRetry?n.shouldRetry(n,e,t,i,r):r}function cu(n){return n===0&&navigator.onLine===!1||!!n&&(n<400||n>499)}var Ea={search:function(n,e){let t=0,i=n.length-1,s=null,r=null;for(;t<=i;){s=(t+i)/2|0,r=n[s];let o=e(r);if(o>0)t=s+1;else if(o<0)i=s-1;else return r}return null}};function uu(n,e,t){if(e===null||!Array.isArray(n)||!n.length||!M(e))return null;let i=n[0].programDateTime;if(e<(i||0))return null;let s=n[n.length-1].endProgramDateTime;if(e>=(s||0))return null;t=t||0;for(let r=0;r<n.length;++r){let o=n[r];if(du(e,t,o))return o}return null}function Xi(n,e,t=0,i=0,s=.005){let r=null;if(n){r=e[n.sn-e[0].sn+1]||null;let a=n.endDTS-t;a>0&&a<15e-7&&(t+=15e-7)}else t===0&&e[0].start===0&&(r=e[0]);if(r&&((!n||n.level===r.level)&&ur(t,i,r)===0||hu(r,n,Math.min(s,i))))return r;let o=Ea.search(e,ur.bind(null,t,i));return o&&(o!==n||!r)?o:r}function hu(n,e,t){if(e&&e.start===0&&e.level<n.level&&(e.endPTS||0)>0){let i=e.tagList.reduce((s,r)=>(r[0]==="INF"&&(s+=parseFloat(r[1])),s),t);return n.start<=i}return!1}function ur(n=0,e=0,t){if(t.start<=n&&t.start+t.duration>n)return 0;let i=Math.min(e,t.duration+(t.deltaPTS?t.deltaPTS:0));return t.start+t.duration-i<=n?1:t.start-i>n&&t.start?-1:0}function du(n,e,t){let i=Math.min(e,t.duration+(t.deltaPTS?t.deltaPTS:0))*1e3;return(t.endProgramDateTime||0)-i>n}function fu(n,e){return Ea.search(n,t=>t.cc<e?1:t.cc>e?-1:0)}var me={DoNothing:0,SendEndCallback:1,SendAlternateToPenaltyBox:2,RemoveAlternatePermanently:3,InsertDiscontinuity:4,RetryRequest:5},Me={None:0,MoveAllAlternatesMatchingHost:1,MoveAllAlternatesMatchingHDCP:2,SwitchToSDR:4},hr=class{constructor(e){this.hls=void 0,this.playlistError=0,this.penalizedRenditions={},this.log=void 0,this.warn=void 0,this.error=void 0,this.hls=e,this.log=L.log.bind(L,"[info]:"),this.warn=L.warn.bind(L,"[warning]:"),this.error=L.error.bind(L,"[error]:"),this.registerListeners()}registerListeners(){let e=this.hls;e.on(p.ERROR,this.onError,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.LEVEL_UPDATED,this.onLevelUpdated,this)}unregisterListeners(){let e=this.hls;e&&(e.off(p.ERROR,this.onError,this),e.off(p.ERROR,this.onErrorOut,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.LEVEL_UPDATED,this.onLevelUpdated,this))}destroy(){this.unregisterListeners(),this.hls=null,this.penalizedRenditions={}}startLoad(e){}stopLoad(){this.playlistError=0}getVariantLevelIndex(e){return(e==null?void 0:e.type)===H.MAIN?e.level:this.hls.loadLevel}onManifestLoading(){this.playlistError=0,this.penalizedRenditions={}}onLevelUpdated(){this.playlistError=0}onError(e,t){var i,s;if(t.fatal)return;let r=this.hls,o=t.context;switch(t.details){case I.FRAG_LOAD_ERROR:case I.FRAG_LOAD_TIMEOUT:case I.KEY_LOAD_ERROR:case I.KEY_LOAD_TIMEOUT:t.errorAction=this.getFragRetryOrSwitchAction(t);return;case I.FRAG_PARSING_ERROR:if((i=t.frag)!=null&&i.gap){t.errorAction={action:me.DoNothing,flags:Me.None};return}case I.FRAG_GAP:case I.FRAG_DECRYPT_ERROR:{t.errorAction=this.getFragRetryOrSwitchAction(t),t.errorAction.action=me.SendAlternateToPenaltyBox;return}case I.LEVEL_EMPTY_ERROR:case I.LEVEL_PARSING_ERROR:{var a,l;let c=t.parent===H.MAIN?t.level:r.loadLevel;t.details===I.LEVEL_EMPTY_ERROR&&((a=t.context)!=null&&(l=a.levelDetails)!=null&&l.live)?t.errorAction=this.getPlaylistRetryOrSwitchAction(t,c):(t.levelRetry=!1,t.errorAction=this.getLevelSwitchAction(t,c))}return;case I.LEVEL_LOAD_ERROR:case I.LEVEL_LOAD_TIMEOUT:typeof(o==null?void 0:o.level)=="number"&&(t.errorAction=this.getPlaylistRetryOrSwitchAction(t,o.level));return;case I.AUDIO_TRACK_LOAD_ERROR:case I.AUDIO_TRACK_LOAD_TIMEOUT:case I.SUBTITLE_LOAD_ERROR:case I.SUBTITLE_TRACK_LOAD_TIMEOUT:if(o){let c=r.levels[r.loadLevel];if(c&&(o.type===z.AUDIO_TRACK&&c.hasAudioGroup(o.groupId)||o.type===z.SUBTITLE_TRACK&&c.hasSubtitleGroup(o.groupId))){t.errorAction=this.getPlaylistRetryOrSwitchAction(t,r.loadLevel),t.errorAction.action=me.SendAlternateToPenaltyBox,t.errorAction.flags=Me.MoveAllAlternatesMatchingHost;return}}return;case I.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED:{let c=r.levels[r.loadLevel],u=c==null?void 0:c.attrs["HDCP-LEVEL"];u?t.errorAction={action:me.SendAlternateToPenaltyBox,flags:Me.MoveAllAlternatesMatchingHDCP,hdcpLevel:u}:this.keySystemError(t)}return;case I.BUFFER_ADD_CODEC_ERROR:case I.REMUX_ALLOC_ERROR:case I.BUFFER_APPEND_ERROR:t.errorAction=this.getLevelSwitchAction(t,(s=t.level)!=null?s:r.loadLevel);return;case I.INTERNAL_EXCEPTION:case I.BUFFER_APPENDING_ERROR:case I.BUFFER_FULL_ERROR:case I.LEVEL_SWITCH_ERROR:case I.BUFFER_STALLED_ERROR:case I.BUFFER_SEEK_OVER_HOLE:case I.BUFFER_NUDGE_ON_STALL:t.errorAction={action:me.DoNothing,flags:Me.None};return}t.type===V.KEY_SYSTEM_ERROR&&this.keySystemError(t)}keySystemError(e){let t=this.getVariantLevelIndex(e.frag);e.levelRetry=!1,e.errorAction=this.getLevelSwitchAction(e,t)}getPlaylistRetryOrSwitchAction(e,t){let i=this.hls,s=Co(i.config.playlistLoadPolicy,e),r=this.playlistError++;if(zi(s,r,ji(e),e.response))return{action:me.RetryRequest,flags:Me.None,retryConfig:s,retryCount:r};let a=this.getLevelSwitchAction(e,t);return s&&(a.retryConfig=s,a.retryCount=r),a}getFragRetryOrSwitchAction(e){let t=this.hls,i=this.getVariantLevelIndex(e.frag),s=t.levels[i],{fragLoadPolicy:r,keyLoadPolicy:o}=t.config,a=Co(e.details.startsWith("key")?o:r,e),l=t.levels.reduce((u,h)=>u+h.fragmentError,0);if(s&&(e.details!==I.FRAG_GAP&&s.fragmentError++,zi(a,l,ji(e),e.response)))return{action:me.RetryRequest,flags:Me.None,retryConfig:a,retryCount:l};let c=this.getLevelSwitchAction(e,i);return a&&(c.retryConfig=a,c.retryCount=l),c}getLevelSwitchAction(e,t){let i=this.hls;t==null&&(t=i.loadLevel);let s=this.hls.levels[t];if(s){var r,o;let c=e.details;s.loadError++,c===I.BUFFER_APPEND_ERROR&&s.fragmentError++;let u=-1,{levels:h,loadLevel:d,minAutoLevel:f,maxAutoLevel:g}=i;i.autoLevelEnabled||(i.loadLevel=-1);let m=(r=e.frag)==null?void 0:r.type,T=(m===H.AUDIO&&c===I.FRAG_PARSING_ERROR||e.sourceBufferName==="audio"&&(c===I.BUFFER_ADD_CODEC_ERROR||c===I.BUFFER_APPEND_ERROR))&&h.some(({audioCodec:A})=>s.audioCodec!==A),E=e.sourceBufferName==="video"&&(c===I.BUFFER_ADD_CODEC_ERROR||c===I.BUFFER_APPEND_ERROR)&&h.some(({codecSet:A,audioCodec:b})=>s.codecSet!==A&&s.audioCodec===b),{type:S,groupId:x}=(o=e.context)!=null?o:{};for(let A=h.length;A--;){let b=(A+d)%h.length;if(b!==d&&b>=f&&b<=g&&h[b].loadError===0){var a,l;let C=h[b];if(c===I.FRAG_GAP&&m===H.MAIN&&e.frag){let _=h[b].details;if(_){let D=Xi(e.frag,_.fragments,e.frag.start);if(D!=null&&D.gap)continue}}else{if(S===z.AUDIO_TRACK&&C.hasAudioGroup(x)||S===z.SUBTITLE_TRACK&&C.hasSubtitleGroup(x))continue;if(m===H.AUDIO&&(a=s.audioGroups)!=null&&a.some(_=>C.hasAudioGroup(_))||m===H.SUBTITLE&&(l=s.subtitleGroups)!=null&&l.some(_=>C.hasSubtitleGroup(_))||T&&s.audioCodec===C.audioCodec||!T&&s.audioCodec!==C.audioCodec||E&&s.codecSet===C.codecSet)continue}u=b;break}}if(u>-1&&i.loadLevel!==u)return e.levelRetry=!0,this.playlistError=0,{action:me.SendAlternateToPenaltyBox,flags:Me.None,nextAutoLevel:u}}return{action:me.SendAlternateToPenaltyBox,flags:Me.MoveAllAlternatesMatchingHost}}onErrorOut(e,t){var i;switch((i=t.errorAction)==null?void 0:i.action){case me.DoNothing:break;case me.SendAlternateToPenaltyBox:this.sendAlternateToPenaltyBox(t),!t.errorAction.resolved&&t.details!==I.FRAG_GAP?t.fatal=!0:/MediaSource readyState: ended/.test(t.error.message)&&(this.warn(`MediaSource ended after "${t.sourceBufferName}" sourceBuffer append error. Attempting to recover from media error.`),this.hls.recoverMediaError());break;case me.RetryRequest:break}if(t.fatal){this.hls.stopLoad();return}}sendAlternateToPenaltyBox(e){let t=this.hls,i=e.errorAction;if(!i)return;let{flags:s,hdcpLevel:r,nextAutoLevel:o}=i;switch(s){case Me.None:this.switchLevel(e,o);break;case Me.MoveAllAlternatesMatchingHDCP:r&&(t.maxHdcpLevel=lr[lr.indexOf(r)-1],i.resolved=!0),this.warn(`Restricting playback to HDCP-LEVEL of "${t.maxHdcpLevel}" or lower`);break}i.resolved||this.switchLevel(e,o)}switchLevel(e,t){t!==void 0&&e.errorAction&&(this.warn(`switching to level ${t} after ${e.details}`),this.hls.nextAutoLevel=t,e.errorAction.resolved=!0,this.hls.nextLoadLevel=this.hls.nextAutoLevel)}},ni=class{constructor(e,t){this.hls=void 0,this.timer=-1,this.requestScheduled=-1,this.canLoad=!1,this.log=void 0,this.warn=void 0,this.log=L.log.bind(L,`${t}:`),this.warn=L.warn.bind(L,`${t}:`),this.hls=e}destroy(){this.clearTimer(),this.hls=this.log=this.warn=null}clearTimer(){this.timer!==-1&&(self.clearTimeout(this.timer),this.timer=-1)}startLoad(){this.canLoad=!0,this.requestScheduled=-1,this.loadPlaylist()}stopLoad(){this.canLoad=!1,this.clearTimer()}switchParams(e,t,i){let s=t==null?void 0:t.renditionReports;if(s){let r=-1;for(let o=0;o<s.length;o++){let a=s[o],l;try{l=new self.URL(a.URI,t.url).href}catch(c){L.warn(`Could not construct new URL for Rendition Report: ${c}`),l=a.URI||""}if(l===e){r=o;break}else l===e.substring(0,l.length)&&(r=o)}if(r!==-1){let o=s[r],a=parseInt(o["LAST-MSN"])||(t==null?void 0:t.lastPartSn),l=parseInt(o["LAST-PART"])||(t==null?void 0:t.lastPartIndex);if(this.hls.config.lowLatencyMode){let u=Math.min(t.age-t.partTarget,t.targetduration);l>=0&&u>t.partTarget&&(l+=1)}let c=i&&Ro(i);return new qi(a,l>=0?l:void 0,c)}}}loadPlaylist(e){this.requestScheduled===-1&&(this.requestScheduled=self.performance.now())}shouldLoadPlaylist(e){return this.canLoad&&!!e&&!!e.url&&(!e.details||e.details.live)}shouldReloadPlaylist(e){return this.timer===-1&&this.requestScheduled===-1&&this.shouldLoadPlaylist(e)}playlistLoaded(e,t,i){let{details:s,stats:r}=t,o=self.performance.now(),a=r.loading.first?Math.max(0,o-r.loading.first):0;if(s.advancedDateTime=Date.now()-a,s.live||i!=null&&i.live){if(s.reloaded(i),i&&this.log(`live playlist ${e} ${s.advanced?"REFRESHED "+s.lastPartSn+"-"+s.lastPartIndex:s.updated?"UPDATED":"MISSED"}`),i&&s.fragments.length>0&&su(i,s),!this.canLoad||!s.live)return;let l,c,u;if(s.canBlockReload&&s.endSN&&s.advanced){let y=this.hls.config.lowLatencyMode,T=s.lastPartSn,v=s.endSN,E=s.lastPartIndex,S=E!==-1,x=T===v,A=y?0:E;S?(c=x?v+1:T,u=x?A:E+1):c=v+1;let b=s.age,C=b+s.ageHeader,_=Math.min(C-s.partTarget,s.targetduration*1.5);if(_>0){if(i&&_>i.tuneInGoal)this.warn(`CDN Tune-in goal increased from: ${i.tuneInGoal} to: ${_} with playlist age: ${s.age}`),_=0;else{let D=Math.floor(_/s.targetduration);if(c+=D,u!==void 0){let w=Math.round(_%s.targetduration/s.partTarget);u+=w}this.log(`CDN Tune-in age: ${s.ageHeader}s last advanced ${b.toFixed(2)}s goal: ${_} skip sn ${D} to part ${u}`)}s.tuneInGoal=_}if(l=this.getDeliveryDirectives(s,t.deliveryDirectives,c,u),y||!x){this.loadPlaylist(l);return}}else(s.canBlockReload||s.canSkipUntil)&&(l=this.getDeliveryDirectives(s,t.deliveryDirectives,c,u));let h=this.hls.mainForwardBufferInfo,d=h?h.end-h.len:0,f=(s.edge-d)*1e3,g=au(s,f);s.updated&&o>this.requestScheduled+g&&(this.requestScheduled=r.loading.start),c!==void 0&&s.canBlockReload?this.requestScheduled=r.loading.first+g-(s.partTarget*1e3||1e3):this.requestScheduled===-1||this.requestScheduled+g<o?this.requestScheduled=o:this.requestScheduled-o<=0&&(this.requestScheduled+=g);let m=this.requestScheduled-o;m=Math.max(0,m),this.log(`reload live playlist ${e} in ${Math.round(m)} ms`),this.timer=self.setTimeout(()=>this.loadPlaylist(l),m)}else this.clearTimer()}getDeliveryDirectives(e,t,i,s){let r=Ro(e);return t!=null&&t.skip&&e.deltaUpdateFailed&&(i=t.msn,s=t.part,r=Oi.No),new qi(i,s,r)}checkRetry(e){let t=e.details,i=ji(e),s=e.errorAction,{action:r,retryCount:o=0,retryConfig:a}=s||{},l=!!s&&!!a&&(r===me.RetryRequest||!s.resolved&&r===me.SendAlternateToPenaltyBox);if(l){var c;if(this.requestScheduled=-1,o>=a.maxNumRetry)return!1;if(i&&(c=e.context)!=null&&c.deliveryDirectives)this.warn(`Retrying playlist loading ${o+1}/${a.maxNumRetry} after "${t}" without delivery-directives`),this.loadPlaylist();else{let u=un(a,o);this.timer=self.setTimeout(()=>this.loadPlaylist(),u),this.warn(`Retrying playlist loading ${o+1}/${a.maxNumRetry} after "${t}" in ${u}ms`)}e.levelRetry=!0,s.resolved=!0}return l}},ot=class{constructor(e,t=0,i=0){this.halfLife=void 0,this.alpha_=void 0,this.estimate_=void 0,this.totalWeight_=void 0,this.halfLife=e,this.alpha_=e?Math.exp(Math.log(.5)/e):0,this.estimate_=t,this.totalWeight_=i}sample(e,t){let i=Math.pow(this.alpha_,e);this.estimate_=t*(1-i)+i*this.estimate_,this.totalWeight_+=e}getTotalWeight(){return this.totalWeight_}getEstimate(){if(this.alpha_){let e=1-Math.pow(this.alpha_,this.totalWeight_);if(e)return this.estimate_/e}return this.estimate_}},dr=class{constructor(e,t,i,s=100){this.defaultEstimate_=void 0,this.minWeight_=void 0,this.minDelayMs_=void 0,this.slow_=void 0,this.fast_=void 0,this.defaultTTFB_=void 0,this.ttfb_=void 0,this.defaultEstimate_=i,this.minWeight_=.001,this.minDelayMs_=50,this.slow_=new ot(e),this.fast_=new ot(t),this.defaultTTFB_=s,this.ttfb_=new ot(e)}update(e,t){let{slow_:i,fast_:s,ttfb_:r}=this;i.halfLife!==e&&(this.slow_=new ot(e,i.getEstimate(),i.getTotalWeight())),s.halfLife!==t&&(this.fast_=new ot(t,s.getEstimate(),s.getTotalWeight())),r.halfLife!==e&&(this.ttfb_=new ot(e,r.getEstimate(),r.getTotalWeight()))}sample(e,t){e=Math.max(e,this.minDelayMs_);let i=8*t,s=e/1e3,r=i/s;this.fast_.sample(s,r),this.slow_.sample(s,r)}sampleTTFB(e){let t=e/1e3,i=Math.sqrt(2)*Math.exp(-Math.pow(t,2)/2);this.ttfb_.sample(i,Math.max(e,5))}canEstimate(){return this.fast_.getTotalWeight()>=this.minWeight_}getEstimate(){return this.canEstimate()?Math.min(this.fast_.getEstimate(),this.slow_.getEstimate()):this.defaultEstimate_}getEstimateTTFB(){return this.ttfb_.getTotalWeight()>=this.minWeight_?this.ttfb_.getEstimate():this.defaultTTFB_}destroy(){}},va={supported:!0,configurations:[],decodingInfoResults:[{supported:!0,powerEfficient:!0,smooth:!0}]},ko={};function gu(n,e,t,i,s,r){let o=n.audioCodec?n.audioGroups:null,a=r==null?void 0:r.audioCodec,l=r==null?void 0:r.channels,c=l?parseInt(l):a?1/0:2,u=null;if(o!=null&&o.length)try{o.length===1&&o[0]?u=e.groups[o[0]].channels:u=o.reduce((h,d)=>{if(d){let f=e.groups[d];if(!f)throw new Error(`Audio track group ${d} not found`);Object.keys(f.channels).forEach(g=>{h[g]=(h[g]||0)+f.channels[g]})}return h},{2:0})}catch(h){return!0}return n.videoCodec!==void 0&&(n.width>1920&&n.height>1088||n.height>1920&&n.width>1088||n.frameRate>Math.max(i,30)||n.videoRange!=="SDR"&&n.videoRange!==t||n.bitrate>Math.max(s,8e6))||!!u&&M(c)&&Object.keys(u).some(h=>parseInt(h)>c)}function mu(n,e,t){let i=n.videoCodec,s=n.audioCodec;if(!i||!s||!t)return Promise.resolve(va);let r={width:n.width,height:n.height,bitrate:Math.ceil(Math.max(n.bitrate*.9,n.averageBitrate)),framerate:n.frameRate||30},o=n.videoRange;o!=="SDR"&&(r.transferFunction=o.toLowerCase());let a=i.split(",").map(l=>({type:"media-source",video:ye(ye({},r),{},{contentType:ri(l,"video")})}));return s&&n.audioGroups&&n.audioGroups.forEach(l=>{var c;l&&((c=e.groups[l])==null||c.tracks.forEach(u=>{if(u.groupId===l){let h=u.channels||"",d=parseFloat(h);M(d)&&d>2&&a.push.apply(a,s.split(",").map(f=>({type:"media-source",audio:{contentType:ri(f,"audio"),channels:""+d}})))}}))}),Promise.all(a.map(l=>{let c=pu(l);return ko[c]||(ko[c]=t.decodingInfo(l))})).then(l=>({supported:!l.some(c=>!c.supported),configurations:a,decodingInfoResults:l})).catch(l=>({supported:!1,configurations:a,decodingInfoResults:[],error:l}))}function pu(n){let{audio:e,video:t}=n,i=t||e;if(i){let s=i.contentType.split('"')[1];if(t)return`r${t.height}x${t.width}f${Math.ceil(t.framerate)}${t.transferFunction||"sd"}_${s}_${Math.ceil(t.bitrate/1e5)}`;if(e)return`c${e.channels}${e.spatialRendering?"s":"n"}_${s}`}return""}function yu(){if(typeof matchMedia=="function"){let n=matchMedia("(dynamic-range: high)"),e=matchMedia("bad query");if(n.media!==e.media)return n.matches===!0}return!1}function Tu(n,e){let t=!1,i=[];return n&&(t=n!=="SDR",i=[n]),e&&(i=e.allowedVideoRanges||Yi.slice(0),t=e.preferHDR!==void 0?e.preferHDR:yu(),t?i=i.filter(s=>s!=="SDR"):i=["SDR"]),{preferHDR:t,allowedVideoRanges:i}}function xu(n,e,t,i,s){let r=Object.keys(n),o=i==null?void 0:i.channels,a=i==null?void 0:i.audioCodec,l=o&&parseInt(o)===2,c=!0,u=!1,h=1/0,d=1/0,f=1/0,g=0,m=[],{preferHDR:y,allowedVideoRanges:T}=Tu(e,s);for(let x=r.length;x--;){let A=n[r[x]];c=A.channels[2]>0,h=Math.min(h,A.minHeight),d=Math.min(d,A.minFramerate),f=Math.min(f,A.minBitrate);let b=T.filter(C=>A.videoRanges[C]>0);b.length>0&&(u=!0,m=b)}h=M(h)?h:0,d=M(d)?d:0;let v=Math.max(1080,h),E=Math.max(30,d);return f=M(f)?f:t,t=Math.max(f,t),u||(e=void 0,m=[]),{codecSet:r.reduce((x,A)=>{let b=n[A];if(A===x)return x;if(b.minBitrate>t)return Qe(A,`min bitrate of ${b.minBitrate} > current estimate of ${t}`),x;if(!b.hasDefaultAudio)return Qe(A,"no renditions with default or auto-select sound found"),x;if(a&&A.indexOf(a.substring(0,4))%5!==0)return Qe(A,`audio codec preference "${a}" not found`),x;if(o&&!l){if(!b.channels[o])return Qe(A,`no renditions with ${o} channel sound found (channels options: ${Object.keys(b.channels)})`),x}else if((!a||l)&&c&&b.channels[2]===0)return Qe(A,"no renditions with stereo sound found"),x;return b.minHeight>v?(Qe(A,`min resolution of ${b.minHeight} > maximum of ${v}`),x):b.minFramerate>E?(Qe(A,`min framerate of ${b.minFramerate} > maximum of ${E}`),x):m.some(C=>b.videoRanges[C]>0)?b.maxScore<g?(Qe(A,`max score of ${b.maxScore} < selected max of ${g}`),x):x&&(Ki(A)>=Ki(x)||b.fragmentError>n[x].fragmentError)?x:(g=b.maxScore,A):(Qe(A,`no variants with VIDEO-RANGE of ${JSON.stringify(m)} found`),x)},void 0),videoRanges:m,preferHDR:y,minFramerate:d,minBitrate:f}}function Qe(n,e){L.log(`[abr] start candidates with "${n}" ignored because ${e}`)}function Eu(n){return n.reduce((e,t)=>{let i=e.groups[t.groupId];i||(i=e.groups[t.groupId]={tracks:[],channels:{2:0},hasDefault:!1,hasAutoSelect:!1}),i.tracks.push(t);let s=t.channels||"2";return i.channels[s]=(i.channels[s]||0)+1,i.hasDefault=i.hasDefault||t.default,i.hasAutoSelect=i.hasAutoSelect||t.autoselect,i.hasDefault&&(e.hasDefaultAudio=!0),i.hasAutoSelect&&(e.hasAutoSelectAudio=!0),e},{hasDefaultAudio:!1,hasAutoSelectAudio:!1,groups:{}})}function vu(n,e,t,i){return n.slice(t,i+1).reduce((s,r)=>{if(!r.codecSet)return s;let o=r.audioGroups,a=s[r.codecSet];a||(s[r.codecSet]=a={minBitrate:1/0,minHeight:1/0,minFramerate:1/0,maxScore:0,videoRanges:{SDR:0},channels:{2:0},hasDefaultAudio:!o,fragmentError:0}),a.minBitrate=Math.min(a.minBitrate,r.bitrate);let l=Math.min(r.height,r.width);return a.minHeight=Math.min(a.minHeight,l),a.minFramerate=Math.min(a.minFramerate,r.frameRate),a.maxScore=Math.max(a.maxScore,r.score),a.fragmentError+=r.fragmentError,a.videoRanges[r.videoRange]=(a.videoRanges[r.videoRange]||0)+1,o&&o.forEach(c=>{if(!c)return;let u=e.groups[c];u&&(a.hasDefaultAudio=a.hasDefaultAudio||e.hasDefaultAudio?u.hasDefault:u.hasAutoSelect||!e.hasDefaultAudio&&!e.hasAutoSelectAudio,Object.keys(u.channels).forEach(h=>{a.channels[h]=(a.channels[h]||0)+u.channels[h]}))}),s},{})}function We(n,e,t){if("attrs"in n){let i=e.indexOf(n);if(i!==-1)return i}for(let i=0;i<e.length;i++){let s=e[i];if(Ut(n,s,t))return i}return-1}function Ut(n,e,t){let{groupId:i,name:s,lang:r,assocLang:o,characteristics:a,default:l}=n,c=n.forced;return(i===void 0||e.groupId===i)&&(s===void 0||e.name===s)&&(r===void 0||e.lang===r)&&(r===void 0||e.assocLang===o)&&(l===void 0||e.default===l)&&(c===void 0||e.forced===c)&&(a===void 0||Su(a,e.characteristics))&&(t===void 0||t(n,e))}function Su(n,e=""){let t=n.split(","),i=e.split(",");return t.length===i.length&&!t.some(s=>i.indexOf(s)===-1)}function Pt(n,e){let{audioCodec:t,channels:i}=n;return(t===void 0||(e.audioCodec||"").substring(0,4)===t.substring(0,4))&&(i===void 0||i===(e.channels||"2"))}function Au(n,e,t,i,s){let r=e[i],a=e.reduce((d,f,g)=>{let m=f.uri;return(d[m]||(d[m]=[])).push(g),d},{})[r.uri];a.length>1&&(i=Math.max.apply(Math,a));let l=r.videoRange,c=r.frameRate,u=r.codecSet.substring(0,4),h=_o(e,i,d=>{if(d.videoRange!==l||d.frameRate!==c||d.codecSet.substring(0,4)!==u)return!1;let f=d.audioGroups,g=t.filter(m=>!f||f.indexOf(m.groupId)!==-1);return We(n,g,s)>-1});return h>-1?h:_o(e,i,d=>{let f=d.audioGroups,g=t.filter(m=>!f||f.indexOf(m.groupId)!==-1);return We(n,g,s)>-1})}function _o(n,e,t){for(let i=e;i;i--)if(t(n[i]))return i;for(let i=e+1;i<n.length;i++)if(t(n[i]))return i;return-1}var fr=class{constructor(e){this.hls=void 0,this.lastLevelLoadSec=0,this.lastLoadedFragLevel=-1,this.firstSelection=-1,this._nextAutoLevel=-1,this.nextAutoLevelKey="",this.audioTracksByGroup=null,this.codecTiers=null,this.timer=-1,this.fragCurrent=null,this.partCurrent=null,this.bitrateTestDelay=0,this.bwEstimator=void 0,this._abandonRulesCheck=()=>{let{fragCurrent:t,partCurrent:i,hls:s}=this,{autoLevelEnabled:r,media:o}=s;if(!t||!o)return;let a=performance.now(),l=i?i.stats:t.stats,c=i?i.duration:t.duration,u=a-l.loading.start,h=s.minAutoLevel;if(l.aborted||l.loaded&&l.loaded===l.total||t.level<=h){this.clearTimer(),this._nextAutoLevel=-1;return}if(!r||o.paused||!o.playbackRate||!o.readyState)return;let d=s.mainForwardBufferInfo;if(d===null)return;let f=this.bwEstimator.getEstimateTTFB(),g=Math.abs(o.playbackRate);if(u<=Math.max(f,1e3*(c/(g*2))))return;let m=d.len/g,y=l.loading.first?l.loading.first-l.loading.start:-1,T=l.loaded&&y>-1,v=this.getBwEstimate(),E=s.levels,S=E[t.level],x=l.total||Math.max(l.loaded,Math.round(c*S.averageBitrate/8)),A=T?u-y:u;A<1&&T&&(A=Math.min(u,l.loaded*8/v));let b=T?l.loaded*1e3/A:0,C=b?(x-l.loaded)/b:x*8/v+f/1e3;if(C<=m)return;let _=b?b*8:v,D=Number.POSITIVE_INFINITY,w;for(w=t.level-1;w>h;w--){let P=E[w].maxBitrate;if(D=this.getTimeToLoadFrag(f/1e3,_,c*P,!E[w].details),D<m)break}if(D>=C||D>c*10)return;s.nextLoadLevel=s.nextAutoLevel=w,T?this.bwEstimator.sample(u-Math.min(f,y),l.loaded):this.bwEstimator.sampleTTFB(u);let B=E[w].maxBitrate;this.getBwEstimate()*this.hls.config.abrBandWidthUpFactor>B&&this.resetEstimator(B),this.clearTimer(),L.warn(`[abr] Fragment ${t.sn}${i?" part "+i.index:""} of level ${t.level} is loading too slowly;
      Time to underbuffer: ${m.toFixed(3)} s
      Estimated load time for current fragment: ${C.toFixed(3)} s
      Estimated load time for down switch fragment: ${D.toFixed(3)} s
      TTFB estimate: ${y|0} ms
      Current BW estimate: ${M(v)?v|0:"Unknown"} bps
      New BW estimate: ${this.getBwEstimate()|0} bps
      Switching to level ${w} @ ${B|0} bps`),s.trigger(p.FRAG_LOAD_EMERGENCY_ABORTED,{frag:t,part:i,stats:l})},this.hls=e,this.bwEstimator=this.initEstimator(),this.registerListeners()}resetEstimator(e){e&&(L.log(`setting initial bwe to ${e}`),this.hls.config.abrEwmaDefaultEstimate=e),this.firstSelection=-1,this.bwEstimator=this.initEstimator()}initEstimator(){let e=this.hls.config;return new dr(e.abrEwmaSlowVoD,e.abrEwmaFastVoD,e.abrEwmaDefaultEstimate)}registerListeners(){let{hls:e}=this;e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.FRAG_LOADING,this.onFragLoading,this),e.on(p.FRAG_LOADED,this.onFragLoaded,this),e.on(p.FRAG_BUFFERED,this.onFragBuffered,this),e.on(p.LEVEL_SWITCHING,this.onLevelSwitching,this),e.on(p.LEVEL_LOADED,this.onLevelLoaded,this),e.on(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.on(p.MAX_AUTO_LEVEL_UPDATED,this.onMaxAutoLevelUpdated,this),e.on(p.ERROR,this.onError,this)}unregisterListeners(){let{hls:e}=this;e&&(e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.FRAG_LOADING,this.onFragLoading,this),e.off(p.FRAG_LOADED,this.onFragLoaded,this),e.off(p.FRAG_BUFFERED,this.onFragBuffered,this),e.off(p.LEVEL_SWITCHING,this.onLevelSwitching,this),e.off(p.LEVEL_LOADED,this.onLevelLoaded,this),e.off(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.off(p.MAX_AUTO_LEVEL_UPDATED,this.onMaxAutoLevelUpdated,this),e.off(p.ERROR,this.onError,this))}destroy(){this.unregisterListeners(),this.clearTimer(),this.hls=this._abandonRulesCheck=null,this.fragCurrent=this.partCurrent=null}onManifestLoading(e,t){this.lastLoadedFragLevel=-1,this.firstSelection=-1,this.lastLevelLoadSec=0,this.fragCurrent=this.partCurrent=null,this.onLevelsUpdated(),this.clearTimer()}onLevelsUpdated(){this.lastLoadedFragLevel>-1&&this.fragCurrent&&(this.lastLoadedFragLevel=this.fragCurrent.level),this._nextAutoLevel=-1,this.onMaxAutoLevelUpdated(),this.codecTiers=null,this.audioTracksByGroup=null}onMaxAutoLevelUpdated(){this.firstSelection=-1,this.nextAutoLevelKey=""}onFragLoading(e,t){let i=t.frag;if(!this.ignoreFragment(i)){if(!i.bitrateTest){var s;this.fragCurrent=i,this.partCurrent=(s=t.part)!=null?s:null}this.clearTimer(),this.timer=self.setInterval(this._abandonRulesCheck,100)}}onLevelSwitching(e,t){this.clearTimer()}onError(e,t){if(!t.fatal)switch(t.details){case I.BUFFER_ADD_CODEC_ERROR:case I.BUFFER_APPEND_ERROR:this.lastLoadedFragLevel=-1,this.firstSelection=-1;break;case I.FRAG_LOAD_TIMEOUT:{let i=t.frag,{fragCurrent:s,partCurrent:r}=this;if(i&&s&&i.sn===s.sn&&i.level===s.level){let o=performance.now(),a=r?r.stats:i.stats,l=o-a.loading.start,c=a.loading.first?a.loading.first-a.loading.start:-1;if(a.loaded&&c>-1){let h=this.bwEstimator.getEstimateTTFB();this.bwEstimator.sample(l-Math.min(h,c),a.loaded)}else this.bwEstimator.sampleTTFB(l)}break}}}getTimeToLoadFrag(e,t,i,s){let r=e+i/t,o=s?this.lastLevelLoadSec:0;return r+o}onLevelLoaded(e,t){let i=this.hls.config,{loading:s}=t.stats,r=s.end-s.start;M(r)&&(this.lastLevelLoadSec=r/1e3),t.details.live?this.bwEstimator.update(i.abrEwmaSlowLive,i.abrEwmaFastLive):this.bwEstimator.update(i.abrEwmaSlowVoD,i.abrEwmaFastVoD)}onFragLoaded(e,{frag:t,part:i}){let s=i?i.stats:t.stats;if(t.type===H.MAIN&&this.bwEstimator.sampleTTFB(s.loading.first-s.loading.start),!this.ignoreFragment(t)){if(this.clearTimer(),t.level===this._nextAutoLevel&&(this._nextAutoLevel=-1),this.firstSelection=-1,this.hls.config.abrMaxWithRealBitrate){let r=i?i.duration:t.duration,o=this.hls.levels[t.level],a=(o.loaded?o.loaded.bytes:0)+s.loaded,l=(o.loaded?o.loaded.duration:0)+r;o.loaded={bytes:a,duration:l},o.realBitrate=Math.round(8*a/l)}if(t.bitrateTest){let r={stats:s,frag:t,part:i,id:t.type};this.onFragBuffered(p.FRAG_BUFFERED,r),t.bitrateTest=!1}else this.lastLoadedFragLevel=t.level}}onFragBuffered(e,t){let{frag:i,part:s}=t,r=s!=null&&s.stats.loaded?s.stats:i.stats;if(r.aborted||this.ignoreFragment(i))return;let o=r.parsing.end-r.loading.start-Math.min(r.loading.first-r.loading.start,this.bwEstimator.getEstimateTTFB());this.bwEstimator.sample(o,r.loaded),r.bwEstimate=this.getBwEstimate(),i.bitrateTest?this.bitrateTestDelay=o/1e3:this.bitrateTestDelay=0}ignoreFragment(e){return e.type!==H.MAIN||e.sn==="initSegment"}clearTimer(){this.timer>-1&&(self.clearInterval(this.timer),this.timer=-1)}get firstAutoLevel(){let{maxAutoLevel:e,minAutoLevel:t}=this.hls,i=this.getBwEstimate(),s=this.hls.config.maxStarvationDelay,r=this.findBestLevel(i,t,e,0,s,1,1);if(r>-1)return r;let o=this.hls.firstLevel,a=Math.min(Math.max(o,t),e);return L.warn(`[abr] Could not find best starting auto level. Defaulting to first in playlist ${o} clamped to ${a}`),a}get forcedAutoLevel(){return this.nextAutoLevelKey?-1:this._nextAutoLevel}get nextAutoLevel(){let e=this.forcedAutoLevel,i=this.bwEstimator.canEstimate(),s=this.lastLoadedFragLevel>-1;if(e!==-1&&(!i||!s||this.nextAutoLevelKey===this.getAutoLevelKey()))return e;let r=i&&s?this.getNextABRAutoLevel():this.firstAutoLevel;if(e!==-1){let o=this.hls.levels;if(o.length>Math.max(e,r)&&o[e].loadError<=o[r].loadError)return e}return this._nextAutoLevel=r,this.nextAutoLevelKey=this.getAutoLevelKey(),r}getAutoLevelKey(){return`${this.getBwEstimate()}_${this.getStarvationDelay().toFixed(2)}`}getNextABRAutoLevel(){let{fragCurrent:e,partCurrent:t,hls:i}=this,{maxAutoLevel:s,config:r,minAutoLevel:o}=i,a=t?t.duration:e?e.duration:0,l=this.getBwEstimate(),c=this.getStarvationDelay(),u=r.abrBandWidthFactor,h=r.abrBandWidthUpFactor;if(c){let y=this.findBestLevel(l,o,s,c,0,u,h);if(y>=0)return y}let d=a?Math.min(a,r.maxStarvationDelay):r.maxStarvationDelay;if(!c){let y=this.bitrateTestDelay;y&&(d=(a?Math.min(a,r.maxLoadingDelay):r.maxLoadingDelay)-y,L.info(`[abr] bitrate test took ${Math.round(1e3*y)}ms, set first fragment max fetchDuration to ${Math.round(1e3*d)} ms`),u=h=1)}let f=this.findBestLevel(l,o,s,c,d,u,h);if(L.info(`[abr] ${c?"rebuffering expected":"buffer is empty"}, optimal quality level ${f}`),f>-1)return f;let g=i.levels[o],m=i.levels[i.loadLevel];return(g==null?void 0:g.bitrate)<(m==null?void 0:m.bitrate)?o:i.loadLevel}getStarvationDelay(){let e=this.hls,t=e.media;if(!t)return 1/0;let i=t&&t.playbackRate!==0?Math.abs(t.playbackRate):1,s=e.mainForwardBufferInfo;return(s?s.len:0)/i}getBwEstimate(){return this.bwEstimator.canEstimate()?this.bwEstimator.getEstimate():this.hls.config.abrEwmaDefaultEstimate}findBestLevel(e,t,i,s,r,o,a){var l;let c=s+r,u=this.lastLoadedFragLevel,h=u===-1?this.hls.firstLevel:u,{fragCurrent:d,partCurrent:f}=this,{levels:g,allAudioTracks:m,loadLevel:y,config:T}=this.hls;if(g.length===1)return 0;let v=g[h],E=!!(v!=null&&(l=v.details)!=null&&l.live),S=y===-1||u===-1,x,A="SDR",b=(v==null?void 0:v.frameRate)||0,{audioPreference:C,videoPreference:_}=T,D=this.audioTracksByGroup||(this.audioTracksByGroup=Eu(m));if(S){if(this.firstSelection!==-1)return this.firstSelection;let U=this.codecTiers||(this.codecTiers=vu(g,D,t,i)),N=xu(U,A,e,C,_),{codecSet:K,videoRanges:X,minFramerate:F,minBitrate:O,preferHDR:q}=N;x=K,A=q?X[X.length-1]:X[0],b=F,e=Math.max(e,O),L.log(`[abr] picked start tier ${JSON.stringify(N)}`)}else x=v==null?void 0:v.codecSet,A=v==null?void 0:v.videoRange;let w=f?f.duration:d?d.duration:0,B=this.bwEstimator.getEstimateTTFB()/1e3,P=[];for(let U=i;U>=t;U--){var $;let N=g[U],K=U>h;if(!N)continue;if(T.useMediaCapabilities&&!N.supportedResult&&!N.supportedPromise){let Z=navigator.mediaCapabilities;typeof(Z==null?void 0:Z.decodingInfo)=="function"&&gu(N,D,A,b,e,C)?(N.supportedPromise=mu(N,D,Z),N.supportedPromise.then(ee=>{if(!this.hls)return;N.supportedResult=ee;let re=this.hls.levels,Te=re.indexOf(N);ee.error?L.warn(`[abr] MediaCapabilities decodingInfo error: "${ee.error}" for level ${Te} ${JSON.stringify(ee)}`):ee.supported||(L.warn(`[abr] Unsupported MediaCapabilities decodingInfo result for level ${Te} ${JSON.stringify(ee)}`),Te>-1&&re.length>1&&(L.log(`[abr] Removing unsupported level ${Te}`),this.hls.removeLevel(Te)))})):N.supportedResult=va}if(x&&N.codecSet!==x||A&&N.videoRange!==A||K&&b>N.frameRate||!K&&b>0&&b<N.frameRate||N.supportedResult&&!(($=N.supportedResult.decodingInfoResults)!=null&&$[0].smooth)){P.push(U);continue}let X=N.details,F=(f?X==null?void 0:X.partTarget:X==null?void 0:X.averagetargetduration)||w,O;K?O=a*e:O=o*e;let q=w&&s>=w*2&&r===0?g[U].averageBitrate:g[U].maxBitrate,W=this.getTimeToLoadFrag(B,O,q*F,X===void 0);if(O>=q&&(U===u||N.loadError===0&&N.fragmentError===0)&&(W<=B||!M(W)||E&&!this.bitrateTestDelay||W<c)){let Z=this.forcedAutoLevel;return U!==y&&(Z===-1||Z!==y)&&(P.length&&L.trace(`[abr] Skipped level(s) ${P.join(",")} of ${i} max with CODECS and VIDEO-RANGE:"${g[P[0]].codecs}" ${g[P[0]].videoRange}; not compatible with "${v.codecs}" ${A}`),L.info(`[abr] switch candidate:${h}->${U} adjustedbw(${Math.round(O)})-bitrate=${Math.round(O-q)} ttfb:${B.toFixed(1)} avgDuration:${F.toFixed(1)} maxFetchDuration:${c.toFixed(1)} fetchDuration:${W.toFixed(1)} firstSelection:${S} codecSet:${x} videoRange:${A} hls.loadLevel:${y}`)),S&&(this.firstSelection=U),U}}return-1}set nextAutoLevel(e){let{maxAutoLevel:t,minAutoLevel:i}=this.hls,s=Math.min(Math.max(e,i),t);this._nextAutoLevel!==s&&(this.nextAutoLevelKey="",this._nextAutoLevel=s)}},gr=class{constructor(){this._boundTick=void 0,this._tickTimer=null,this._tickInterval=null,this._tickCallCount=0,this._boundTick=this.tick.bind(this)}destroy(){this.onHandlerDestroying(),this.onHandlerDestroyed()}onHandlerDestroying(){this.clearNextTick(),this.clearInterval()}onHandlerDestroyed(){}hasInterval(){return!!this._tickInterval}hasNextTick(){return!!this._tickTimer}setInterval(e){return this._tickInterval?!1:(this._tickCallCount=0,this._tickInterval=self.setInterval(this._boundTick,e),!0)}clearInterval(){return this._tickInterval?(self.clearInterval(this._tickInterval),this._tickInterval=null,!0):!1}clearNextTick(){return this._tickTimer?(self.clearTimeout(this._tickTimer),this._tickTimer=null,!0):!1}tick(){this._tickCallCount++,this._tickCallCount===1&&(this.doTick(),this._tickCallCount>1&&this.tickImmediate(),this._tickCallCount=0)}tickImmediate(){this.clearNextTick(),this._tickTimer=self.setTimeout(this._boundTick,0)}doTick(){}},pe={NOT_LOADED:"NOT_LOADED",APPENDING:"APPENDING",PARTIAL:"PARTIAL",OK:"OK"},mr=class{constructor(e){this.activePartLists=Object.create(null),this.endListFragments=Object.create(null),this.fragments=Object.create(null),this.timeRanges=Object.create(null),this.bufferPadding=.2,this.hls=void 0,this.hasGaps=!1,this.hls=e,this._registerListeners()}_registerListeners(){let{hls:e}=this;e.on(p.BUFFER_APPENDED,this.onBufferAppended,this),e.on(p.FRAG_BUFFERED,this.onFragBuffered,this),e.on(p.FRAG_LOADED,this.onFragLoaded,this)}_unregisterListeners(){let{hls:e}=this;e.off(p.BUFFER_APPENDED,this.onBufferAppended,this),e.off(p.FRAG_BUFFERED,this.onFragBuffered,this),e.off(p.FRAG_LOADED,this.onFragLoaded,this)}destroy(){this._unregisterListeners(),this.fragments=this.activePartLists=this.endListFragments=this.timeRanges=null}getAppendedFrag(e,t){let i=this.activePartLists[t];if(i)for(let s=i.length;s--;){let r=i[s];if(!r)break;let o=r.end;if(r.start<=e&&o!==null&&e<=o)return r}return this.getBufferedFrag(e,t)}getBufferedFrag(e,t){let{fragments:i}=this,s=Object.keys(i);for(let r=s.length;r--;){let o=i[s[r]];if((o==null?void 0:o.body.type)===t&&o.buffered){let a=o.body;if(a.start<=e&&e<=a.end)return a}}return null}detectEvictedFragments(e,t,i,s){this.timeRanges&&(this.timeRanges[e]=t);let r=(s==null?void 0:s.fragment.sn)||-1;Object.keys(this.fragments).forEach(o=>{let a=this.fragments[o];if(!a||r>=a.body.sn)return;if(!a.buffered&&!a.loaded){a.body.type===i&&this.removeFragment(a.body);return}let l=a.range[e];l&&l.time.some(c=>{let u=!this.isTimeBuffered(c.startPTS,c.endPTS,t);return u&&this.removeFragment(a.body),u})})}detectPartialFragments(e){let t=this.timeRanges,{frag:i,part:s}=e;if(!t||i.sn==="initSegment")return;let r=Ot(i),o=this.fragments[r];if(!o||o.buffered&&i.gap)return;let a=!i.relurl;Object.keys(t).forEach(l=>{let c=i.elementaryStreams[l];if(!c)return;let u=t[l],h=a||c.partial===!0;o.range[l]=this.getBufferedTimes(i,s,h,u)}),o.loaded=null,Object.keys(o.range).length?(o.buffered=!0,(o.body.endList=i.endList||o.body.endList)&&(this.endListFragments[o.body.type]=o),Ri(o)||this.removeParts(i.sn-1,i.type)):this.removeFragment(o.body)}removeParts(e,t){let i=this.activePartLists[t];i&&(this.activePartLists[t]=i.filter(s=>s.fragment.sn>=e))}fragBuffered(e,t){let i=Ot(e),s=this.fragments[i];!s&&t&&(s=this.fragments[i]={body:e,appendedPTS:null,loaded:null,buffered:!1,range:Object.create(null)},e.gap&&(this.hasGaps=!0)),s&&(s.loaded=null,s.buffered=!0)}getBufferedTimes(e,t,i,s){let r={time:[],partial:i},o=e.start,a=e.end,l=e.minEndPTS||a,c=e.maxStartPTS||o;for(let u=0;u<s.length;u++){let h=s.start(u)-this.bufferPadding,d=s.end(u)+this.bufferPadding;if(c>=h&&l<=d){r.time.push({startPTS:Math.max(o,s.start(u)),endPTS:Math.min(a,s.end(u))});break}else if(o<d&&a>h){let f=Math.max(o,s.start(u)),g=Math.min(a,s.end(u));g>f&&(r.partial=!0,r.time.push({startPTS:f,endPTS:g}))}else if(a<=h)break}return r}getPartialFragment(e){let t=null,i,s,r,o=0,{bufferPadding:a,fragments:l}=this;return Object.keys(l).forEach(c=>{let u=l[c];u&&Ri(u)&&(s=u.body.start-a,r=u.body.end+a,e>=s&&e<=r&&(i=Math.min(e-s,r-e),o<=i&&(t=u.body,o=i)))}),t}isEndListAppended(e){let t=this.endListFragments[e];return t!==void 0&&(t.buffered||Ri(t))}getState(e){let t=Ot(e),i=this.fragments[t];return i?i.buffered?Ri(i)?pe.PARTIAL:pe.OK:pe.APPENDING:pe.NOT_LOADED}isTimeBuffered(e,t,i){let s,r;for(let o=0;o<i.length;o++){if(s=i.start(o)-this.bufferPadding,r=i.end(o)+this.bufferPadding,e>=s&&t<=r)return!0;if(t<=s)return!1}return!1}onFragLoaded(e,t){let{frag:i,part:s}=t;if(i.sn==="initSegment"||i.bitrateTest)return;let r=s?null:t,o=Ot(i);this.fragments[o]={body:i,appendedPTS:null,loaded:r,buffered:!1,range:Object.create(null)}}onBufferAppended(e,t){let{frag:i,part:s,timeRanges:r}=t;if(i.sn==="initSegment")return;let o=i.type;if(s){let a=this.activePartLists[o];a||(this.activePartLists[o]=a=[]),a.push(s)}this.timeRanges=r,Object.keys(r).forEach(a=>{let l=r[a];this.detectEvictedFragments(a,l,o,s)})}onFragBuffered(e,t){this.detectPartialFragments(t)}hasFragment(e){let t=Ot(e);return!!this.fragments[t]}hasParts(e){var t;return!!((t=this.activePartLists[e])!=null&&t.length)}removeFragmentsInRange(e,t,i,s,r){s&&!this.hasGaps||Object.keys(this.fragments).forEach(o=>{let a=this.fragments[o];if(!a)return;let l=a.body;l.type!==i||s&&!l.gap||l.start<t&&l.end>e&&(a.buffered||r)&&this.removeFragment(l)})}removeFragment(e){let t=Ot(e);e.stats.loaded=0,e.clearElementaryStreamInfo();let i=this.activePartLists[e.type];if(i){let s=e.sn;this.activePartLists[e.type]=i.filter(r=>r.fragment.sn!==s)}delete this.fragments[t],e.endList&&delete this.endListFragments[e.type]}removeAllFragments(){this.fragments=Object.create(null),this.endListFragments=Object.create(null),this.activePartLists=Object.create(null),this.hasGaps=!1}};function Ri(n){var e,t,i;return n.buffered&&(n.body.gap||((e=n.range.video)==null?void 0:e.partial)||((t=n.range.audio)==null?void 0:t.partial)||((i=n.range.audiovideo)==null?void 0:i.partial))}function Ot(n){return`${n.type}_${n.level}_${n.sn}`}var Lu={length:0,start:()=>0,end:()=>0},J=class{static isBuffered(e,t){try{if(e){let i=J.getBuffered(e);for(let s=0;s<i.length;s++)if(t>=i.start(s)&&t<=i.end(s))return!0}}catch(i){}return!1}static bufferInfo(e,t,i){try{if(e){let s=J.getBuffered(e),r=[],o;for(o=0;o<s.length;o++)r.push({start:s.start(o),end:s.end(o)});return this.bufferedInfo(r,t,i)}}catch(s){}return{len:0,start:t,end:t,nextStart:void 0}}static bufferedInfo(e,t,i){t=Math.max(0,t),e.sort(function(c,u){let h=c.start-u.start;return h||u.end-c.end});let s=[];if(i)for(let c=0;c<e.length;c++){let u=s.length;if(u){let h=s[u-1].end;e[c].start-h<i?e[c].end>h&&(s[u-1].end=e[c].end):s.push(e[c])}else s.push(e[c])}else s=e;let r=0,o,a=t,l=t;for(let c=0;c<s.length;c++){let u=s[c].start,h=s[c].end;if(t+i>=u&&t<h)a=u,l=h,r=l-t;else if(t+i<u){o=u;break}}return{len:r,start:a||0,end:l||0,nextStart:o}}static getBuffered(e){try{return e.buffered}catch(t){return L.log("failed to get media.buffered",t),Lu}}},oi=class{constructor(e,t,i,s=0,r=-1,o=!1){this.level=void 0,this.sn=void 0,this.part=void 0,this.id=void 0,this.size=void 0,this.partial=void 0,this.transmuxing=Ii(),this.buffering={audio:Ii(),video:Ii(),audiovideo:Ii()},this.level=e,this.sn=t,this.id=i,this.size=s,this.part=r,this.partial=o}};function Ii(){return{start:0,executeStart:0,executeEnd:0,end:0}}function Fi(n,e){for(let i=0,s=n.length;i<s;i++){var t;if(((t=n[i])==null?void 0:t.cc)===e)return n[i]}return null}function bu(n,e,t){return!!(e&&(t.endCC>t.startCC||n&&n.cc<t.startCC))}function Ru(n,e){let t=n.fragments,i=e.fragments;if(!i.length||!t.length){L.log("No fragments to align");return}let s=Fi(t,i[0].cc);if(!s||s&&!s.startPTS){L.log("No frag in previous level to align on");return}return s}function Po(n,e){if(n){let t=n.start+e;n.start=n.startPTS=t,n.endPTS=t+n.duration}}function Sa(n,e){let t=e.fragments;for(let i=0,s=t.length;i<s;i++)Po(t[i],n);e.fragmentHint&&Po(e.fragmentHint,n),e.alignedSliding=!0}function Iu(n,e,t){e&&(Du(n,t,e),!t.alignedSliding&&e&&Qi(t,e),!t.alignedSliding&&e&&!t.skippedSegments&&ya(e,t))}function Du(n,e,t){if(bu(n,t,e)){let i=Ru(t,e);i&&M(i.start)&&(L.log(`Adjusting PTS using last level due to CC increase within current level ${e.url}`),Sa(i.start,e))}}function Qi(n,e){if(!n.hasProgramDateTime||!e.hasProgramDateTime)return;let t=n.fragments,i=e.fragments;if(!t.length||!i.length)return;let s,r,o=Math.min(e.endCC,n.endCC);e.startCC<o&&n.startCC<o&&(s=Fi(i,o),r=Fi(t,o)),(!s||!r)&&(s=i[Math.floor(i.length/2)],r=Fi(t,s.cc)||t[Math.floor(t.length/2)]);let a=s.programDateTime,l=r.programDateTime;if(!a||!l)return;let c=(l-a)/1e3-(r.start-s.start);Sa(c,n)}var Oo=Math.pow(2,17),pr=class{constructor(e){this.config=void 0,this.loader=null,this.partLoadTimeout=-1,this.config=e}destroy(){this.loader&&(this.loader.destroy(),this.loader=null)}abort(){this.loader&&this.loader.abort()}load(e,t){let i=e.url;if(!i)return Promise.reject(new Be({type:V.NETWORK_ERROR,details:I.FRAG_LOAD_ERROR,fatal:!1,frag:e,error:new Error(`Fragment does not have a ${i?"part list":"url"}`),networkDetails:null}));this.abort();let s=this.config,r=s.fLoader,o=s.loader;return new Promise((a,l)=>{if(this.loader&&this.loader.destroy(),e.gap)if(e.tagList.some(f=>f[0]==="GAP")){l(Mo(e));return}else e.gap=!1;let c=this.loader=e.loader=r?new r(s):new o(s),u=Fo(e),h=wo(s.fragLoadPolicy.default),d={loadPolicy:h,timeout:h.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0,highWaterMark:e.sn==="initSegment"?1/0:Oo};e.stats=c.stats,c.load(u,d,{onSuccess:(f,g,m,y)=>{this.resetLoader(e,c);let T=f.data;m.resetIV&&e.decryptdata&&(e.decryptdata.iv=new Uint8Array(T.slice(0,16)),T=T.slice(16)),a({frag:e,part:null,payload:T,networkDetails:y})},onError:(f,g,m,y)=>{this.resetLoader(e,c),l(new Be({type:V.NETWORK_ERROR,details:I.FRAG_LOAD_ERROR,fatal:!1,frag:e,response:ye({url:i,data:void 0},f),error:new Error(`HTTP Error ${f.code} ${f.text}`),networkDetails:m,stats:y}))},onAbort:(f,g,m)=>{this.resetLoader(e,c),l(new Be({type:V.NETWORK_ERROR,details:I.INTERNAL_ABORTED,fatal:!1,frag:e,error:new Error("Aborted"),networkDetails:m,stats:f}))},onTimeout:(f,g,m)=>{this.resetLoader(e,c),l(new Be({type:V.NETWORK_ERROR,details:I.FRAG_LOAD_TIMEOUT,fatal:!1,frag:e,error:new Error(`Timeout after ${d.timeout}ms`),networkDetails:m,stats:f}))},onProgress:(f,g,m,y)=>{t&&t({frag:e,part:null,payload:m,networkDetails:y})}})})}loadPart(e,t,i){this.abort();let s=this.config,r=s.fLoader,o=s.loader;return new Promise((a,l)=>{if(this.loader&&this.loader.destroy(),e.gap||t.gap){l(Mo(e,t));return}let c=this.loader=e.loader=r?new r(s):new o(s),u=Fo(e,t),h=wo(s.fragLoadPolicy.default),d={loadPolicy:h,timeout:h.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0,highWaterMark:Oo};t.stats=c.stats,c.load(u,d,{onSuccess:(f,g,m,y)=>{this.resetLoader(e,c),this.updateStatsFromPart(e,t);let T={frag:e,part:t,payload:f.data,networkDetails:y};i(T),a(T)},onError:(f,g,m,y)=>{this.resetLoader(e,c),l(new Be({type:V.NETWORK_ERROR,details:I.FRAG_LOAD_ERROR,fatal:!1,frag:e,part:t,response:ye({url:u.url,data:void 0},f),error:new Error(`HTTP Error ${f.code} ${f.text}`),networkDetails:m,stats:y}))},onAbort:(f,g,m)=>{e.stats.aborted=t.stats.aborted,this.resetLoader(e,c),l(new Be({type:V.NETWORK_ERROR,details:I.INTERNAL_ABORTED,fatal:!1,frag:e,part:t,error:new Error("Aborted"),networkDetails:m,stats:f}))},onTimeout:(f,g,m)=>{this.resetLoader(e,c),l(new Be({type:V.NETWORK_ERROR,details:I.FRAG_LOAD_TIMEOUT,fatal:!1,frag:e,part:t,error:new Error(`Timeout after ${d.timeout}ms`),networkDetails:m,stats:f}))}})})}updateStatsFromPart(e,t){let i=e.stats,s=t.stats,r=s.total;if(i.loaded+=s.loaded,r){let l=Math.round(e.duration/t.duration),c=Math.min(Math.round(i.loaded/r),l),h=(l-c)*Math.round(i.loaded/c);i.total=i.loaded+h}else i.total=Math.max(i.loaded,i.total);let o=i.loading,a=s.loading;o.start?o.first+=a.first-a.start:(o.start=a.start,o.first=a.first),o.end=a.end}resetLoader(e,t){e.loader=null,this.loader===t&&(self.clearTimeout(this.partLoadTimeout),this.loader=null),t.destroy()}};function Fo(n,e=null){let t=e||n,i={frag:n,part:e,responseType:"arraybuffer",url:t.url,headers:{},rangeStart:0,rangeEnd:0},s=t.byteRangeStartOffset,r=t.byteRangeEndOffset;if(M(s)&&M(r)){var o;let a=s,l=r;if(n.sn==="initSegment"&&((o=n.decryptdata)==null?void 0:o.method)==="AES-128"){let c=r-s;c%16&&(l=r+(16-c%16)),s!==0&&(i.resetIV=!0,a=s-16)}i.rangeStart=a,i.rangeEnd=l}return i}function Mo(n,e){let t=new Error(`GAP ${n.gap?"tag":"attribute"} found`),i={type:V.MEDIA_ERROR,details:I.FRAG_GAP,fatal:!1,frag:n,error:t,networkDetails:null};return e&&(i.part=e),(e||n).stats.aborted=!0,new Be(i)}var Be=class extends Error{constructor(e){super(e.error.message),this.data=void 0,this.data=e}},yr=class{constructor(e,t){this.subtle=void 0,this.aesIV=void 0,this.subtle=e,this.aesIV=t}decrypt(e,t){return this.subtle.decrypt({name:"AES-CBC",iv:this.aesIV},t,e)}},Tr=class{constructor(e,t){this.subtle=void 0,this.key=void 0,this.subtle=e,this.key=t}expandKey(){return this.subtle.importKey("raw",this.key,{name:"AES-CBC"},!1,["encrypt","decrypt"])}};function Cu(n){let e=n.byteLength,t=e&&new DataView(n.buffer).getUint8(e-1);return t?Lt(n,0,e-t):n}var xr=class{constructor(){this.rcon=[0,1,2,4,8,16,32,64,128,27,54],this.subMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.invSubMix=[new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)],this.sBox=new Uint32Array(256),this.invSBox=new Uint32Array(256),this.key=new Uint32Array(0),this.ksRows=0,this.keySize=0,this.keySchedule=void 0,this.invKeySchedule=void 0,this.initTable()}uint8ArrayToUint32Array_(e){let t=new DataView(e),i=new Uint32Array(4);for(let s=0;s<4;s++)i[s]=t.getUint32(s*4);return i}initTable(){let e=this.sBox,t=this.invSBox,i=this.subMix,s=i[0],r=i[1],o=i[2],a=i[3],l=this.invSubMix,c=l[0],u=l[1],h=l[2],d=l[3],f=new Uint32Array(256),g=0,m=0,y=0;for(y=0;y<256;y++)y<128?f[y]=y<<1:f[y]=y<<1^283;for(y=0;y<256;y++){let T=m^m<<1^m<<2^m<<3^m<<4;T=T>>>8^T&255^99,e[g]=T,t[T]=g;let v=f[g],E=f[v],S=f[E],x=f[T]*257^T*16843008;s[g]=x<<24|x>>>8,r[g]=x<<16|x>>>16,o[g]=x<<8|x>>>24,a[g]=x,x=S*16843009^E*65537^v*257^g*16843008,c[T]=x<<24|x>>>8,u[T]=x<<16|x>>>16,h[T]=x<<8|x>>>24,d[T]=x,g?(g=v^f[f[f[S^v]]],m^=f[f[m]]):g=m=1}}expandKey(e){let t=this.uint8ArrayToUint32Array_(e),i=!0,s=0;for(;s<t.length&&i;)i=t[s]===this.key[s],s++;if(i)return;this.key=t;let r=this.keySize=t.length;if(r!==4&&r!==6&&r!==8)throw new Error("Invalid aes key size="+r);let o=this.ksRows=(r+6+1)*4,a,l,c=this.keySchedule=new Uint32Array(o),u=this.invKeySchedule=new Uint32Array(o),h=this.sBox,d=this.rcon,f=this.invSubMix,g=f[0],m=f[1],y=f[2],T=f[3],v,E;for(a=0;a<o;a++){if(a<r){v=c[a]=t[a];continue}E=v,a%r===0?(E=E<<8|E>>>24,E=h[E>>>24]<<24|h[E>>>16&255]<<16|h[E>>>8&255]<<8|h[E&255],E^=d[a/r|0]<<24):r>6&&a%r===4&&(E=h[E>>>24]<<24|h[E>>>16&255]<<16|h[E>>>8&255]<<8|h[E&255]),c[a]=v=(c[a-r]^E)>>>0}for(l=0;l<o;l++)a=o-l,l&3?E=c[a]:E=c[a-4],l<4||a<=4?u[l]=E:u[l]=g[h[E>>>24]]^m[h[E>>>16&255]]^y[h[E>>>8&255]]^T[h[E&255]],u[l]=u[l]>>>0}networkToHostOrderSwap(e){return e<<24|(e&65280)<<8|(e&16711680)>>8|e>>>24}decrypt(e,t,i){let s=this.keySize+6,r=this.invKeySchedule,o=this.invSBox,a=this.invSubMix,l=a[0],c=a[1],u=a[2],h=a[3],d=this.uint8ArrayToUint32Array_(i),f=d[0],g=d[1],m=d[2],y=d[3],T=new Int32Array(e),v=new Int32Array(T.length),E,S,x,A,b,C,_,D,w,B,P,$,U,N,K=this.networkToHostOrderSwap;for(;t<T.length;){for(w=K(T[t]),B=K(T[t+1]),P=K(T[t+2]),$=K(T[t+3]),b=w^r[0],C=$^r[1],_=P^r[2],D=B^r[3],U=4,N=1;N<s;N++)E=l[b>>>24]^c[C>>16&255]^u[_>>8&255]^h[D&255]^r[U],S=l[C>>>24]^c[_>>16&255]^u[D>>8&255]^h[b&255]^r[U+1],x=l[_>>>24]^c[D>>16&255]^u[b>>8&255]^h[C&255]^r[U+2],A=l[D>>>24]^c[b>>16&255]^u[C>>8&255]^h[_&255]^r[U+3],b=E,C=S,_=x,D=A,U=U+4;E=o[b>>>24]<<24^o[C>>16&255]<<16^o[_>>8&255]<<8^o[D&255]^r[U],S=o[C>>>24]<<24^o[_>>16&255]<<16^o[D>>8&255]<<8^o[b&255]^r[U+1],x=o[_>>>24]<<24^o[D>>16&255]<<16^o[b>>8&255]<<8^o[C&255]^r[U+2],A=o[D>>>24]<<24^o[b>>16&255]<<16^o[C>>8&255]<<8^o[_&255]^r[U+3],v[t]=K(E^f),v[t+1]=K(A^g),v[t+2]=K(x^m),v[t+3]=K(S^y),f=w,g=B,m=P,y=$,t=t+4}return v.buffer}},wu=16,ai=class{constructor(e,{removePKCS7Padding:t=!0}={}){if(this.logEnabled=!0,this.removePKCS7Padding=void 0,this.subtle=null,this.softwareDecrypter=null,this.key=null,this.fastAesKey=null,this.remainderData=null,this.currentIV=null,this.currentResult=null,this.useSoftware=void 0,this.useSoftware=e.enableSoftwareAES,this.removePKCS7Padding=t,t)try{let i=self.crypto;i&&(this.subtle=i.subtle||i.webkitSubtle)}catch(i){}this.useSoftware=!this.subtle}destroy(){this.subtle=null,this.softwareDecrypter=null,this.key=null,this.fastAesKey=null,this.remainderData=null,this.currentIV=null,this.currentResult=null}isSync(){return this.useSoftware}flush(){let{currentResult:e,remainderData:t}=this;if(!e||t)return this.reset(),null;let i=new Uint8Array(e);return this.reset(),this.removePKCS7Padding?Cu(i):i}reset(){this.currentResult=null,this.currentIV=null,this.remainderData=null,this.softwareDecrypter&&(this.softwareDecrypter=null)}decrypt(e,t,i){return this.useSoftware?new Promise((s,r)=>{this.softwareDecrypt(new Uint8Array(e),t,i);let o=this.flush();o?s(o.buffer):r(new Error("[softwareDecrypt] Failed to decrypt data"))}):this.webCryptoDecrypt(new Uint8Array(e),t,i)}softwareDecrypt(e,t,i){let{currentIV:s,currentResult:r,remainderData:o}=this;this.logOnce("JS AES decrypt"),o&&(e=_e(o,e),this.remainderData=null);let a=this.getValidChunk(e);if(!a.length)return null;s&&(i=s);let l=this.softwareDecrypter;l||(l=this.softwareDecrypter=new xr),l.expandKey(t);let c=r;return this.currentResult=l.decrypt(a.buffer,0,i),this.currentIV=Lt(a,-16).buffer,c||null}webCryptoDecrypt(e,t,i){if(this.key!==t||!this.fastAesKey){if(!this.subtle)return Promise.resolve(this.onWebCryptoError(e,t,i));this.key=t,this.fastAesKey=new Tr(this.subtle,t)}return this.fastAesKey.expandKey().then(s=>this.subtle?(this.logOnce("WebCrypto AES decrypt"),new yr(this.subtle,new Uint8Array(i)).decrypt(e.buffer,s)):Promise.reject(new Error("web crypto not initialized"))).catch(s=>(L.warn(`[decrypter]: WebCrypto Error, disable WebCrypto API, ${s.name}: ${s.message}`),this.onWebCryptoError(e,t,i)))}onWebCryptoError(e,t,i){this.useSoftware=!0,this.logEnabled=!0,this.softwareDecrypt(e,t,i);let s=this.flush();if(s)return s.buffer;throw new Error("WebCrypto and softwareDecrypt: failed to decrypt data")}getValidChunk(e){let t=e,i=e.length-e.length%wu;return i!==e.length&&(t=Lt(e,0,i),this.remainderData=Lt(e,i)),t}logOnce(e){this.logEnabled&&(L.log(`[decrypter]: ${e}`),this.logEnabled=!1)}},ku={toString:function(n){let e="",t=n.length;for(let i=0;i<t;i++)e+=`[${n.start(i).toFixed(3)}-${n.end(i).toFixed(3)}]`;return e}},k={STOPPED:"STOPPED",IDLE:"IDLE",KEY_LOADING:"KEY_LOADING",FRAG_LOADING:"FRAG_LOADING",FRAG_LOADING_WAITING_RETRY:"FRAG_LOADING_WAITING_RETRY",WAITING_TRACK:"WAITING_TRACK",PARSING:"PARSING",PARSED:"PARSED",ENDED:"ENDED",ERROR:"ERROR",WAITING_INIT_PTS:"WAITING_INIT_PTS",WAITING_LEVEL:"WAITING_LEVEL"},li=class extends gr{constructor(e,t,i,s,r){super(),this.hls=void 0,this.fragPrevious=null,this.fragCurrent=null,this.fragmentTracker=void 0,this.transmuxer=null,this._state=k.STOPPED,this.playlistType=void 0,this.media=null,this.mediaBuffer=null,this.config=void 0,this.bitrateTest=!1,this.lastCurrentTime=0,this.nextLoadPosition=0,this.startPosition=0,this.startTimeOffset=null,this.loadedmetadata=!1,this.retryDate=0,this.levels=null,this.fragmentLoader=void 0,this.keyLoader=void 0,this.levelLastLoaded=null,this.startFragRequested=!1,this.decrypter=void 0,this.initPTS=[],this.onvseeking=null,this.onvended=null,this.logPrefix="",this.log=void 0,this.warn=void 0,this.playlistType=r,this.logPrefix=s,this.log=L.log.bind(L,`${s}:`),this.warn=L.warn.bind(L,`${s}:`),this.hls=e,this.fragmentLoader=new pr(e.config),this.keyLoader=i,this.fragmentTracker=t,this.config=e.config,this.decrypter=new ai(e.config),e.on(p.MANIFEST_LOADED,this.onManifestLoaded,this)}doTick(){this.onTickEnd()}onTickEnd(){}startLoad(e){}stopLoad(){this.fragmentLoader.abort(),this.keyLoader.abort(this.playlistType);let e=this.fragCurrent;e!=null&&e.loader&&(e.abortRequests(),this.fragmentTracker.removeFragment(e)),this.resetTransmuxer(),this.fragCurrent=null,this.fragPrevious=null,this.clearInterval(),this.clearNextTick(),this.state=k.STOPPED}_streamEnded(e,t){if(t.live||e.nextStart||!e.end||!this.media)return!1;let i=t.partList;if(i!=null&&i.length){let r=i[i.length-1];return J.isBuffered(this.media,r.start+r.duration/2)}let s=t.fragments[t.fragments.length-1].type;return this.fragmentTracker.isEndListAppended(s)}getLevelDetails(){if(this.levels&&this.levelLastLoaded!==null){var e;return(e=this.levelLastLoaded)==null?void 0:e.details}}onMediaAttached(e,t){let i=this.media=this.mediaBuffer=t.media;this.onvseeking=this.onMediaSeeking.bind(this),this.onvended=this.onMediaEnded.bind(this),i.addEventListener("seeking",this.onvseeking),i.addEventListener("ended",this.onvended);let s=this.config;this.levels&&s.autoStartLoad&&this.state===k.STOPPED&&this.startLoad(s.startPosition)}onMediaDetaching(){let e=this.media;e!=null&&e.ended&&(this.log("MSE detaching and video ended, reset startPosition"),this.startPosition=this.lastCurrentTime=0),e&&this.onvseeking&&this.onvended&&(e.removeEventListener("seeking",this.onvseeking),e.removeEventListener("ended",this.onvended),this.onvseeking=this.onvended=null),this.keyLoader&&this.keyLoader.detach(),this.media=this.mediaBuffer=null,this.loadedmetadata=!1,this.fragmentTracker.removeAllFragments(),this.stopLoad()}onMediaSeeking(){let{config:e,fragCurrent:t,media:i,mediaBuffer:s,state:r}=this,o=i?i.currentTime:0,a=J.bufferInfo(s||i,o,e.maxBufferHole);if(this.log(`media seeking to ${M(o)?o.toFixed(3):o}, state: ${r}`),this.state===k.ENDED)this.resetLoadingState();else if(t){let l=e.maxFragLookUpTolerance,c=t.start-l,u=t.start+t.duration+l;if(!a.len||u<a.start||c>a.end){let h=o>u;(o<c||h)&&(h&&t.loader&&(this.log("seeking outside of buffer while fragment load in progress, cancel fragment load"),t.abortRequests(),this.resetLoadingState()),this.fragPrevious=null)}}i&&(this.fragmentTracker.removeFragmentsInRange(o,1/0,this.playlistType,!0),this.lastCurrentTime=o),!this.loadedmetadata&&!a.len&&(this.nextLoadPosition=this.startPosition=o),this.tickImmediate()}onMediaEnded(){this.startPosition=this.lastCurrentTime=0}onManifestLoaded(e,t){this.startTimeOffset=t.startTimeOffset,this.initPTS=[]}onHandlerDestroying(){this.hls.off(p.MANIFEST_LOADED,this.onManifestLoaded,this),this.stopLoad(),super.onHandlerDestroying(),this.hls=null}onHandlerDestroyed(){this.state=k.STOPPED,this.fragmentLoader&&this.fragmentLoader.destroy(),this.keyLoader&&this.keyLoader.destroy(),this.decrypter&&this.decrypter.destroy(),this.hls=this.log=this.warn=this.decrypter=this.keyLoader=this.fragmentLoader=this.fragmentTracker=null,super.onHandlerDestroyed()}loadFragment(e,t,i){this._loadFragForPlayback(e,t,i)}_loadFragForPlayback(e,t,i){let s=r=>{if(this.fragContextChanged(e)){this.warn(`Fragment ${e.sn}${r.part?" p: "+r.part.index:""} of level ${e.level} was dropped during download.`),this.fragmentTracker.removeFragment(e);return}e.stats.chunkCount++,this._handleFragmentLoadProgress(r)};this._doFragLoad(e,t,i,s).then(r=>{if(!r)return;let o=this.state;if(this.fragContextChanged(e)){(o===k.FRAG_LOADING||!this.fragCurrent&&o===k.PARSING)&&(this.fragmentTracker.removeFragment(e),this.state=k.IDLE);return}"payload"in r&&(this.log(`Loaded fragment ${e.sn} of level ${e.level}`),this.hls.trigger(p.FRAG_LOADED,r)),this._handleFragmentLoadComplete(r)}).catch(r=>{this.state===k.STOPPED||this.state===k.ERROR||(this.warn(`Frag error: ${(r==null?void 0:r.message)||r}`),this.resetFragmentLoading(e))})}clearTrackerIfNeeded(e){var t;let{fragmentTracker:i}=this;if(i.getState(e)===pe.APPENDING){let r=e.type,o=this.getFwdBufferInfo(this.mediaBuffer,r),a=Math.max(e.duration,o?o.len:this.config.maxBufferLength),l=this.backtrackFragment;((l?e.sn-l.sn:0)===1||this.reduceMaxBufferLength(a,e.duration))&&i.removeFragment(e)}else((t=this.mediaBuffer)==null?void 0:t.buffered.length)===0?i.removeAllFragments():i.hasParts(e.type)&&(i.detectPartialFragments({frag:e,part:null,stats:e.stats,id:e.type}),i.getState(e)===pe.PARTIAL&&i.removeFragment(e))}checkLiveUpdate(e){if(e.updated&&!e.live){let t=e.fragments[e.fragments.length-1];this.fragmentTracker.detectPartialFragments({frag:t,part:null,stats:t.stats,id:t.type})}e.fragments[0]||(e.deltaUpdateFailed=!0)}flushMainBuffer(e,t,i=null){if(!(e-t))return;let s={startOffset:e,endOffset:t,type:i};this.hls.trigger(p.BUFFER_FLUSHING,s)}_loadInitSegment(e,t){this._doFragLoad(e,t).then(i=>{if(!i||this.fragContextChanged(e)||!this.levels)throw new Error("init load aborted");return i}).then(i=>{let{hls:s}=this,{payload:r}=i,o=e.decryptdata;if(r&&r.byteLength>0&&o!=null&&o.key&&o.iv&&o.method==="AES-128"){let a=self.performance.now();return this.decrypter.decrypt(new Uint8Array(r),o.key.buffer,o.iv.buffer).catch(l=>{throw s.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_DECRYPT_ERROR,fatal:!1,error:l,reason:l.message,frag:e}),l}).then(l=>{let c=self.performance.now();return s.trigger(p.FRAG_DECRYPTED,{frag:e,payload:l,stats:{tstart:a,tdecrypt:c}}),i.payload=l,this.completeInitSegmentLoad(i)})}return this.completeInitSegmentLoad(i)}).catch(i=>{this.state===k.STOPPED||this.state===k.ERROR||(this.warn(i),this.resetFragmentLoading(e))})}completeInitSegmentLoad(e){let{levels:t}=this;if(!t)throw new Error("init load aborted, missing levels");let i=e.frag.stats;this.state=k.IDLE,e.frag.data=new Uint8Array(e.payload),i.parsing.start=i.buffering.start=self.performance.now(),i.parsing.end=i.buffering.end=self.performance.now(),this.tick()}fragContextChanged(e){let{fragCurrent:t}=this;return!e||!t||e.sn!==t.sn||e.level!==t.level}fragBufferedComplete(e,t){var i,s,r,o;let a=this.mediaBuffer?this.mediaBuffer:this.media;if(this.log(`Buffered ${e.type} sn: ${e.sn}${t?" part: "+t.index:""} of ${this.playlistType===H.MAIN?"level":"track"} ${e.level} (frag:[${((i=e.startPTS)!=null?i:NaN).toFixed(3)}-${((s=e.endPTS)!=null?s:NaN).toFixed(3)}] > buffer:${a?ku.toString(J.getBuffered(a)):"(detached)"})`),e.sn!=="initSegment"){var l;if(e.type!==H.SUBTITLE){let u=e.elementaryStreams;if(!Object.keys(u).some(h=>!!u[h])){this.state=k.IDLE;return}}let c=(l=this.levels)==null?void 0:l[e.level];c!=null&&c.fragmentError&&(this.log(`Resetting level fragment error count of ${c.fragmentError} on frag buffered`),c.fragmentError=0)}this.state=k.IDLE,a&&(!this.loadedmetadata&&e.type==H.MAIN&&a.buffered.length&&((r=this.fragCurrent)==null?void 0:r.sn)===((o=this.fragPrevious)==null?void 0:o.sn)&&(this.loadedmetadata=!0,this.seekToStartPos()),this.tick())}seekToStartPos(){}_handleFragmentLoadComplete(e){let{transmuxer:t}=this;if(!t)return;let{frag:i,part:s,partsLoaded:r}=e,o=!r||r.length===0||r.some(l=>!l),a=new oi(i.level,i.sn,i.stats.chunkCount+1,0,s?s.index:-1,!o);t.flush(a)}_handleFragmentLoadProgress(e){}_doFragLoad(e,t,i=null,s){var r;let o=t==null?void 0:t.details;if(!this.levels||!o)throw new Error(`frag load aborted, missing level${o?"":" detail"}s`);let a=null;if(e.encrypted&&!((r=e.decryptdata)!=null&&r.key)?(this.log(`Loading key for ${e.sn} of [${o.startSN}-${o.endSN}], ${this.logPrefix==="[stream-controller]"?"level":"track"} ${e.level}`),this.state=k.KEY_LOADING,this.fragCurrent=e,a=this.keyLoader.load(e).then(u=>{if(!this.fragContextChanged(u.frag))return this.hls.trigger(p.KEY_LOADED,u),this.state===k.KEY_LOADING&&(this.state=k.IDLE),u}),this.hls.trigger(p.KEY_LOADING,{frag:e}),this.fragCurrent===null&&(a=Promise.reject(new Error("frag load aborted, context changed in KEY_LOADING")))):!e.encrypted&&o.encryptedFragments.length&&this.keyLoader.loadClear(e,o.encryptedFragments),i=Math.max(e.start,i||0),this.config.lowLatencyMode&&e.sn!=="initSegment"){let u=o.partList;if(u&&s){i>e.end&&o.fragmentHint&&(e=o.fragmentHint);let h=this.getNextPart(u,e,i);if(h>-1){let d=u[h];this.log(`Loading part sn: ${e.sn} p: ${d.index} cc: ${e.cc} of playlist [${o.startSN}-${o.endSN}] parts [0-${h}-${u.length-1}] ${this.logPrefix==="[stream-controller]"?"level":"track"}: ${e.level}, target: ${parseFloat(i.toFixed(3))}`),this.nextLoadPosition=d.start+d.duration,this.state=k.FRAG_LOADING;let f;return a?f=a.then(g=>!g||this.fragContextChanged(g.frag)?null:this.doFragPartsLoad(e,d,t,s)).catch(g=>this.handleFragLoadError(g)):f=this.doFragPartsLoad(e,d,t,s).catch(g=>this.handleFragLoadError(g)),this.hls.trigger(p.FRAG_LOADING,{frag:e,part:d,targetBufferTime:i}),this.fragCurrent===null?Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING parts")):f}else if(!e.url||this.loadedEndOfParts(u,i))return Promise.resolve(null)}}this.log(`Loading fragment ${e.sn} cc: ${e.cc} ${o?"of ["+o.startSN+"-"+o.endSN+"] ":""}${this.logPrefix==="[stream-controller]"?"level":"track"}: ${e.level}, target: ${parseFloat(i.toFixed(3))}`),M(e.sn)&&!this.bitrateTest&&(this.nextLoadPosition=e.start+e.duration),this.state=k.FRAG_LOADING;let l=this.config.progressive,c;return l&&a?c=a.then(u=>!u||this.fragContextChanged(u==null?void 0:u.frag)?null:this.fragmentLoader.load(e,s)).catch(u=>this.handleFragLoadError(u)):c=Promise.all([this.fragmentLoader.load(e,l?s:void 0),a]).then(([u])=>(!l&&u&&s&&s(u),u)).catch(u=>this.handleFragLoadError(u)),this.hls.trigger(p.FRAG_LOADING,{frag:e,targetBufferTime:i}),this.fragCurrent===null?Promise.reject(new Error("frag load aborted, context changed in FRAG_LOADING")):c}doFragPartsLoad(e,t,i,s){return new Promise((r,o)=>{var a;let l=[],c=(a=i.details)==null?void 0:a.partList,u=h=>{this.fragmentLoader.loadPart(e,h,s).then(d=>{l[h.index]=d;let f=d.part;this.hls.trigger(p.FRAG_LOADED,d);let g=Do(i,e.sn,h.index+1)||Ta(c,e.sn,h.index+1);if(g)u(g);else return r({frag:e,part:f,partsLoaded:l})}).catch(o)};u(t)})}handleFragLoadError(e){if("data"in e){let t=e.data;e.data&&t.details===I.INTERNAL_ABORTED?this.handleFragLoadAborted(t.frag,t.part):this.hls.trigger(p.ERROR,t)}else this.hls.trigger(p.ERROR,{type:V.OTHER_ERROR,details:I.INTERNAL_EXCEPTION,err:e,error:e,fatal:!0});return null}_handleTransmuxerFlush(e){let t=this.getCurrentContext(e);if(!t||this.state!==k.PARSING){!this.fragCurrent&&this.state!==k.STOPPED&&this.state!==k.ERROR&&(this.state=k.IDLE);return}let{frag:i,part:s,level:r}=t,o=self.performance.now();i.stats.parsing.end=o,s&&(s.stats.parsing.end=o),this.updateLevelTiming(i,s,r,e.partial)}getCurrentContext(e){let{levels:t,fragCurrent:i}=this,{level:s,sn:r,part:o}=e;if(!(t!=null&&t[s]))return this.warn(`Levels object was unset while buffering fragment ${r} of level ${s}. The current chunk will not be buffered.`),null;let a=t[s],l=o>-1?Do(a,r,o):null,c=l?l.fragment:lu(a,r,i);return c?(i&&i!==c&&(c.stats=i.stats),{frag:c,part:l,level:a}):null}bufferFragmentData(e,t,i,s,r){var o;if(!e||this.state!==k.PARSING)return;let{data1:a,data2:l}=e,c=a;if(a&&l&&(c=_e(a,l)),!((o=c)!=null&&o.length))return;let u={type:e.type,frag:t,part:i,chunkMeta:s,parent:t.type,data:c};if(this.hls.trigger(p.BUFFER_APPENDING,u),e.dropped&&e.independent&&!i){if(r)return;this.flushBufferGap(t)}}flushBufferGap(e){let t=this.media;if(!t)return;if(!J.isBuffered(t,t.currentTime)){this.flushMainBuffer(0,e.start);return}let i=t.currentTime,s=J.bufferInfo(t,i,0),r=e.duration,o=Math.min(this.config.maxFragLookUpTolerance*2,r*.25),a=Math.max(Math.min(e.start-o,s.end-o),i+o);e.start-a>o&&this.flushMainBuffer(a,e.start)}getFwdBufferInfo(e,t){let i=this.getLoadPosition();return M(i)?this.getFwdBufferInfoAtPos(e,i,t):null}getFwdBufferInfoAtPos(e,t,i){let{config:{maxBufferHole:s}}=this,r=J.bufferInfo(e,t,s);if(r.len===0&&r.nextStart!==void 0){let o=this.fragmentTracker.getBufferedFrag(t,i);if(o&&r.nextStart<o.end)return J.bufferInfo(e,t,Math.max(r.nextStart,s))}return r}getMaxBufferLength(e){let{config:t}=this,i;return e?i=Math.max(8*t.maxBufferSize/e,t.maxBufferLength):i=t.maxBufferLength,Math.min(i,t.maxMaxBufferLength)}reduceMaxBufferLength(e,t){let i=this.config,s=Math.max(Math.min(e-t,i.maxBufferLength),t),r=Math.max(e-t*3,i.maxMaxBufferLength/2,s);return r>=s?(i.maxMaxBufferLength=r,this.warn(`Reduce max buffer length to ${r}s`),!0):!1}getAppendedFrag(e,t=H.MAIN){let i=this.fragmentTracker.getAppendedFrag(e,H.MAIN);return i&&"fragment"in i?i.fragment:i}getNextFragment(e,t){let i=t.fragments,s=i.length;if(!s)return null;let{config:r}=this,o=i[0].start,a;if(t.live){let l=r.initialLiveManifestSize;if(s<l)return this.warn(`Not enough fragments to start playback (have: ${s}, need: ${l})`),null;(!t.PTSKnown&&!this.startFragRequested&&this.startPosition===-1||e<o)&&(a=this.getInitialLiveFragment(t,i),this.startPosition=this.nextLoadPosition=a?this.hls.liveSyncPosition||a.start:e)}else e<=o&&(a=i[0]);if(!a){let l=r.lowLatencyMode?t.partEnd:t.fragmentEnd;a=this.getFragmentAtPosition(e,l,t)}return this.mapToInitFragWhenRequired(a)}isLoopLoading(e,t){let i=this.fragmentTracker.getState(e);return(i===pe.OK||i===pe.PARTIAL&&!!e.gap)&&this.nextLoadPosition>t}getNextFragmentLoopLoading(e,t,i,s,r){let o=e.gap,a=this.getNextFragment(this.nextLoadPosition,t);if(a===null)return a;if(e=a,o&&e&&!e.gap&&i.nextStart){let l=this.getFwdBufferInfoAtPos(this.mediaBuffer?this.mediaBuffer:this.media,i.nextStart,s);if(l!==null&&i.len+l.len>=r)return this.log(`buffer full after gaps in "${s}" playlist starting at sn: ${e.sn}`),null}return e}mapToInitFragWhenRequired(e){return e!=null&&e.initSegment&&!(e!=null&&e.initSegment.data)&&!this.bitrateTest?e.initSegment:e}getNextPart(e,t,i){let s=-1,r=!1,o=!0;for(let a=0,l=e.length;a<l;a++){let c=e[a];if(o=o&&!c.independent,s>-1&&i<c.start)break;let u=c.loaded;u?s=-1:(r||c.independent||o)&&c.fragment===t&&(s=a),r=u}return s}loadedEndOfParts(e,t){let i=e[e.length-1];return i&&t>i.start&&i.loaded}getInitialLiveFragment(e,t){let i=this.fragPrevious,s=null;if(i){if(e.hasProgramDateTime&&(this.log(`Live playlist, switching playlist, load frag with same PDT: ${i.programDateTime}`),s=uu(t,i.endProgramDateTime,this.config.maxFragLookUpTolerance)),!s){let r=i.sn+1;if(r>=e.startSN&&r<=e.endSN){let o=t[r-e.startSN];i.cc===o.cc&&(s=o,this.log(`Live playlist, switching playlist, load frag with next SN: ${s.sn}`))}s||(s=fu(t,i.cc),s&&this.log(`Live playlist, switching playlist, load frag with same CC: ${s.sn}`))}}else{let r=this.hls.liveSyncPosition;r!==null&&(s=this.getFragmentAtPosition(r,this.bitrateTest?e.fragmentEnd:e.edge,e))}return s}getFragmentAtPosition(e,t,i){let{config:s}=this,{fragPrevious:r}=this,{fragments:o,endSN:a}=i,{fragmentHint:l}=i,{maxFragLookUpTolerance:c}=s,u=i.partList,h=!!(s.lowLatencyMode&&u!=null&&u.length&&l);h&&l&&!this.bitrateTest&&(o=o.concat(l),a=l.sn);let d;if(e<t){let f=e>t-c?0:c;d=Xi(r,o,e,f)}else d=o[o.length-1];if(d){let f=d.sn-i.startSN,g=this.fragmentTracker.getState(d);if((g===pe.OK||g===pe.PARTIAL&&d.gap)&&(r=d),r&&d.sn===r.sn&&(!h||u[0].fragment.sn>d.sn)&&r&&d.level===r.level){let y=o[f+1];d.sn<a&&this.fragmentTracker.getState(y)!==pe.OK?d=y:d=null}}return d}synchronizeToLiveEdge(e){let{config:t,media:i}=this;if(!i)return;let s=this.hls.liveSyncPosition,r=i.currentTime,o=e.fragments[0].start,a=e.edge,l=r>=o-t.maxFragLookUpTolerance&&r<=a;if(s!==null&&i.duration>s&&(r<s||!l)){let c=t.liveMaxLatencyDuration!==void 0?t.liveMaxLatencyDuration:t.liveMaxLatencyDurationCount*e.targetduration;(!l&&i.readyState<4||r<a-c)&&(this.loadedmetadata||(this.nextLoadPosition=s),i.readyState&&(this.warn(`Playback: ${r.toFixed(3)} is located too far from the end of live sliding playlist: ${a}, reset currentTime to : ${s.toFixed(3)}`),i.currentTime=s))}}alignPlaylists(e,t,i){let s=e.fragments.length;if(!s)return this.warn("No fragments in live playlist"),0;let r=e.fragments[0].start,o=!t,a=e.alignedSliding&&M(r);if(o||!a&&!r){let{fragPrevious:l}=this;Iu(l,i,e);let c=e.fragments[0].start;return this.log(`Live playlist sliding: ${c.toFixed(2)} start-sn: ${t?t.startSN:"na"}->${e.startSN} prev-sn: ${l?l.sn:"na"} fragments: ${s}`),c}return r}waitForCdnTuneIn(e){return e.live&&e.canBlockReload&&e.partTarget&&e.tuneInGoal>Math.max(e.partHoldBack,e.partTarget*3)}setStartPosition(e,t){let i=this.startPosition;if(i<t&&(i=-1),i===-1||this.lastCurrentTime===-1){let s=this.startTimeOffset!==null,r=s?this.startTimeOffset:e.startTimeOffset;r!==null&&M(r)?(i=t+r,r<0&&(i+=e.totalduration),i=Math.min(Math.max(t,i),t+e.totalduration),this.log(`Start time offset ${r} found in ${s?"multivariant":"media"} playlist, adjust startPosition to ${i}`),this.startPosition=i):e.live?i=this.hls.liveSyncPosition||t:this.startPosition=i=0,this.lastCurrentTime=i}this.nextLoadPosition=i}getLoadPosition(){let{media:e}=this,t=0;return this.loadedmetadata&&e?t=e.currentTime:this.nextLoadPosition&&(t=this.nextLoadPosition),t}handleFragLoadAborted(e,t){this.transmuxer&&e.sn!=="initSegment"&&e.stats.aborted&&(this.warn(`Fragment ${e.sn}${t?" part "+t.index:""} of level ${e.level} was aborted`),this.resetFragmentLoading(e))}resetFragmentLoading(e){(!this.fragCurrent||!this.fragContextChanged(e)&&this.state!==k.FRAG_LOADING_WAITING_RETRY)&&(this.state=k.IDLE)}onFragmentOrKeyLoadError(e,t){if(t.chunkMeta&&!t.frag){let u=this.getCurrentContext(t.chunkMeta);u&&(t.frag=u.frag)}let i=t.frag;if(!i||i.type!==e||!this.levels)return;if(this.fragContextChanged(i)){var s;this.warn(`Frag load error must match current frag to retry ${i.url} > ${(s=this.fragCurrent)==null?void 0:s.url}`);return}let r=t.details===I.FRAG_GAP;r&&this.fragmentTracker.fragBuffered(i,!0);let o=t.errorAction,{action:a,retryCount:l=0,retryConfig:c}=o||{};if(o&&a===me.RetryRequest&&c){this.resetStartWhenNotLoaded(this.levelLastLoaded);let u=un(c,l);this.warn(`Fragment ${i.sn} of ${e} ${i.level} errored with ${t.details}, retrying loading ${l+1}/${c.maxNumRetry} in ${u}ms`),o.resolved=!0,this.retryDate=self.performance.now()+u,this.state=k.FRAG_LOADING_WAITING_RETRY}else if(c&&o)if(this.resetFragmentErrors(e),l<c.maxNumRetry)!r&&a!==me.RemoveAlternatePermanently&&(o.resolved=!0);else{L.warn(`${t.details} reached or exceeded max retry (${l})`);return}else(o==null?void 0:o.action)===me.SendAlternateToPenaltyBox?this.state=k.WAITING_LEVEL:this.state=k.ERROR;this.tickImmediate()}reduceLengthAndFlushBuffer(e){if(this.state===k.PARSING||this.state===k.PARSED){let t=e.frag,i=e.parent,s=this.getFwdBufferInfo(this.mediaBuffer,i),r=s&&s.len>.5;r&&this.reduceMaxBufferLength(s.len,(t==null?void 0:t.duration)||10);let o=!r;return o&&this.warn(`Buffer full error while media.currentTime is not buffered, flush ${i} buffer`),t&&(this.fragmentTracker.removeFragment(t),this.nextLoadPosition=t.start),this.resetLoadingState(),o}return!1}resetFragmentErrors(e){e===H.AUDIO&&(this.fragCurrent=null),this.loadedmetadata||(this.startFragRequested=!1),this.state!==k.STOPPED&&(this.state=k.IDLE)}afterBufferFlushed(e,t,i){if(!e)return;let s=J.getBuffered(e);this.fragmentTracker.detectEvictedFragments(t,s,i),this.state===k.ENDED&&this.resetLoadingState()}resetLoadingState(){this.log("Reset loading state"),this.fragCurrent=null,this.fragPrevious=null,this.state=k.IDLE}resetStartWhenNotLoaded(e){if(!this.loadedmetadata){this.startFragRequested=!1;let t=e?e.details:null;t!=null&&t.live?(this.startPosition=-1,this.setStartPosition(t,0),this.resetLoadingState()):this.nextLoadPosition=this.startPosition}}resetWhenMissingContext(e){this.warn(`The loading context changed while buffering fragment ${e.sn} of level ${e.level}. This chunk will not be buffered.`),this.removeUnbufferedFrags(),this.resetStartWhenNotLoaded(this.levelLastLoaded),this.resetLoadingState()}removeUnbufferedFrags(e=0){this.fragmentTracker.removeFragmentsInRange(e,1/0,this.playlistType,!1,!0)}updateLevelTiming(e,t,i,s){var r;let o=i.details;if(!o){this.warn("level.details undefined");return}if(!Object.keys(e.elementaryStreams).reduce((l,c)=>{let u=e.elementaryStreams[c];if(u){let h=u.endPTS-u.startPTS;if(h<=0)return this.warn(`Could not parse fragment ${e.sn} ${c} duration reliably (${h})`),l||!1;let d=s?0:pa(o,e,u.startPTS,u.endPTS,u.startDTS,u.endDTS);return this.hls.trigger(p.LEVEL_PTS_UPDATED,{details:o,level:i,drift:d,type:c,frag:e,start:u.startPTS,end:u.endPTS}),!0}return l},!1)&&((r=this.transmuxer)==null?void 0:r.error)===null){let l=new Error(`Found no media in fragment ${e.sn} of level ${e.level} resetting transmuxer to fallback to playlist timing`);if(i.fragmentError===0&&(i.fragmentError++,e.gap=!0,this.fragmentTracker.removeFragment(e),this.fragmentTracker.fragBuffered(e,!0)),this.warn(l.message),this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_PARSING_ERROR,fatal:!1,error:l,frag:e,reason:`Found no media in msn ${e.sn} of level "${i.url}"`}),!this.hls)return;this.resetTransmuxer()}this.state=k.PARSED,this.hls.trigger(p.FRAG_PARSED,{frag:e,part:t})}resetTransmuxer(){this.transmuxer&&(this.transmuxer.destroy(),this.transmuxer=null)}recoverWorkerError(e){e.event==="demuxerWorker"&&(this.fragmentTracker.removeAllFragments(),this.resetTransmuxer(),this.resetStartWhenNotLoaded(this.levelLastLoaded),this.resetLoadingState())}set state(e){let t=this._state;t!==e&&(this._state=e,this.log(`${t}->${e}`))}get state(){return this._state}},Ji=class{constructor(){this.chunks=[],this.dataLength=0}push(e){this.chunks.push(e),this.dataLength+=e.length}flush(){let{chunks:e,dataLength:t}=this,i;if(e.length)e.length===1?i=e[0]:i=_u(e,t);else return new Uint8Array(0);return this.reset(),i}reset(){this.chunks.length=0,this.dataLength=0}};function _u(n,e){let t=new Uint8Array(e),i=0;for(let s=0;s<n.length;s++){let r=n[s];t.set(r,i),i+=r.length}return t}function Pu(){return typeof __HLS_WORKER_BUNDLE__=="function"}function Ou(){let n=new self.Blob([`var exports={};var module={exports:exports};function define(f){f()};define.amd=true;(${__HLS_WORKER_BUNDLE__.toString()})(true);`],{type:"text/javascript"}),e=self.URL.createObjectURL(n);return{worker:new self.Worker(e),objectURL:e}}function Fu(n){let e=new self.URL(n,self.location.href).href;return{worker:new self.Worker(e),scriptURL:e}}function Ve(n="",e=9e4){return{type:n,id:-1,pid:-1,inputTimeScale:e,sequenceNumber:-1,samples:[],dropped:0}}var ci=class{constructor(){this._audioTrack=void 0,this._id3Track=void 0,this.frameIndex=0,this.cachedData=null,this.basePTS=null,this.initPTS=null,this.lastPTS=null}resetInitSegment(e,t,i,s){this._id3Track={type:"id3",id:3,pid:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],dropped:0}}resetTimeStamp(e){this.initPTS=e,this.resetContiguity()}resetContiguity(){this.basePTS=null,this.lastPTS=null,this.frameIndex=0}canParse(e,t){return!1}appendFrame(e,t,i){}demux(e,t){this.cachedData&&(e=_e(this.cachedData,e),this.cachedData=null);let i=si(e,0),s=i?i.length:0,r,o=this._audioTrack,a=this._id3Track,l=i?cn(i):void 0,c=e.length;for((this.basePTS===null||this.frameIndex===0&&M(l))&&(this.basePTS=Mu(l,t,this.initPTS),this.lastPTS=this.basePTS),this.lastPTS===null&&(this.lastPTS=this.basePTS),i&&i.length>0&&a.samples.push({pts:this.lastPTS,dts:this.lastPTS,data:i,type:Ue.audioId3,duration:Number.POSITIVE_INFINITY});s<c;){if(this.canParse(e,s)){let u=this.appendFrame(o,e,s);u?(this.frameIndex++,this.lastPTS=u.sample.pts,s+=u.length,r=s):s=c}else pc(e,s)?(i=si(e,s),a.samples.push({pts:this.lastPTS,dts:this.lastPTS,data:i,type:Ue.audioId3,duration:Number.POSITIVE_INFINITY}),s+=i.length,r=s):s++;if(s===c&&r!==c){let u=Lt(e,r);this.cachedData?this.cachedData=_e(this.cachedData,u):this.cachedData=u}}return{audioTrack:o,videoTrack:Ve(),id3Track:a,textTrack:Ve()}}demuxSampleAes(e,t,i){return Promise.reject(new Error(`[${this}] This demuxer does not support Sample-AES decryption`))}flush(e){let t=this.cachedData;return t&&(this.cachedData=null,this.demux(t,0)),{audioTrack:this._audioTrack,videoTrack:Ve(),id3Track:this._id3Track,textTrack:Ve()}}destroy(){}},Mu=(n,e,t)=>{if(M(n))return n*90;let i=t?t.baseTime*9e4/t.timescale:0;return e*9e4+i};function Nu(n,e,t,i){let s,r,o,a,l=navigator.userAgent.toLowerCase(),c=i,u=[96e3,88200,64e3,48e3,44100,32e3,24e3,22050,16e3,12e3,11025,8e3,7350];s=((e[t+2]&192)>>>6)+1;let h=(e[t+2]&60)>>>2;if(h>u.length-1){let d=new Error(`invalid ADTS sampling index:${h}`);n.emit(p.ERROR,p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_PARSING_ERROR,fatal:!0,error:d,reason:d.message});return}return o=(e[t+2]&1)<<2,o|=(e[t+3]&192)>>>6,L.log(`manifest codec:${i}, ADTS type:${s}, samplingIndex:${h}`),/firefox/i.test(l)?h>=6?(s=5,a=new Array(4),r=h-3):(s=2,a=new Array(2),r=h):l.indexOf("android")!==-1?(s=2,a=new Array(2),r=h):(s=5,a=new Array(4),i&&(i.indexOf("mp4a.40.29")!==-1||i.indexOf("mp4a.40.5")!==-1)||!i&&h>=6?r=h-3:((i&&i.indexOf("mp4a.40.2")!==-1&&(h>=6&&o===1||/vivaldi/i.test(l))||!i&&o===1)&&(s=2,a=new Array(2)),r=h)),a[0]=s<<3,a[0]|=(h&14)>>1,a[1]|=(h&1)<<7,a[1]|=o<<3,s===5&&(a[1]|=(r&14)>>1,a[2]=(r&1)<<7,a[2]|=2<<2,a[3]=0),{config:a,samplerate:u[h],channelCount:o,codec:"mp4a.40."+s,manifestCodec:c}}function Aa(n,e){return n[e]===255&&(n[e+1]&246)===240}function La(n,e){return n[e+1]&1?7:9}function hn(n,e){return(n[e+3]&3)<<11|n[e+4]<<3|(n[e+5]&224)>>>5}function Bu(n,e){return e+5<n.length}function Zi(n,e){return e+1<n.length&&Aa(n,e)}function Uu(n,e){return Bu(n,e)&&Aa(n,e)&&hn(n,e)<=n.length-e}function $u(n,e){if(Zi(n,e)){let t=La(n,e);if(e+t>=n.length)return!1;let i=hn(n,e);if(i<=t)return!1;let s=e+i;return s===n.length||Zi(n,s)}return!1}function ba(n,e,t,i,s){if(!n.samplerate){let r=Nu(e,t,i,s);if(!r)return;n.config=r.config,n.samplerate=r.samplerate,n.channelCount=r.channelCount,n.codec=r.codec,n.manifestCodec=r.manifestCodec,L.log(`parsed codec:${n.codec}, rate:${r.samplerate}, channels:${r.channelCount}`)}}function Ra(n){return 1024*9e4/n}function Gu(n,e){let t=La(n,e);if(e+t<=n.length){let i=hn(n,e)-t;if(i>0)return{headerLength:t,frameLength:i}}}function Ia(n,e,t,i,s){let r=Ra(n.samplerate),o=i+s*r,a=Gu(e,t),l;if(a){let{frameLength:h,headerLength:d}=a,f=d+h,g=Math.max(0,t+f-e.length);g?(l=new Uint8Array(f-d),l.set(e.subarray(t+d,e.length),0)):l=e.subarray(t+d,t+f);let m={unit:l,pts:o};return g||n.samples.push(m),{sample:m,length:f,missing:g}}let c=e.length-t;return l=new Uint8Array(c),l.set(e.subarray(t,e.length),0),{sample:{unit:l,pts:o},length:c,missing:-1}}var Di=null,Hu=[32,64,96,128,160,192,224,256,288,320,352,384,416,448,32,48,56,64,80,96,112,128,160,192,224,256,320,384,32,40,48,56,64,80,96,112,128,160,192,224,256,320,32,48,56,64,80,96,112,128,144,160,176,192,224,256,8,16,24,32,40,48,56,64,80,96,112,128,144,160],Vu=[44100,48e3,32e3,22050,24e3,16e3,11025,12e3,8e3],Ku=[[0,72,144,12],[0,0,0,0],[0,72,144,12],[0,144,144,12]],Wu=[0,1,1,4];function Da(n,e,t,i,s){if(t+24>e.length)return;let r=Ca(e,t);if(r&&t+r.frameLength<=e.length){let o=r.samplesPerFrame*9e4/r.sampleRate,a=i+s*o,l={unit:e.subarray(t,t+r.frameLength),pts:a,dts:a};return n.config=[],n.channelCount=r.channelCount,n.samplerate=r.sampleRate,n.samples.push(l),{sample:l,length:r.frameLength,missing:0}}}function Ca(n,e){let t=n[e+1]>>3&3,i=n[e+1]>>1&3,s=n[e+2]>>4&15,r=n[e+2]>>2&3;if(t!==1&&s!==0&&s!==15&&r!==3){let o=n[e+2]>>1&1,a=n[e+3]>>6,l=t===3?3-i:i===3?3:4,c=Hu[l*14+s-1]*1e3,h=Vu[(t===3?0:t===2?1:2)*3+r],d=a===3?1:2,f=Ku[t][i],g=Wu[i],m=f*8*g,y=Math.floor(f*c/h+o)*g;if(Di===null){let E=(navigator.userAgent||"").match(/Chrome\/(\d+)/i);Di=E?parseInt(E[1]):0}return!!Di&&Di<=87&&i===2&&c>=224e3&&a===0&&(n[e+3]=n[e+3]|128),{sampleRate:h,channelCount:d,frameLength:y,samplesPerFrame:m}}}function dn(n,e){return n[e]===255&&(n[e+1]&224)===224&&(n[e+1]&6)!==0}function wa(n,e){return e+1<n.length&&dn(n,e)}function Yu(n,e){return dn(n,e)&&4<=n.length-e}function ka(n,e){if(e+1<n.length&&dn(n,e)){let i=Ca(n,e),s=4;i!=null&&i.frameLength&&(s=i.frameLength);let r=e+s;return r===n.length||wa(n,r)}return!1}var Er=class extends ci{constructor(e,t){super(),this.observer=void 0,this.config=void 0,this.observer=e,this.config=t}resetInitSegment(e,t,i,s){super.resetInitSegment(e,t,i,s),this._audioTrack={container:"audio/adts",type:"audio",id:2,pid:-1,sequenceNumber:0,segmentCodec:"aac",samples:[],manifestCodec:t,duration:s,inputTimeScale:9e4,dropped:0}}static probe(e){if(!e)return!1;let t=si(e,0),i=(t==null?void 0:t.length)||0;if(ka(e,i))return!1;for(let s=e.length;i<s;i++)if($u(e,i))return L.log("ADTS sync word found !"),!0;return!1}canParse(e,t){return Uu(e,t)}appendFrame(e,t,i){ba(e,this.observer,t,i,e.manifestCodec);let s=Ia(e,t,i,this.basePTS,this.frameIndex);if(s&&s.missing===0)return s}},qu=/\/emsg[-/]ID3/i,vr=class{constructor(e,t){this.remainderData=null,this.timeOffset=0,this.config=void 0,this.videoTrack=void 0,this.audioTrack=void 0,this.id3Track=void 0,this.txtTrack=void 0,this.config=t}resetTimeStamp(){}resetInitSegment(e,t,i,s){let r=this.videoTrack=Ve("video",1),o=this.audioTrack=Ve("audio",1),a=this.txtTrack=Ve("text",1);if(this.id3Track=Ve("id3",1),this.timeOffset=0,!(e!=null&&e.byteLength))return;let l=la(e);if(l.video){let{id:c,timescale:u,codec:h}=l.video;r.id=c,r.timescale=a.timescale=u,r.codec=h}if(l.audio){let{id:c,timescale:u,codec:h}=l.audio;o.id=c,o.timescale=u,o.codec=h}a.id=na.text,r.sampleDuration=0,r.duration=o.duration=s}resetContiguity(){this.remainderData=null}static probe(e){return bc(e)}demux(e,t){this.timeOffset=t;let i=e,s=this.videoTrack,r=this.txtTrack;if(this.config.progressive){this.remainderData&&(i=_e(this.remainderData,e));let a=Pc(i);this.remainderData=a.remainder,s.samples=a.valid||new Uint8Array}else s.samples=i;let o=this.extractID3Track(s,t);return r.samples=co(t,s),{videoTrack:s,audioTrack:this.audioTrack,id3Track:o,textTrack:this.txtTrack}}flush(){let e=this.timeOffset,t=this.videoTrack,i=this.txtTrack;t.samples=this.remainderData||new Uint8Array,this.remainderData=null;let s=this.extractID3Track(t,this.timeOffset);return i.samples=co(e,t),{videoTrack:t,audioTrack:Ve(),id3Track:s,textTrack:Ve()}}extractID3Track(e,t){let i=this.id3Track;if(e.samples.length){let s=Y(e.samples,["emsg"]);s&&s.forEach(r=>{let o=Mc(r);if(qu.test(o.schemeIdUri)){let a=M(o.presentationTime)?o.presentationTime/o.timeScale:t+o.presentationTimeDelta/o.timeScale,l=o.eventDuration===4294967295?Number.POSITIVE_INFINITY:o.eventDuration/o.timeScale;l<=.001&&(l=Number.POSITIVE_INFINITY);let c=o.payload;i.samples.push({data:c,len:c.byteLength,dts:a,pts:a,type:Ue.emsg,duration:l})}})}return i}demuxSampleAes(e,t,i){return Promise.reject(new Error("The MP4 demuxer does not support SAMPLE-AES decryption"))}destroy(){}},_a=(n,e)=>{let t=0,i=5;e+=i;let s=new Uint32Array(1),r=new Uint32Array(1),o=new Uint8Array(1);for(;i>0;){o[0]=n[e];let a=Math.min(i,8),l=8-a;r[0]=4278190080>>>24+l<<l,s[0]=(o[0]&r[0])>>l,t=t?t<<a|s[0]:s[0],e+=1,i-=a}return t},Sr=class extends ci{constructor(e){super(),this.observer=void 0,this.observer=e}resetInitSegment(e,t,i,s){super.resetInitSegment(e,t,i,s),this._audioTrack={container:"audio/ac-3",type:"audio",id:2,pid:-1,sequenceNumber:0,segmentCodec:"ac3",samples:[],manifestCodec:t,duration:s,inputTimeScale:9e4,dropped:0}}canParse(e,t){return t+64<e.length}appendFrame(e,t,i){let s=Pa(e,t,i,this.basePTS,this.frameIndex);if(s!==-1)return{sample:e.samples[e.samples.length-1],length:s,missing:0}}static probe(e){if(!e)return!1;let t=si(e,0);if(!t)return!1;let i=t.length;return e[i]===11&&e[i+1]===119&&cn(t)!==void 0&&_a(e,i)<16}};function Pa(n,e,t,i,s){if(t+8>e.length||e[t]!==11||e[t+1]!==119)return-1;let r=e[t+4]>>6;if(r>=3)return-1;let a=[48e3,44100,32e3][r],l=e[t+4]&63,u=[64,69,96,64,70,96,80,87,120,80,88,120,96,104,144,96,105,144,112,121,168,112,122,168,128,139,192,128,140,192,160,174,240,160,175,240,192,208,288,192,209,288,224,243,336,224,244,336,256,278,384,256,279,384,320,348,480,320,349,480,384,417,576,384,418,576,448,487,672,448,488,672,512,557,768,512,558,768,640,696,960,640,697,960,768,835,1152,768,836,1152,896,975,1344,896,976,1344,1024,1114,1536,1024,1115,1536,1152,1253,1728,1152,1254,1728,1280,1393,1920,1280,1394,1920][l*3+r]*2;if(t+u>e.length)return-1;let h=e[t+6]>>5,d=0;h===2?d+=2:(h&1&&h!==1&&(d+=2),h&4&&(d+=2));let f=(e[t+6]<<8|e[t+7])>>12-d&1,m=[2,1,2,3,3,4,4,5][h]+f,y=e[t+5]>>3,T=e[t+5]&7,v=new Uint8Array([r<<6|y<<1|T>>2,(T&3)<<6|h<<3|f<<2|l>>4,l<<4&224]),E=1536/a*9e4,S=i+s*E,x=e.subarray(t,t+u);return n.config=v,n.channelCount=m,n.samplerate=a,n.samples.push({unit:x,pts:S}),u}var Ar=class{constructor(){this.VideoSample=null}createVideoSample(e,t,i,s){return{key:e,frame:!1,pts:t,dts:i,units:[],debug:s,length:0}}getLastNalUnit(e){var t;let i=this.VideoSample,s;if((!i||i.units.length===0)&&(i=e[e.length-1]),(t=i)!=null&&t.units){let r=i.units;s=r[r.length-1]}return s}pushAccessUnit(e,t){if(e.units.length&&e.frame){if(e.pts===void 0){let i=t.samples,s=i.length;if(s){let r=i[s-1];e.pts=r.pts,e.dts=r.dts}else{t.dropped++;return}}t.samples.push(e)}e.debug.length&&L.log(e.pts+"/"+e.dts+":"+e.debug)}},es=class{constructor(e){this.data=void 0,this.bytesAvailable=void 0,this.word=void 0,this.bitsAvailable=void 0,this.data=e,this.bytesAvailable=e.byteLength,this.word=0,this.bitsAvailable=0}loadWord(){let e=this.data,t=this.bytesAvailable,i=e.byteLength-t,s=new Uint8Array(4),r=Math.min(4,t);if(r===0)throw new Error("no bytes available");s.set(e.subarray(i,i+r)),this.word=new DataView(s.buffer).getUint32(0),this.bitsAvailable=r*8,this.bytesAvailable-=r}skipBits(e){let t;e=Math.min(e,this.bytesAvailable*8+this.bitsAvailable),this.bitsAvailable>e?(this.word<<=e,this.bitsAvailable-=e):(e-=this.bitsAvailable,t=e>>3,e-=t<<3,this.bytesAvailable-=t,this.loadWord(),this.word<<=e,this.bitsAvailable-=e)}readBits(e){let t=Math.min(this.bitsAvailable,e),i=this.word>>>32-t;if(e>32&&L.error("Cannot read more than 32 bits at a time"),this.bitsAvailable-=t,this.bitsAvailable>0)this.word<<=t;else if(this.bytesAvailable>0)this.loadWord();else throw new Error("no bits available");return t=e-t,t>0&&this.bitsAvailable?i<<t|this.readBits(t):i}skipLZ(){let e;for(e=0;e<this.bitsAvailable;++e)if(this.word&2147483648>>>e)return this.word<<=e,this.bitsAvailable-=e,e;return this.loadWord(),e+this.skipLZ()}skipUEG(){this.skipBits(1+this.skipLZ())}skipEG(){this.skipBits(1+this.skipLZ())}readUEG(){let e=this.skipLZ();return this.readBits(e+1)-1}readEG(){let e=this.readUEG();return 1&e?1+e>>>1:-1*(e>>>1)}readBoolean(){return this.readBits(1)===1}readUByte(){return this.readBits(8)}readUShort(){return this.readBits(16)}readUInt(){return this.readBits(32)}skipScalingList(e){let t=8,i=8,s;for(let r=0;r<e;r++)i!==0&&(s=this.readEG(),i=(t+s+256)%256),t=i===0?t:i}readSPS(){let e=0,t=0,i=0,s=0,r,o,a,l=this.readUByte.bind(this),c=this.readBits.bind(this),u=this.readUEG.bind(this),h=this.readBoolean.bind(this),d=this.skipBits.bind(this),f=this.skipEG.bind(this),g=this.skipUEG.bind(this),m=this.skipScalingList.bind(this);l();let y=l();if(c(5),d(3),l(),g(),y===100||y===110||y===122||y===244||y===44||y===83||y===86||y===118||y===128){let A=u();if(A===3&&d(1),g(),g(),d(1),h())for(o=A!==3?8:12,a=0;a<o;a++)h()&&(a<6?m(16):m(64))}g();let T=u();if(T===0)u();else if(T===1)for(d(1),f(),f(),r=u(),a=0;a<r;a++)f();g(),d(1);let v=u(),E=u(),S=c(1);S===0&&d(1),d(1),h()&&(e=u(),t=u(),i=u(),s=u());let x=[1,1];if(h()&&h())switch(l()){case 1:x=[1,1];break;case 2:x=[12,11];break;case 3:x=[10,11];break;case 4:x=[16,11];break;case 5:x=[40,33];break;case 6:x=[24,11];break;case 7:x=[20,11];break;case 8:x=[32,11];break;case 9:x=[80,33];break;case 10:x=[18,11];break;case 11:x=[15,11];break;case 12:x=[64,33];break;case 13:x=[160,99];break;case 14:x=[4,3];break;case 15:x=[3,2];break;case 16:x=[2,1];break;case 255:{x=[l()<<8|l(),l()<<8|l()];break}}return{width:Math.ceil((v+1)*16-e*2-t*2),height:(2-S)*(E+1)*16-(S?2:4)*(i+s),pixelRatio:x}}readSliceType(){return this.readUByte(),this.readUEG(),this.readUEG()}},Lr=class extends Ar{parseAVCPES(e,t,i,s,r){let o=this.parseAVCNALu(e,i.data),a=this.VideoSample,l,c=!1;i.data=null,a&&o.length&&!e.audFound&&(this.pushAccessUnit(a,e),a=this.VideoSample=this.createVideoSample(!1,i.pts,i.dts,"")),o.forEach(u=>{var h;switch(u.type){case 1:{let m=!1;l=!0;let y=u.data;if(c&&y.length>4){let T=new es(y).readSliceType();(T===2||T===4||T===7||T===9)&&(m=!0)}if(m){var d;(d=a)!=null&&d.frame&&!a.key&&(this.pushAccessUnit(a,e),a=this.VideoSample=null)}a||(a=this.VideoSample=this.createVideoSample(!0,i.pts,i.dts,"")),a.frame=!0,a.key=m;break}case 5:l=!0,(h=a)!=null&&h.frame&&!a.key&&(this.pushAccessUnit(a,e),a=this.VideoSample=null),a||(a=this.VideoSample=this.createVideoSample(!0,i.pts,i.dts,"")),a.key=!0,a.frame=!0;break;case 6:{l=!0,ua(u.data,1,i.pts,t.samples);break}case 7:{var f,g;l=!0,c=!0;let m=u.data,T=new es(m).readSPS();if(!e.sps||e.width!==T.width||e.height!==T.height||((f=e.pixelRatio)==null?void 0:f[0])!==T.pixelRatio[0]||((g=e.pixelRatio)==null?void 0:g[1])!==T.pixelRatio[1]){e.width=T.width,e.height=T.height,e.pixelRatio=T.pixelRatio,e.sps=[m],e.duration=r;let v=m.subarray(1,4),E="avc1.";for(let S=0;S<3;S++){let x=v[S].toString(16);x.length<2&&(x="0"+x),E+=x}e.codec=E}break}case 8:l=!0,e.pps=[u.data];break;case 9:l=!0,e.audFound=!0,a&&this.pushAccessUnit(a,e),a=this.VideoSample=this.createVideoSample(!1,i.pts,i.dts,"");break;case 12:l=!0;break;default:l=!1,a&&(a.debug+="unknown NAL "+u.type+" ");break}a&&l&&a.units.push(u)}),s&&a&&(this.pushAccessUnit(a,e),this.VideoSample=null)}parseAVCNALu(e,t){let i=t.byteLength,s=e.naluState||0,r=s,o=[],a=0,l,c,u,h=-1,d=0;for(s===-1&&(h=0,d=t[0]&31,s=0,a=1);a<i;){if(l=t[a++],!s){s=l?0:1;continue}if(s===1){s=l?0:2;continue}if(!l)s=3;else if(l===1){if(c=a-s-1,h>=0){let f={data:t.subarray(h,c),type:d};o.push(f)}else{let f=this.getLastNalUnit(e.samples);f&&(r&&a<=4-r&&f.state&&(f.data=f.data.subarray(0,f.data.byteLength-r)),c>0&&(f.data=_e(f.data,t.subarray(0,c)),f.state=0))}a<i?(u=t[a]&31,h=a,d=u,s=0):s=-1}else s=0}if(h>=0&&s>=0){let f={data:t.subarray(h,i),type:d,state:s};o.push(f)}if(o.length===0){let f=this.getLastNalUnit(e.samples);f&&(f.data=_e(f.data,t))}return e.naluState=s,o}},br=class{constructor(e,t,i){this.keyData=void 0,this.decrypter=void 0,this.keyData=i,this.decrypter=new ai(t,{removePKCS7Padding:!1})}decryptBuffer(e){return this.decrypter.decrypt(e,this.keyData.key.buffer,this.keyData.iv.buffer)}decryptAacSample(e,t,i){let s=e[t].unit;if(s.length<=16)return;let r=s.subarray(16,s.length-s.length%16),o=r.buffer.slice(r.byteOffset,r.byteOffset+r.length);this.decryptBuffer(o).then(a=>{let l=new Uint8Array(a);s.set(l,16),this.decrypter.isSync()||this.decryptAacSamples(e,t+1,i)})}decryptAacSamples(e,t,i){for(;;t++){if(t>=e.length){i();return}if(!(e[t].unit.length<32)&&(this.decryptAacSample(e,t,i),!this.decrypter.isSync()))return}}getAvcEncryptedData(e){let t=Math.floor((e.length-48)/160)*16+16,i=new Int8Array(t),s=0;for(let r=32;r<e.length-16;r+=160,s+=16)i.set(e.subarray(r,r+16),s);return i}getAvcDecryptedUnit(e,t){let i=new Uint8Array(t),s=0;for(let r=32;r<e.length-16;r+=160,s+=16)e.set(i.subarray(s,s+16),r);return e}decryptAvcSample(e,t,i,s,r){let o=ha(r.data),a=this.getAvcEncryptedData(o);this.decryptBuffer(a.buffer).then(l=>{r.data=this.getAvcDecryptedUnit(o,l),this.decrypter.isSync()||this.decryptAvcSamples(e,t,i+1,s)})}decryptAvcSamples(e,t,i,s){if(e instanceof Uint8Array)throw new Error("Cannot decrypt samples of type Uint8Array");for(;;t++,i=0){if(t>=e.length){s();return}let r=e[t].units;for(;!(i>=r.length);i++){let o=r[i];if(!(o.data.length<=48||o.type!==1&&o.type!==5)&&(this.decryptAvcSample(e,t,i,s,o),!this.decrypter.isSync()))return}}}},ge=188,Ke=class{constructor(e,t,i){this.observer=void 0,this.config=void 0,this.typeSupported=void 0,this.sampleAes=null,this.pmtParsed=!1,this.audioCodec=void 0,this.videoCodec=void 0,this._duration=0,this._pmtId=-1,this._videoTrack=void 0,this._audioTrack=void 0,this._id3Track=void 0,this._txtTrack=void 0,this.aacOverFlow=null,this.remainderData=null,this.videoParser=void 0,this.observer=e,this.config=t,this.typeSupported=i,this.videoParser=new Lr}static probe(e){let t=Ke.syncOffset(e);return t>0&&L.warn(`MPEG2-TS detected but first sync word found @ offset ${t}`),t!==-1}static syncOffset(e){let t=e.length,i=Math.min(ge*5,t-ge)+1,s=0;for(;s<i;){let r=!1,o=-1,a=0;for(let l=s;l<t;l+=ge)if(e[l]===71&&(t-l===ge||e[l+ge]===71)){if(a++,o===-1&&(o=l,o!==0&&(i=Math.min(o+ge*99,e.length-ge)+1)),r||(r=Rr(e,l)===0),r&&a>1&&(o===0&&a>2||l+ge>i))return o}else{if(a)return-1;break}s++}return-1}static createTrack(e,t){return{container:e==="video"||e==="audio"?"video/mp2t":void 0,type:e,id:na[e],pid:-1,inputTimeScale:9e4,sequenceNumber:0,samples:[],dropped:0,duration:e==="audio"?t:void 0}}resetInitSegment(e,t,i,s){this.pmtParsed=!1,this._pmtId=-1,this._videoTrack=Ke.createTrack("video"),this._audioTrack=Ke.createTrack("audio",s),this._id3Track=Ke.createTrack("id3"),this._txtTrack=Ke.createTrack("text"),this._audioTrack.segmentCodec="aac",this.aacOverFlow=null,this.remainderData=null,this.audioCodec=t,this.videoCodec=i,this._duration=s}resetTimeStamp(){}resetContiguity(){let{_audioTrack:e,_videoTrack:t,_id3Track:i}=this;e&&(e.pesData=null),t&&(t.pesData=null),i&&(i.pesData=null),this.aacOverFlow=null,this.remainderData=null}demux(e,t,i=!1,s=!1){i||(this.sampleAes=null);let r,o=this._videoTrack,a=this._audioTrack,l=this._id3Track,c=this._txtTrack,u=o.pid,h=o.pesData,d=a.pid,f=l.pid,g=a.pesData,m=l.pesData,y=null,T=this.pmtParsed,v=this._pmtId,E=e.length;if(this.remainderData&&(e=_e(this.remainderData,e),E=e.length,this.remainderData=null),E<ge&&!s)return this.remainderData=e,{audioTrack:a,videoTrack:o,id3Track:l,textTrack:c};let S=Math.max(0,Ke.syncOffset(e));E-=(E-S)%ge,E<e.byteLength&&!s&&(this.remainderData=new Uint8Array(e.buffer,E,e.buffer.byteLength-E));let x=0;for(let b=S;b<E;b+=ge)if(e[b]===71){let C=!!(e[b+1]&64),_=Rr(e,b),D=(e[b+3]&48)>>4,w;if(D>1){if(w=b+5+e[b+4],w===b+ge)continue}else w=b+4;switch(_){case u:C&&(h&&(r=Ft(h))&&this.videoParser.parseAVCPES(o,c,r,!1,this._duration),h={data:[],size:0}),h&&(h.data.push(e.subarray(w,b+ge)),h.size+=b+ge-w);break;case d:if(C){if(g&&(r=Ft(g)))switch(a.segmentCodec){case"aac":this.parseAACPES(a,r);break;case"mp3":this.parseMPEGPES(a,r);break;case"ac3":this.parseAC3PES(a,r);break}g={data:[],size:0}}g&&(g.data.push(e.subarray(w,b+ge)),g.size+=b+ge-w);break;case f:C&&(m&&(r=Ft(m))&&this.parseID3PES(l,r),m={data:[],size:0}),m&&(m.data.push(e.subarray(w,b+ge)),m.size+=b+ge-w);break;case 0:C&&(w+=e[w]+1),v=this._pmtId=ju(e,w);break;case v:{C&&(w+=e[w]+1);let B=zu(e,w,this.typeSupported,i,this.observer);u=B.videoPid,u>0&&(o.pid=u,o.segmentCodec=B.segmentVideoCodec),d=B.audioPid,d>0&&(a.pid=d,a.segmentCodec=B.segmentAudioCodec),f=B.id3Pid,f>0&&(l.pid=f),y!==null&&!T&&(L.warn(`MPEG-TS PMT found at ${b} after unknown PID '${y}'. Backtracking to sync byte @${S} to parse all TS packets.`),y=null,b=S-188),T=this.pmtParsed=!0;break}case 17:case 8191:break;default:y=_;break}}else x++;x>0&&ts(this.observer,new Error(`Found ${x} TS packet/s that do not start with 0x47`)),o.pesData=h,a.pesData=g,l.pesData=m;let A={audioTrack:a,videoTrack:o,id3Track:l,textTrack:c};return s&&this.extractRemainingSamples(A),A}flush(){let{remainderData:e}=this;this.remainderData=null;let t;return e?t=this.demux(e,-1,!1,!0):t={videoTrack:this._videoTrack,audioTrack:this._audioTrack,id3Track:this._id3Track,textTrack:this._txtTrack},this.extractRemainingSamples(t),this.sampleAes?this.decrypt(t,this.sampleAes):t}extractRemainingSamples(e){let{audioTrack:t,videoTrack:i,id3Track:s,textTrack:r}=e,o=i.pesData,a=t.pesData,l=s.pesData,c;if(o&&(c=Ft(o))?(this.videoParser.parseAVCPES(i,r,c,!0,this._duration),i.pesData=null):i.pesData=o,a&&(c=Ft(a))){switch(t.segmentCodec){case"aac":this.parseAACPES(t,c);break;case"mp3":this.parseMPEGPES(t,c);break;case"ac3":this.parseAC3PES(t,c);break}t.pesData=null}else a!=null&&a.size&&L.log("last AAC PES packet truncated,might overlap between fragments"),t.pesData=a;l&&(c=Ft(l))?(this.parseID3PES(s,c),s.pesData=null):s.pesData=l}demuxSampleAes(e,t,i){let s=this.demux(e,i,!0,!this.config.progressive),r=this.sampleAes=new br(this.observer,this.config,t);return this.decrypt(s,r)}decrypt(e,t){return new Promise(i=>{let{audioTrack:s,videoTrack:r}=e;s.samples&&s.segmentCodec==="aac"?t.decryptAacSamples(s.samples,0,()=>{r.samples?t.decryptAvcSamples(r.samples,0,0,()=>{i(e)}):i(e)}):r.samples&&t.decryptAvcSamples(r.samples,0,0,()=>{i(e)})})}destroy(){this._duration=0}parseAACPES(e,t){let i=0,s=this.aacOverFlow,r=t.data;if(s){this.aacOverFlow=null;let h=s.missing,d=s.sample.unit.byteLength;if(h===-1)r=_e(s.sample.unit,r);else{let f=d-h;s.sample.unit.set(r.subarray(0,h),f),e.samples.push(s.sample),i=s.missing}}let o,a;for(o=i,a=r.length;o<a-1&&!Zi(r,o);o++);if(o!==i){let h,d=o<a-1;if(d?h=`AAC PES did not start with ADTS header,offset:${o}`:h="No ADTS header found in AAC PES",ts(this.observer,new Error(h),d),!d)return}ba(e,this.observer,r,o,this.audioCodec);let l;if(t.pts!==void 0)l=t.pts;else if(s){let h=Ra(e.samplerate);l=s.sample.pts+h}else{L.warn("[tsdemuxer]: AAC PES unknown PTS");return}let c=0,u;for(;o<a;)if(u=Ia(e,r,o,l,c),o+=u.length,u.missing){this.aacOverFlow=u;break}else for(c++;o<a-1&&!Zi(r,o);o++);}parseMPEGPES(e,t){let i=t.data,s=i.length,r=0,o=0,a=t.pts;if(a===void 0){L.warn("[tsdemuxer]: MPEG PES unknown PTS");return}for(;o<s;)if(wa(i,o)){let l=Da(e,i,o,a,r);if(l)o+=l.length,r++;else break}else o++}parseAC3PES(e,t){{let i=t.data,s=t.pts;if(s===void 0){L.warn("[tsdemuxer]: AC3 PES unknown PTS");return}let r=i.length,o=0,a=0,l;for(;a<r&&(l=Pa(e,i,a,s,o++))>0;)a+=l}}parseID3PES(e,t){if(t.pts===void 0){L.warn("[tsdemuxer]: ID3 PES unknown PTS");return}let i=le({},t,{type:this._videoTrack?Ue.emsg:Ue.audioId3,duration:Number.POSITIVE_INFINITY});e.samples.push(i)}};function Rr(n,e){return((n[e+1]&31)<<8)+n[e+2]}function ju(n,e){return(n[e+10]&31)<<8|n[e+11]}function zu(n,e,t,i,s){let r={audioPid:-1,videoPid:-1,id3Pid:-1,segmentVideoCodec:"avc",segmentAudioCodec:"aac"},o=(n[e+1]&15)<<8|n[e+2],a=e+3+o-4,l=(n[e+10]&15)<<8|n[e+11];for(e+=12+l;e<a;){let c=Rr(n,e),u=(n[e+3]&15)<<8|n[e+4];switch(n[e]){case 207:if(!i){Hs("ADTS AAC");break}case 15:r.audioPid===-1&&(r.audioPid=c);break;case 21:r.id3Pid===-1&&(r.id3Pid=c);break;case 219:if(!i){Hs("H.264");break}case 27:r.videoPid===-1&&(r.videoPid=c,r.segmentVideoCodec="avc");break;case 3:case 4:!t.mpeg&&!t.mp3?L.log("MPEG audio found, not supported in this browser"):r.audioPid===-1&&(r.audioPid=c,r.segmentAudioCodec="mp3");break;case 193:if(!i){Hs("AC-3");break}case 129:t.ac3?r.audioPid===-1&&(r.audioPid=c,r.segmentAudioCodec="ac3"):L.log("AC-3 audio found, not supported in this browser");break;case 6:if(r.audioPid===-1&&u>0){let h=e+5,d=u;for(;d>2;){switch(n[h]){case 106:t.ac3!==!0?L.log("AC-3 audio found, not supported in this browser for now"):(r.audioPid=c,r.segmentAudioCodec="ac3");break}let g=n[h+1]+2;h+=g,d-=g}}break;case 194:case 135:return ts(s,new Error("Unsupported EC-3 in M2TS found")),r;case 36:return ts(s,new Error("Unsupported HEVC in M2TS found")),r}e+=u+5}return r}function ts(n,e,t){L.warn(`parsing error: ${e.message}`),n.emit(p.ERROR,p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_PARSING_ERROR,fatal:!1,levelRetry:t,error:e,reason:e.message})}function Hs(n){L.log(`${n} with AES-128-CBC encryption found in unencrypted stream`)}function Ft(n){let e=0,t,i,s,r,o,a=n.data;if(!n||n.size===0)return null;for(;a[0].length<19&&a.length>1;)a[0]=_e(a[0],a[1]),a.splice(1,1);if(t=a[0],(t[0]<<16)+(t[1]<<8)+t[2]===1){if(i=(t[4]<<8)+t[5],i&&i>n.size-6)return null;let c=t[7];c&192&&(r=(t[9]&14)*536870912+(t[10]&255)*4194304+(t[11]&254)*16384+(t[12]&255)*128+(t[13]&254)/2,c&64?(o=(t[14]&14)*536870912+(t[15]&255)*4194304+(t[16]&254)*16384+(t[17]&255)*128+(t[18]&254)/2,r-o>60*9e4&&(L.warn(`${Math.round((r-o)/9e4)}s delta between PTS and DTS, align them`),r=o)):o=r),s=t[8];let u=s+9;if(n.size<=u)return null;n.size-=u;let h=new Uint8Array(n.size);for(let d=0,f=a.length;d<f;d++){t=a[d];let g=t.byteLength;if(u)if(u>g){u-=g;continue}else t=t.subarray(u),g-=u,u=0;h.set(t,e),e+=g}return i&&(i-=s+3),{data:h,pts:r,dts:o,len:i}}return null}var Ir=class extends ci{resetInitSegment(e,t,i,s){super.resetInitSegment(e,t,i,s),this._audioTrack={container:"audio/mpeg",type:"audio",id:2,pid:-1,sequenceNumber:0,segmentCodec:"mp3",samples:[],manifestCodec:t,duration:s,inputTimeScale:9e4,dropped:0}}static probe(e){if(!e)return!1;let t=si(e,0),i=(t==null?void 0:t.length)||0;if(t&&e[i]===11&&e[i+1]===119&&cn(t)!==void 0&&_a(e,i)<=16)return!1;for(let s=e.length;i<s;i++)if(ka(e,i))return L.log("MPEG Audio sync word found !"),!0;return!1}canParse(e,t){return Yu(e,t)}appendFrame(e,t,i){if(this.basePTS!==null)return Da(e,t,i,this.basePTS,this.frameIndex)}},is=class{static getSilentFrame(e,t){switch(e){case"mp4a.40.2":if(t===1)return new Uint8Array([0,200,0,128,35,128]);if(t===2)return new Uint8Array([33,0,73,144,2,25,0,35,128]);if(t===3)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,142]);if(t===4)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,128,44,128,8,2,56]);if(t===5)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,56]);if(t===6)return new Uint8Array([0,200,0,128,32,132,1,38,64,8,100,0,130,48,4,153,0,33,144,2,0,178,0,32,8,224]);break;default:if(t===1)return new Uint8Array([1,64,34,128,163,78,230,128,186,8,0,0,0,28,6,241,193,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(t===2)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);if(t===3)return new Uint8Array([1,64,34,128,163,94,230,128,186,8,0,0,0,0,149,0,6,241,161,10,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,94]);break}}},nt=Math.pow(2,32)-1,R=class{static init(){R.types={avc1:[],avcC:[],btrt:[],dinf:[],dref:[],esds:[],ftyp:[],hdlr:[],mdat:[],mdhd:[],mdia:[],mfhd:[],minf:[],moof:[],moov:[],mp4a:[],".mp3":[],dac3:[],"ac-3":[],mvex:[],mvhd:[],pasp:[],sdtp:[],stbl:[],stco:[],stsc:[],stsd:[],stsz:[],stts:[],tfdt:[],tfhd:[],traf:[],trak:[],trun:[],trex:[],tkhd:[],vmhd:[],smhd:[]};let e;for(e in R.types)R.types.hasOwnProperty(e)&&(R.types[e]=[e.charCodeAt(0),e.charCodeAt(1),e.charCodeAt(2),e.charCodeAt(3)]);let t=new Uint8Array([0,0,0,0,0,0,0,0,118,105,100,101,0,0,0,0,0,0,0,0,0,0,0,0,86,105,100,101,111,72,97,110,100,108,101,114,0]),i=new Uint8Array([0,0,0,0,0,0,0,0,115,111,117,110,0,0,0,0,0,0,0,0,0,0,0,0,83,111,117,110,100,72,97,110,100,108,101,114,0]);R.HDLR_TYPES={video:t,audio:i};let s=new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,12,117,114,108,32,0,0,0,1]),r=new Uint8Array([0,0,0,0,0,0,0,0]);R.STTS=R.STSC=R.STCO=r,R.STSZ=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0]),R.VMHD=new Uint8Array([0,0,0,1,0,0,0,0,0,0,0,0]),R.SMHD=new Uint8Array([0,0,0,0,0,0,0,0]),R.STSD=new Uint8Array([0,0,0,0,0,0,0,1]);let o=new Uint8Array([105,115,111,109]),a=new Uint8Array([97,118,99,49]),l=new Uint8Array([0,0,0,1]);R.FTYP=R.box(R.types.ftyp,o,l,o,a),R.DINF=R.box(R.types.dinf,R.box(R.types.dref,s))}static box(e,...t){let i=8,s=t.length,r=s;for(;s--;)i+=t[s].byteLength;let o=new Uint8Array(i);for(o[0]=i>>24&255,o[1]=i>>16&255,o[2]=i>>8&255,o[3]=i&255,o.set(e,4),s=0,i=8;s<r;s++)o.set(t[s],i),i+=t[s].byteLength;return o}static hdlr(e){return R.box(R.types.hdlr,R.HDLR_TYPES[e])}static mdat(e){return R.box(R.types.mdat,e)}static mdhd(e,t){t*=e;let i=Math.floor(t/(nt+1)),s=Math.floor(t%(nt+1));return R.box(R.types.mdhd,new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,e>>24&255,e>>16&255,e>>8&255,e&255,i>>24,i>>16&255,i>>8&255,i&255,s>>24,s>>16&255,s>>8&255,s&255,85,196,0,0]))}static mdia(e){return R.box(R.types.mdia,R.mdhd(e.timescale,e.duration),R.hdlr(e.type),R.minf(e))}static mfhd(e){return R.box(R.types.mfhd,new Uint8Array([0,0,0,0,e>>24,e>>16&255,e>>8&255,e&255]))}static minf(e){return e.type==="audio"?R.box(R.types.minf,R.box(R.types.smhd,R.SMHD),R.DINF,R.stbl(e)):R.box(R.types.minf,R.box(R.types.vmhd,R.VMHD),R.DINF,R.stbl(e))}static moof(e,t,i){return R.box(R.types.moof,R.mfhd(e),R.traf(i,t))}static moov(e){let t=e.length,i=[];for(;t--;)i[t]=R.trak(e[t]);return R.box.apply(null,[R.types.moov,R.mvhd(e[0].timescale,e[0].duration)].concat(i).concat(R.mvex(e)))}static mvex(e){let t=e.length,i=[];for(;t--;)i[t]=R.trex(e[t]);return R.box.apply(null,[R.types.mvex,...i])}static mvhd(e,t){t*=e;let i=Math.floor(t/(nt+1)),s=Math.floor(t%(nt+1)),r=new Uint8Array([1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,e>>24&255,e>>16&255,e>>8&255,e&255,i>>24,i>>16&255,i>>8&255,i&255,s>>24,s>>16&255,s>>8&255,s&255,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255]);return R.box(R.types.mvhd,r)}static sdtp(e){let t=e.samples||[],i=new Uint8Array(4+t.length),s,r;for(s=0;s<t.length;s++)r=t[s].flags,i[s+4]=r.dependsOn<<4|r.isDependedOn<<2|r.hasRedundancy;return R.box(R.types.sdtp,i)}static stbl(e){return R.box(R.types.stbl,R.stsd(e),R.box(R.types.stts,R.STTS),R.box(R.types.stsc,R.STSC),R.box(R.types.stsz,R.STSZ),R.box(R.types.stco,R.STCO))}static avc1(e){let t=[],i=[],s,r,o;for(s=0;s<e.sps.length;s++)r=e.sps[s],o=r.byteLength,t.push(o>>>8&255),t.push(o&255),t=t.concat(Array.prototype.slice.call(r));for(s=0;s<e.pps.length;s++)r=e.pps[s],o=r.byteLength,i.push(o>>>8&255),i.push(o&255),i=i.concat(Array.prototype.slice.call(r));let a=R.box(R.types.avcC,new Uint8Array([1,t[3],t[4],t[5],255,224|e.sps.length].concat(t).concat([e.pps.length]).concat(i))),l=e.width,c=e.height,u=e.pixelRatio[0],h=e.pixelRatio[1];return R.box(R.types.avc1,new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,l>>8&255,l&255,c>>8&255,c&255,0,72,0,0,0,72,0,0,0,0,0,0,0,1,18,100,97,105,108,121,109,111,116,105,111,110,47,104,108,115,46,106,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,17,17]),a,R.box(R.types.btrt,new Uint8Array([0,28,156,128,0,45,198,192,0,45,198,192])),R.box(R.types.pasp,new Uint8Array([u>>24,u>>16&255,u>>8&255,u&255,h>>24,h>>16&255,h>>8&255,h&255])))}static esds(e){let t=e.config.length;return new Uint8Array([0,0,0,0,3,23+t,0,1,0,4,15+t,64,21,0,0,0,0,0,0,0,0,0,0,0,5].concat([t]).concat(e.config).concat([6,1,2]))}static audioStsd(e){let t=e.samplerate;return new Uint8Array([0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,e.channelCount,0,16,0,0,0,0,t>>8&255,t&255,0,0])}static mp4a(e){return R.box(R.types.mp4a,R.audioStsd(e),R.box(R.types.esds,R.esds(e)))}static mp3(e){return R.box(R.types[".mp3"],R.audioStsd(e))}static ac3(e){return R.box(R.types["ac-3"],R.audioStsd(e),R.box(R.types.dac3,e.config))}static stsd(e){return e.type==="audio"?e.segmentCodec==="mp3"&&e.codec==="mp3"?R.box(R.types.stsd,R.STSD,R.mp3(e)):e.segmentCodec==="ac3"?R.box(R.types.stsd,R.STSD,R.ac3(e)):R.box(R.types.stsd,R.STSD,R.mp4a(e)):R.box(R.types.stsd,R.STSD,R.avc1(e))}static tkhd(e){let t=e.id,i=e.duration*e.timescale,s=e.width,r=e.height,o=Math.floor(i/(nt+1)),a=Math.floor(i%(nt+1));return R.box(R.types.tkhd,new Uint8Array([1,0,0,7,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,t>>24&255,t>>16&255,t>>8&255,t&255,0,0,0,0,o>>24,o>>16&255,o>>8&255,o&255,a>>24,a>>16&255,a>>8&255,a&255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,s>>8&255,s&255,0,0,r>>8&255,r&255,0,0]))}static traf(e,t){let i=R.sdtp(e),s=e.id,r=Math.floor(t/(nt+1)),o=Math.floor(t%(nt+1));return R.box(R.types.traf,R.box(R.types.tfhd,new Uint8Array([0,0,0,0,s>>24,s>>16&255,s>>8&255,s&255])),R.box(R.types.tfdt,new Uint8Array([1,0,0,0,r>>24,r>>16&255,r>>8&255,r&255,o>>24,o>>16&255,o>>8&255,o&255])),R.trun(e,i.length+16+20+8+16+8+8),i)}static trak(e){return e.duration=e.duration||4294967295,R.box(R.types.trak,R.tkhd(e),R.mdia(e))}static trex(e){let t=e.id;return R.box(R.types.trex,new Uint8Array([0,0,0,0,t>>24,t>>16&255,t>>8&255,t&255,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1]))}static trun(e,t){let i=e.samples||[],s=i.length,r=12+16*s,o=new Uint8Array(r),a,l,c,u,h,d;for(t+=8+r,o.set([e.type==="video"?1:0,0,15,1,s>>>24&255,s>>>16&255,s>>>8&255,s&255,t>>>24&255,t>>>16&255,t>>>8&255,t&255],0),a=0;a<s;a++)l=i[a],c=l.duration,u=l.size,h=l.flags,d=l.cts,o.set([c>>>24&255,c>>>16&255,c>>>8&255,c&255,u>>>24&255,u>>>16&255,u>>>8&255,u&255,h.isLeading<<2|h.dependsOn,h.isDependedOn<<6|h.hasRedundancy<<4|h.paddingValue<<1|h.isNonSync,h.degradPrio&240<<8,h.degradPrio&15,d>>>24&255,d>>>16&255,d>>>8&255,d&255],12+16*a);return R.box(R.types.trun,o)}static initSegment(e){R.types||R.init();let t=R.moov(e);return _e(R.FTYP,t)}};R.types=void 0;R.HDLR_TYPES=void 0;R.STTS=void 0;R.STSC=void 0;R.STCO=void 0;R.STSZ=void 0;R.VMHD=void 0;R.SMHD=void 0;R.STSD=void 0;R.FTYP=void 0;R.DINF=void 0;var Oa=9e4;function fn(n,e,t=1,i=!1){let s=n*e*t;return i?Math.round(s):s}function Xu(n,e,t=1,i=!1){return fn(n,e,1/t,i)}function Zt(n,e=!1){return fn(n,1e3,1/Oa,e)}function Qu(n,e=1){return fn(n,Oa,1/e)}var Ju=10*1e3,No=1024,Zu=1152,eh=1536,Mt=null,Vs=null,$t=class{constructor(e,t,i,s=""){if(this.observer=void 0,this.config=void 0,this.typeSupported=void 0,this.ISGenerated=!1,this._initPTS=null,this._initDTS=null,this.nextAvcDts=null,this.nextAudioPts=null,this.videoSampleDuration=null,this.isAudioContiguous=!1,this.isVideoContiguous=!1,this.videoTrackConfig=void 0,this.observer=e,this.config=t,this.typeSupported=i,this.ISGenerated=!1,Mt===null){let o=(navigator.userAgent||"").match(/Chrome\/(\d+)/i);Mt=o?parseInt(o[1]):0}if(Vs===null){let r=navigator.userAgent.match(/Safari\/(\d+)/i);Vs=r?parseInt(r[1]):0}}destroy(){this.config=this.videoTrackConfig=this._initPTS=this._initDTS=null}resetTimeStamp(e){L.log("[mp4-remuxer]: initPTS & initDTS reset"),this._initPTS=this._initDTS=e}resetNextTimestamp(){L.log("[mp4-remuxer]: reset next timestamp"),this.isVideoContiguous=!1,this.isAudioContiguous=!1}resetInitSegment(){L.log("[mp4-remuxer]: ISGenerated flag reset"),this.ISGenerated=!1,this.videoTrackConfig=void 0}getVideoStartPts(e){let t=!1,i=e.reduce((s,r)=>{let o=r.pts-s;return o<-4294967296?(t=!0,we(s,r.pts)):o>0?s:r.pts},e[0].pts);return t&&L.debug("PTS rollover detected"),i}remux(e,t,i,s,r,o,a,l){let c,u,h,d,f,g,m=r,y=r,T=e.pid>-1,v=t.pid>-1,E=t.samples.length,S=e.samples.length>0,x=a&&E>0||E>1;if((!T||S)&&(!v||x)||this.ISGenerated||a){if(this.ISGenerated){var b,C,_,D;let $=this.videoTrackConfig;$&&(t.width!==$.width||t.height!==$.height||((b=t.pixelRatio)==null?void 0:b[0])!==((C=$.pixelRatio)==null?void 0:C[0])||((_=t.pixelRatio)==null?void 0:_[1])!==((D=$.pixelRatio)==null?void 0:D[1]))&&this.resetInitSegment()}else h=this.generateIS(e,t,r,o);let w=this.isVideoContiguous,B=-1,P;if(x&&(B=th(t.samples),!w&&this.config.forceKeyFrameOnDiscontinuity))if(g=!0,B>0){L.warn(`[mp4-remuxer]: Dropped ${B} out of ${E} video samples due to a missing keyframe`);let $=this.getVideoStartPts(t.samples);t.samples=t.samples.slice(B),t.dropped+=B,y+=(t.samples[0].pts-$)/t.inputTimeScale,P=y}else B===-1&&(L.warn(`[mp4-remuxer]: No keyframe found out of ${E} video samples`),g=!1);if(this.ISGenerated){if(S&&x){let $=this.getVideoStartPts(t.samples),N=(we(e.samples[0].pts,$)-$)/t.inputTimeScale;m+=Math.max(0,N),y+=Math.max(0,-N)}if(S){if(e.samplerate||(L.warn("[mp4-remuxer]: regenerate InitSegment as audio detected"),h=this.generateIS(e,t,r,o)),u=this.remuxAudio(e,m,this.isAudioContiguous,o,v||x||l===H.AUDIO?y:void 0),x){let $=u?u.endPTS-u.startPTS:0;t.inputTimeScale||(L.warn("[mp4-remuxer]: regenerate InitSegment as video detected"),h=this.generateIS(e,t,r,o)),c=this.remuxVideo(t,y,w,$)}}else x&&(c=this.remuxVideo(t,y,w,0));c&&(c.firstKeyFrame=B,c.independent=B!==-1,c.firstKeyFramePTS=P)}}return this.ISGenerated&&this._initPTS&&this._initDTS&&(i.samples.length&&(f=Fa(i,r,this._initPTS,this._initDTS)),s.samples.length&&(d=Ma(s,r,this._initPTS))),{audio:u,video:c,initSegment:h,independent:g,text:d,id3:f}}generateIS(e,t,i,s){let r=e.samples,o=t.samples,a=this.typeSupported,l={},c=this._initPTS,u=!c||s,h="audio/mp4",d,f,g;if(u&&(d=f=1/0),e.config&&r.length){switch(e.timescale=e.samplerate,e.segmentCodec){case"mp3":a.mpeg?(h="audio/mpeg",e.codec=""):a.mp3&&(e.codec="mp3");break;case"ac3":e.codec="ac-3";break}l.audio={id:"audio",container:h,codec:e.codec,initSegment:e.segmentCodec==="mp3"&&a.mpeg?new Uint8Array(0):R.initSegment([e]),metadata:{channelCount:e.channelCount}},u&&(g=e.inputTimeScale,!c||g!==c.timescale?d=f=r[0].pts-Math.round(g*i):u=!1)}if(t.sps&&t.pps&&o.length){if(t.timescale=t.inputTimeScale,l.video={id:"main",container:"video/mp4",codec:t.codec,initSegment:R.initSegment([t]),metadata:{width:t.width,height:t.height}},u)if(g=t.inputTimeScale,!c||g!==c.timescale){let m=this.getVideoStartPts(o),y=Math.round(g*i);f=Math.min(f,we(o[0].dts,m)-y),d=Math.min(d,m-y)}else u=!1;this.videoTrackConfig={width:t.width,height:t.height,pixelRatio:t.pixelRatio}}if(Object.keys(l).length)return this.ISGenerated=!0,u?(this._initPTS={baseTime:d,timescale:g},this._initDTS={baseTime:f,timescale:g}):d=g=void 0,{tracks:l,initPTS:d,timescale:g}}remuxVideo(e,t,i,s){let r=e.inputTimeScale,o=e.samples,a=[],l=o.length,c=this._initPTS,u=this.nextAvcDts,h=8,d=this.videoSampleDuration,f,g,m=Number.POSITIVE_INFINITY,y=Number.NEGATIVE_INFINITY,T=!1;if(!i||u===null){let F=t*r,O=o[0].pts-we(o[0].dts,o[0].pts);Mt&&u!==null&&Math.abs(F-O-u)<15e3?i=!0:u=F-O}let v=c.baseTime*r/c.timescale;for(let F=0;F<l;F++){let O=o[F];O.pts=we(O.pts-v,u),O.dts=we(O.dts-v,u),O.dts<o[F>0?F-1:F].dts&&(T=!0)}T&&o.sort(function(F,O){let q=F.dts-O.dts,W=F.pts-O.pts;return q||W}),f=o[0].dts,g=o[o.length-1].dts;let E=g-f,S=E?Math.round(E/(l-1)):d||e.inputTimeScale/30;if(i){let F=f-u,O=F>S,q=F<-1;if((O||q)&&(O?L.warn(`AVC: ${Zt(F,!0)} ms (${F}dts) hole between fragments detected at ${t.toFixed(3)}`):L.warn(`AVC: ${Zt(-F,!0)} ms (${F}dts) overlapping between fragments detected at ${t.toFixed(3)}`),!q||u>=o[0].pts||Mt)){f=u;let W=o[0].pts-F;if(O)o[0].dts=f,o[0].pts=W;else for(let j=0;j<o.length&&!(o[j].dts>W);j++)o[j].dts-=F,o[j].pts-=F;L.log(`Video: Initial PTS/DTS adjusted: ${Zt(W,!0)}/${Zt(f,!0)}, delta: ${Zt(F,!0)} ms`)}}f=Math.max(0,f);let x=0,A=0,b=f;for(let F=0;F<l;F++){let O=o[F],q=O.units,W=q.length,j=0;for(let Z=0;Z<W;Z++)j+=q[Z].data.length;A+=j,x+=W,O.length=j,O.dts<b?(O.dts=b,b+=S/4|0||1):b=O.dts,m=Math.min(O.pts,m),y=Math.max(O.pts,y)}g=o[l-1].dts;let C=A+4*x+8,_;try{_=new Uint8Array(C)}catch(F){this.observer.emit(p.ERROR,p.ERROR,{type:V.MUX_ERROR,details:I.REMUX_ALLOC_ERROR,fatal:!1,error:F,bytes:C,reason:`fail allocating video mdat ${C}`});return}let D=new DataView(_.buffer);D.setUint32(0,C),_.set(R.types.mdat,4);let w=!1,B=Number.POSITIVE_INFINITY,P=Number.POSITIVE_INFINITY,$=Number.NEGATIVE_INFINITY,U=Number.NEGATIVE_INFINITY;for(let F=0;F<l;F++){let O=o[F],q=O.units,W=0;for(let ee=0,re=q.length;ee<re;ee++){let Te=q[ee],be=Te.data,ut=Te.data.byteLength;D.setUint32(h,ut),h+=4,_.set(be,h),h+=ut,W+=4+ut}let j;if(F<l-1)d=o[F+1].dts-O.dts,j=o[F+1].pts-O.pts;else{let ee=this.config,re=F>0?O.dts-o[F-1].dts:S;if(j=F>0?O.pts-o[F-1].pts:S,ee.stretchShortVideoTrack&&this.nextAudioPts!==null){let Te=Math.floor(ee.maxBufferHole*r),be=(s?m+s*r:this.nextAudioPts)-O.pts;be>Te?(d=be-re,d<0?d=re:w=!0,L.log(`[mp4-remuxer]: It is approximately ${be/90} ms to the next segment; using duration ${d/90} ms for the last video frame.`)):d=re}else d=re}let Z=Math.round(O.pts-O.dts);B=Math.min(B,d),$=Math.max($,d),P=Math.min(P,j),U=Math.max(U,j),a.push(new ss(O.key,d,W,Z))}if(a.length){if(Mt){if(Mt<70){let F=a[0].flags;F.dependsOn=2,F.isNonSync=0}}else if(Vs&&U-P<$-B&&S/$<.025&&a[0].cts===0){L.warn("Found irregular gaps in sample duration. Using PTS instead of DTS to determine MP4 sample duration.");let F=f;for(let O=0,q=a.length;O<q;O++){let W=F+a[O].duration,j=F+a[O].cts;if(O<q-1){let Z=W+a[O+1].cts;a[O].duration=Z-j}else a[O].duration=O?a[O-1].duration:S;a[O].cts=0,F=W}}}d=w||!d?S:d,this.nextAvcDts=u=g+d,this.videoSampleDuration=d,this.isVideoContiguous=!0;let N=R.moof(e.sequenceNumber++,f,le({},e,{samples:a})),K="video",X={data1:N,data2:_,startPTS:m/r,endPTS:(y+d)/r,startDTS:f/r,endDTS:u/r,type:K,hasAudio:!1,hasVideo:!0,nb:a.length,dropped:e.dropped};return e.samples=[],e.dropped=0,X}getSamplesPerFrame(e){switch(e.segmentCodec){case"mp3":return Zu;case"ac3":return eh;default:return No}}remuxAudio(e,t,i,s,r){let o=e.inputTimeScale,a=e.samplerate?e.samplerate:o,l=o/a,c=this.getSamplesPerFrame(e),u=c*l,h=this._initPTS,d=e.segmentCodec==="mp3"&&this.typeSupported.mpeg,f=[],g=r!==void 0,m=e.samples,y=d?0:8,T=this.nextAudioPts||-1,v=t*o,E=h.baseTime*o/h.timescale;if(this.isAudioContiguous=i=i||m.length&&T>0&&(s&&Math.abs(v-T)<9e3||Math.abs(we(m[0].pts-E,v)-T)<20*u),m.forEach(function(N){N.pts=we(N.pts-E,v)}),!i||T<0){if(m=m.filter(N=>N.pts>=0),!m.length)return;r===0?T=0:s&&!g?T=Math.max(0,v):T=m[0].pts}if(e.segmentCodec==="aac"){let N=this.config.maxAudioFramesDrift;for(let K=0,X=T;K<m.length;K++){let F=m[K],O=F.pts,q=O-X,W=Math.abs(1e3*q/o);if(q<=-N*u&&g)K===0&&(L.warn(`Audio frame @ ${(O/o).toFixed(3)}s overlaps nextAudioPts by ${Math.round(1e3*q/o)} ms.`),this.nextAudioPts=T=X=O);else if(q>=N*u&&W<Ju&&g){let j=Math.round(q/u);X=O-j*u,X<0&&(j--,X+=u),K===0&&(this.nextAudioPts=T=X),L.warn(`[mp4-remuxer]: Injecting ${j} audio frame @ ${(X/o).toFixed(3)}s due to ${Math.round(1e3*q/o)} ms gap.`);for(let Z=0;Z<j;Z++){let ee=Math.max(X,0),re=is.getSilentFrame(e.manifestCodec||e.codec,e.channelCount);re||(L.log("[mp4-remuxer]: Unable to get silent frame for given audio codec; duplicating last frame instead."),re=F.unit.subarray()),m.splice(K,0,{unit:re,pts:ee}),X+=u,K++}}F.pts=X,X+=u}}let S=null,x=null,A,b=0,C=m.length;for(;C--;)b+=m[C].unit.byteLength;for(let N=0,K=m.length;N<K;N++){let X=m[N],F=X.unit,O=X.pts;if(x!==null){let W=f[N-1];W.duration=Math.round((O-x)/l)}else if(i&&e.segmentCodec==="aac"&&(O=T),S=O,b>0){b+=y;try{A=new Uint8Array(b)}catch(W){this.observer.emit(p.ERROR,p.ERROR,{type:V.MUX_ERROR,details:I.REMUX_ALLOC_ERROR,fatal:!1,error:W,bytes:b,reason:`fail allocating audio mdat ${b}`});return}d||(new DataView(A.buffer).setUint32(0,b),A.set(R.types.mdat,4))}else return;A.set(F,y);let q=F.byteLength;y+=q,f.push(new ss(!0,c,q,0)),x=O}let _=f.length;if(!_)return;let D=f[f.length-1];this.nextAudioPts=T=x+l*D.duration;let w=d?new Uint8Array(0):R.moof(e.sequenceNumber++,S/l,le({},e,{samples:f}));e.samples=[];let B=S/o,P=T/o,U={data1:w,data2:A,startPTS:B,endPTS:P,startDTS:B,endDTS:P,type:"audio",hasAudio:!0,hasVideo:!1,nb:_};return this.isAudioContiguous=!0,U}remuxEmptyAudio(e,t,i,s){let r=e.inputTimeScale,o=e.samplerate?e.samplerate:r,a=r/o,l=this.nextAudioPts,c=this._initDTS,u=c.baseTime*9e4/c.timescale,h=(l!==null?l:s.startDTS*r)+u,d=s.endDTS*r+u,f=a*No,g=Math.ceil((d-h)/f),m=is.getSilentFrame(e.manifestCodec||e.codec,e.channelCount);if(L.warn("[mp4-remuxer]: remux empty Audio"),!m){L.trace("[mp4-remuxer]: Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec");return}let y=[];for(let T=0;T<g;T++){let v=h+T*f;y.push({unit:m,pts:v,dts:v})}return e.samples=y,this.remuxAudio(e,t,i,!1)}};function we(n,e){let t;if(e===null)return n;for(e<n?t=-8589934592:t=8589934592;Math.abs(n-e)>4294967296;)n+=t;return n}function th(n){for(let e=0;e<n.length;e++)if(n[e].key)return e;return-1}function Fa(n,e,t,i){let s=n.samples.length;if(!s)return;let r=n.inputTimeScale;for(let a=0;a<s;a++){let l=n.samples[a];l.pts=we(l.pts-t.baseTime*r/t.timescale,e*r)/r,l.dts=we(l.dts-i.baseTime*r/i.timescale,e*r)/r}let o=n.samples;return n.samples=[],{samples:o}}function Ma(n,e,t){let i=n.samples.length;if(!i)return;let s=n.inputTimeScale;for(let o=0;o<i;o++){let a=n.samples[o];a.pts=we(a.pts-t.baseTime*s/t.timescale,e*s)/s}n.samples.sort((o,a)=>o.pts-a.pts);let r=n.samples;return n.samples=[],{samples:r}}var ss=class{constructor(e,t,i,s){this.size=void 0,this.duration=void 0,this.cts=void 0,this.flags=void 0,this.duration=t,this.size=i,this.cts=s,this.flags={isLeading:0,isDependedOn:0,hasRedundancy:0,degradPrio:0,dependsOn:e?2:1,isNonSync:e?0:1}}},Dr=class{constructor(){this.emitInitSegment=!1,this.audioCodec=void 0,this.videoCodec=void 0,this.initData=void 0,this.initPTS=null,this.initTracks=void 0,this.lastEndTime=null}destroy(){}resetTimeStamp(e){this.initPTS=e,this.lastEndTime=null}resetNextTimestamp(){this.lastEndTime=null}resetInitSegment(e,t,i,s){this.audioCodec=t,this.videoCodec=i,this.generateInitSegment(Dc(e,s)),this.emitInitSegment=!0}generateInitSegment(e){let{audioCodec:t,videoCodec:i}=this;if(!(e!=null&&e.byteLength)){this.initTracks=void 0,this.initData=void 0;return}let s=this.initData=la(e);s.audio&&(t=Bo(s.audio,Q.AUDIO)),s.video&&(i=Bo(s.video,Q.VIDEO));let r={};s.audio&&s.video?r.audiovideo={container:"video/mp4",codec:t+","+i,initSegment:e,id:"main"}:s.audio?r.audio={container:"audio/mp4",codec:t,initSegment:e,id:"audio"}:s.video?r.video={container:"video/mp4",codec:i,initSegment:e,id:"main"}:L.warn("[passthrough-remuxer.ts]: initSegment does not contain moov or trak boxes."),this.initTracks=r}remux(e,t,i,s,r,o){var a,l;let{initPTS:c,lastEndTime:u}=this,h={audio:void 0,video:void 0,text:s,id3:i,initSegment:void 0};M(u)||(u=this.lastEndTime=r||0);let d=t.samples;if(!(d!=null&&d.length))return h;let f={initPTS:void 0,timescale:1},g=this.initData;if((a=g)!=null&&a.length||(this.generateInitSegment(d),g=this.initData),!((l=g)!=null&&l.length))return L.warn("[passthrough-remuxer.ts]: Failed to generate initSegment."),h;this.emitInitSegment&&(f.tracks=this.initTracks,this.emitInitSegment=!1);let m=wc(d,g),y=Cc(g,d),T=y===null?r:y;(ih(c,T,r,m)||f.timescale!==c.timescale&&o)&&(f.initPTS=T-r,c&&c.timescale===1&&L.warn(`Adjusting initPTS by ${f.initPTS-c.baseTime}`),this.initPTS=c={baseTime:f.initPTS,timescale:1});let v=e?T-c.baseTime/c.timescale:u,E=v+m;_c(g,d,c.baseTime/c.timescale),m>0?this.lastEndTime=E:(L.warn("Duration parsed from mp4 should be greater than zero"),this.resetNextTimestamp());let S=!!g.audio,x=!!g.video,A="";S&&(A+="audio"),x&&(A+="video");let b={data1:d,startPTS:v,startDTS:v,endPTS:E,endDTS:E,type:A,hasAudio:S,hasVideo:x,nb:1,dropped:0};return h.audio=b.type==="audio"?b:void 0,h.video=b.type!=="audio"?b:void 0,h.initSegment=f,h.id3=Fa(i,r,c,c),s.samples.length&&(h.text=Ma(s,r,c)),h}};function ih(n,e,t,i){if(n===null)return!0;let s=Math.max(i,1),r=e-n.baseTime/n.timescale;return Math.abs(r-t)>s}function Bo(n,e){let t=n==null?void 0:n.codec;if(t&&t.length>4)return t;if(e===Q.AUDIO){if(t==="ec-3"||t==="ac-3"||t==="alac")return t;if(t==="fLaC"||t==="Opus")return Wi(t,!1);let i="mp4a.40.5";return L.info(`Parsed audio codec "${t}" or audio object type not handled. Using "${i}"`),i}return L.warn(`Unhandled video codec "${t}"`),t==="hvc1"||t==="hev1"?"hvc1.1.6.L120.90":t==="av01"?"av01.0.04M.08":"avc1.42e01e"}var Ze;try{Ze=self.performance.now.bind(self.performance)}catch(n){L.debug("Unable to use Performance API on this environment"),Ze=Ht==null?void 0:Ht.Date.now}var Mi=[{demux:vr,remux:Dr},{demux:Ke,remux:$t},{demux:Er,remux:$t},{demux:Ir,remux:$t}];Mi.splice(2,0,{demux:Sr,remux:$t});var rs=class{constructor(e,t,i,s,r){this.async=!1,this.observer=void 0,this.typeSupported=void 0,this.config=void 0,this.vendor=void 0,this.id=void 0,this.demuxer=void 0,this.remuxer=void 0,this.decrypter=void 0,this.probe=void 0,this.decryptionPromise=null,this.transmuxConfig=void 0,this.currentTransmuxState=void 0,this.observer=e,this.typeSupported=t,this.config=i,this.vendor=s,this.id=r}configure(e){this.transmuxConfig=e,this.decrypter&&this.decrypter.reset()}push(e,t,i,s){let r=i.transmuxing;r.executeStart=Ze();let o=new Uint8Array(e),{currentTransmuxState:a,transmuxConfig:l}=this;s&&(this.currentTransmuxState=s);let{contiguous:c,discontinuity:u,trackSwitch:h,accurateTimeOffset:d,timeOffset:f,initSegmentChange:g}=s||a,{audioCodec:m,videoCodec:y,defaultInitPts:T,duration:v,initSegmentData:E}=l,S=sh(o,t);if(S&&S.method==="AES-128"){let C=this.getDecrypter();if(C.isSync()){let _=C.softwareDecrypt(o,S.key.buffer,S.iv.buffer);if(i.part>-1&&(_=C.flush()),!_)return r.executeEnd=Ze(),Ks(i);o=new Uint8Array(_)}else return this.decryptionPromise=C.webCryptoDecrypt(o,S.key.buffer,S.iv.buffer).then(_=>{let D=this.push(_,null,i);return this.decryptionPromise=null,D}),this.decryptionPromise}let x=this.needsProbing(u,h);if(x){let C=this.configureTransmuxer(o);if(C)return L.warn(`[transmuxer] ${C.message}`),this.observer.emit(p.ERROR,p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_PARSING_ERROR,fatal:!1,error:C,reason:C.message}),r.executeEnd=Ze(),Ks(i)}(u||h||g||x)&&this.resetInitSegment(E,m,y,v,t),(u||g||x)&&this.resetInitialTimestamp(T),c||this.resetContiguity();let A=this.transmux(o,S,f,d,i),b=this.currentTransmuxState;return b.contiguous=!0,b.discontinuity=!1,b.trackSwitch=!1,r.executeEnd=Ze(),A}flush(e){let t=e.transmuxing;t.executeStart=Ze();let{decrypter:i,currentTransmuxState:s,decryptionPromise:r}=this;if(r)return r.then(()=>this.flush(e));let o=[],{timeOffset:a}=s;if(i){let h=i.flush();h&&o.push(this.push(h,null,e))}let{demuxer:l,remuxer:c}=this;if(!l||!c)return t.executeEnd=Ze(),[Ks(e)];let u=l.flush(a);return Ni(u)?u.then(h=>(this.flushRemux(o,h,e),o)):(this.flushRemux(o,u,e),o)}flushRemux(e,t,i){let{audioTrack:s,videoTrack:r,id3Track:o,textTrack:a}=t,{accurateTimeOffset:l,timeOffset:c}=this.currentTransmuxState;L.log(`[transmuxer.ts]: Flushed fragment ${i.sn}${i.part>-1?" p: "+i.part:""} of level ${i.level}`);let u=this.remuxer.remux(s,r,o,a,c,l,!0,this.id);e.push({remuxResult:u,chunkMeta:i}),i.transmuxing.executeEnd=Ze()}resetInitialTimestamp(e){let{demuxer:t,remuxer:i}=this;!t||!i||(t.resetTimeStamp(e),i.resetTimeStamp(e))}resetContiguity(){let{demuxer:e,remuxer:t}=this;!e||!t||(e.resetContiguity(),t.resetNextTimestamp())}resetInitSegment(e,t,i,s,r){let{demuxer:o,remuxer:a}=this;!o||!a||(o.resetInitSegment(e,t,i,s),a.resetInitSegment(e,t,i,r))}destroy(){this.demuxer&&(this.demuxer.destroy(),this.demuxer=void 0),this.remuxer&&(this.remuxer.destroy(),this.remuxer=void 0)}transmux(e,t,i,s,r){let o;return t&&t.method==="SAMPLE-AES"?o=this.transmuxSampleAes(e,t,i,s,r):o=this.transmuxUnencrypted(e,i,s,r),o}transmuxUnencrypted(e,t,i,s){let{audioTrack:r,videoTrack:o,id3Track:a,textTrack:l}=this.demuxer.demux(e,t,!1,!this.config.progressive);return{remuxResult:this.remuxer.remux(r,o,a,l,t,i,!1,this.id),chunkMeta:s}}transmuxSampleAes(e,t,i,s,r){return this.demuxer.demuxSampleAes(e,t,i).then(o=>({remuxResult:this.remuxer.remux(o.audioTrack,o.videoTrack,o.id3Track,o.textTrack,i,s,!1,this.id),chunkMeta:r}))}configureTransmuxer(e){let{config:t,observer:i,typeSupported:s,vendor:r}=this,o;for(let d=0,f=Mi.length;d<f;d++){var a;if((a=Mi[d].demux)!=null&&a.probe(e)){o=Mi[d];break}}if(!o)return new Error("Failed to find demuxer by probing fragment data");let l=this.demuxer,c=this.remuxer,u=o.remux,h=o.demux;(!c||!(c instanceof u))&&(this.remuxer=new u(i,t,s,r)),(!l||!(l instanceof h))&&(this.demuxer=new h(i,t,s),this.probe=h.probe)}needsProbing(e,t){return!this.demuxer||!this.remuxer||e||t}getDecrypter(){let e=this.decrypter;return e||(e=this.decrypter=new ai(this.config)),e}};function sh(n,e){let t=null;return n.byteLength>0&&(e==null?void 0:e.key)!=null&&e.iv!==null&&e.method!=null&&(t=e),t}var Ks=n=>({remuxResult:{},chunkMeta:n});function Ni(n){return"then"in n&&n.then instanceof Function}var Cr=class{constructor(e,t,i,s,r){this.audioCodec=void 0,this.videoCodec=void 0,this.initSegmentData=void 0,this.duration=void 0,this.defaultInitPts=void 0,this.audioCodec=e,this.videoCodec=t,this.initSegmentData=i,this.duration=s,this.defaultInitPts=r||null}},wr=class{constructor(e,t,i,s,r,o){this.discontinuity=void 0,this.contiguous=void 0,this.accurateTimeOffset=void 0,this.trackSwitch=void 0,this.timeOffset=void 0,this.initSegmentChange=void 0,this.discontinuity=e,this.contiguous=t,this.accurateTimeOffset=i,this.trackSwitch=s,this.timeOffset=r,this.initSegmentChange=o}},Na={exports:{}};(function(n){var e=Object.prototype.hasOwnProperty,t="~";function i(){}Object.create&&(i.prototype=Object.create(null),new i().__proto__||(t=!1));function s(l,c,u){this.fn=l,this.context=c,this.once=u||!1}function r(l,c,u,h,d){if(typeof u!="function")throw new TypeError("The listener must be a function");var f=new s(u,h||l,d),g=t?t+c:c;return l._events[g]?l._events[g].fn?l._events[g]=[l._events[g],f]:l._events[g].push(f):(l._events[g]=f,l._eventsCount++),l}function o(l,c){--l._eventsCount===0?l._events=new i:delete l._events[c]}function a(){this._events=new i,this._eventsCount=0}a.prototype.eventNames=function(){var c=[],u,h;if(this._eventsCount===0)return c;for(h in u=this._events)e.call(u,h)&&c.push(t?h.slice(1):h);return Object.getOwnPropertySymbols?c.concat(Object.getOwnPropertySymbols(u)):c},a.prototype.listeners=function(c){var u=t?t+c:c,h=this._events[u];if(!h)return[];if(h.fn)return[h.fn];for(var d=0,f=h.length,g=new Array(f);d<f;d++)g[d]=h[d].fn;return g},a.prototype.listenerCount=function(c){var u=t?t+c:c,h=this._events[u];return h?h.fn?1:h.length:0},a.prototype.emit=function(c,u,h,d,f,g){var m=t?t+c:c;if(!this._events[m])return!1;var y=this._events[m],T=arguments.length,v,E;if(y.fn){switch(y.once&&this.removeListener(c,y.fn,void 0,!0),T){case 1:return y.fn.call(y.context),!0;case 2:return y.fn.call(y.context,u),!0;case 3:return y.fn.call(y.context,u,h),!0;case 4:return y.fn.call(y.context,u,h,d),!0;case 5:return y.fn.call(y.context,u,h,d,f),!0;case 6:return y.fn.call(y.context,u,h,d,f,g),!0}for(E=1,v=new Array(T-1);E<T;E++)v[E-1]=arguments[E];y.fn.apply(y.context,v)}else{var S=y.length,x;for(E=0;E<S;E++)switch(y[E].once&&this.removeListener(c,y[E].fn,void 0,!0),T){case 1:y[E].fn.call(y[E].context);break;case 2:y[E].fn.call(y[E].context,u);break;case 3:y[E].fn.call(y[E].context,u,h);break;case 4:y[E].fn.call(y[E].context,u,h,d);break;default:if(!v)for(x=1,v=new Array(T-1);x<T;x++)v[x-1]=arguments[x];y[E].fn.apply(y[E].context,v)}}return!0},a.prototype.on=function(c,u,h){return r(this,c,u,h,!1)},a.prototype.once=function(c,u,h){return r(this,c,u,h,!0)},a.prototype.removeListener=function(c,u,h,d){var f=t?t+c:c;if(!this._events[f])return this;if(!u)return o(this,f),this;var g=this._events[f];if(g.fn)g.fn===u&&(!d||g.once)&&(!h||g.context===h)&&o(this,f);else{for(var m=0,y=[],T=g.length;m<T;m++)(g[m].fn!==u||d&&!g[m].once||h&&g[m].context!==h)&&y.push(g[m]);y.length?this._events[f]=y.length===1?y[0]:y:o(this,f)}return this},a.prototype.removeAllListeners=function(c){var u;return c?(u=t?t+c:c,this._events[u]&&o(this,u)):(this._events=new i,this._eventsCount=0),this},a.prototype.off=a.prototype.removeListener,a.prototype.addListener=a.prototype.on,a.prefixed=t,a.EventEmitter=a,n.exports=a})(Na);var rh=Na.exports,gn=Ql(rh),ns=class{constructor(e,t,i,s){this.error=null,this.hls=void 0,this.id=void 0,this.observer=void 0,this.frag=null,this.part=null,this.useWorker=void 0,this.workerContext=null,this.onwmsg=void 0,this.transmuxer=null,this.onTransmuxComplete=void 0,this.onFlush=void 0;let r=e.config;this.hls=e,this.id=t,this.useWorker=!!r.enableWorker,this.onTransmuxComplete=i,this.onFlush=s;let o=(c,u)=>{u=u||{},u.frag=this.frag,u.id=this.id,c===p.ERROR&&(this.error=u.error),this.hls.trigger(c,u)};this.observer=new gn,this.observer.on(p.FRAG_DECRYPTED,o),this.observer.on(p.ERROR,o);let a=Rt(r.preferManagedMediaSource)||{isTypeSupported:()=>!1},l={mpeg:a.isTypeSupported("audio/mpeg"),mp3:a.isTypeSupported('audio/mp4; codecs="mp3"'),ac3:a.isTypeSupported('audio/mp4; codecs="ac-3"')};if(this.useWorker&&typeof Worker!="undefined"&&(r.workerPath||Pu())){try{r.workerPath?(L.log(`loading Web Worker ${r.workerPath} for "${t}"`),this.workerContext=Fu(r.workerPath)):(L.log(`injecting Web Worker for "${t}"`),this.workerContext=Ou()),this.onwmsg=h=>this.onWorkerMessage(h);let{worker:u}=this.workerContext;u.addEventListener("message",this.onwmsg),u.onerror=h=>{let d=new Error(`${h.message}  (${h.filename}:${h.lineno})`);r.enableWorker=!1,L.warn(`Error in "${t}" Web Worker, fallback to inline`),this.hls.trigger(p.ERROR,{type:V.OTHER_ERROR,details:I.INTERNAL_EXCEPTION,fatal:!1,event:"demuxerWorker",error:d})},u.postMessage({cmd:"init",typeSupported:l,vendor:"",id:t,config:JSON.stringify(r)})}catch(u){L.warn(`Error setting up "${t}" Web Worker, fallback to inline`,u),this.resetWorker(),this.error=null,this.transmuxer=new rs(this.observer,l,r,"",t)}return}this.transmuxer=new rs(this.observer,l,r,"",t)}resetWorker(){if(this.workerContext){let{worker:e,objectURL:t}=this.workerContext;t&&self.URL.revokeObjectURL(t),e.removeEventListener("message",this.onwmsg),e.onerror=null,e.terminate(),this.workerContext=null}}destroy(){if(this.workerContext)this.resetWorker(),this.onwmsg=void 0;else{let t=this.transmuxer;t&&(t.destroy(),this.transmuxer=null)}let e=this.observer;e&&e.removeAllListeners(),this.frag=null,this.observer=null,this.hls=null}push(e,t,i,s,r,o,a,l,c,u){var h,d;c.transmuxing.start=self.performance.now();let{transmuxer:f}=this,g=o?o.start:r.start,m=r.decryptdata,y=this.frag,T=!(y&&r.cc===y.cc),v=!(y&&c.level===y.level),E=y?c.sn-y.sn:-1,S=this.part?c.part-this.part.index:-1,x=E===0&&c.id>1&&c.id===(y==null?void 0:y.stats.chunkCount),A=!v&&(E===1||E===0&&(S===1||x&&S<=0)),b=self.performance.now();(v||E||r.stats.parsing.start===0)&&(r.stats.parsing.start=b),o&&(S||!A)&&(o.stats.parsing.start=b);let C=!(y&&((h=r.initSegment)==null?void 0:h.url)===((d=y.initSegment)==null?void 0:d.url)),_=new wr(T,A,l,v,g,C);if(!A||T||C){L.log(`[transmuxer-interface, ${r.type}]: Starting new transmux session for sn: ${c.sn} p: ${c.part} level: ${c.level} id: ${c.id}
        discontinuity: ${T}
        trackSwitch: ${v}
        contiguous: ${A}
        accurateTimeOffset: ${l}
        timeOffset: ${g}
        initSegmentChange: ${C}`);let D=new Cr(i,s,t,a,u);this.configureTransmuxer(D)}if(this.frag=r,this.part=o,this.workerContext)this.workerContext.worker.postMessage({cmd:"demux",data:e,decryptdata:m,chunkMeta:c,state:_},e instanceof ArrayBuffer?[e]:[]);else if(f){let D=f.push(e,m,c,_);Ni(D)?(f.async=!0,D.then(w=>{this.handleTransmuxComplete(w)}).catch(w=>{this.transmuxerError(w,c,"transmuxer-interface push error")})):(f.async=!1,this.handleTransmuxComplete(D))}}flush(e){e.transmuxing.start=self.performance.now();let{transmuxer:t}=this;if(this.workerContext)this.workerContext.worker.postMessage({cmd:"flush",chunkMeta:e});else if(t){let i=t.flush(e);Ni(i)||t.async?(Ni(i)||(i=Promise.resolve(i)),i.then(r=>{this.handleFlushResult(r,e)}).catch(r=>{this.transmuxerError(r,e,"transmuxer-interface flush error")})):this.handleFlushResult(i,e)}}transmuxerError(e,t,i){this.hls&&(this.error=e,this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_PARSING_ERROR,chunkMeta:t,frag:this.frag||void 0,fatal:!1,error:e,err:e,reason:i}))}handleFlushResult(e,t){e.forEach(i=>{this.handleTransmuxComplete(i)}),this.onFlush(t)}onWorkerMessage(e){let t=e.data;if(!(t!=null&&t.event)){L.warn(`worker message received with no ${t?"event name":"data"}`);return}let i=this.hls;if(this.hls)switch(t.event){case"init":{var s;let r=(s=this.workerContext)==null?void 0:s.objectURL;r&&self.URL.revokeObjectURL(r);break}case"transmuxComplete":{this.handleTransmuxComplete(t.data);break}case"flush":{this.onFlush(t.data);break}case"workerLog":L[t.data.logType]&&L[t.data.logType](t.data.message);break;default:{t.data=t.data||{},t.data.frag=this.frag,t.data.id=this.id,i.trigger(t.event,t.data);break}}}configureTransmuxer(e){let{transmuxer:t}=this;this.workerContext?this.workerContext.worker.postMessage({cmd:"configure",config:e}):t&&t.configure(e)}handleTransmuxComplete(e){e.chunkMeta.transmuxing.end=self.performance.now(),this.onTransmuxComplete(e)}};function Ba(n,e){if(n.length!==e.length)return!1;for(let t=0;t<n.length;t++)if(!Vt(n[t].attrs,e[t].attrs))return!1;return!0}function Vt(n,e,t){let i=n["STABLE-RENDITION-ID"];return i&&!t?i===e["STABLE-RENDITION-ID"]:!(t||["LANGUAGE","NAME","CHARACTERISTICS","AUTOSELECT","DEFAULT","FORCED","ASSOC-LANGUAGE"]).some(s=>n[s]!==e[s])}function kr(n,e){return e.label.toLowerCase()===n.name.toLowerCase()&&(!e.language||e.language.toLowerCase()===(n.lang||"").toLowerCase())}var Uo=100,_r=class extends li{constructor(e,t,i){super(e,t,i,"[audio-stream-controller]",H.AUDIO),this.videoBuffer=null,this.videoTrackCC=-1,this.waitingVideoCC=-1,this.bufferedTrack=null,this.switchingTrack=null,this.trackId=-1,this.waitingData=null,this.mainDetails=null,this.flushing=!1,this.bufferFlushed=!1,this.cachedTrackLoadedData=null,this._registerListeners()}onHandlerDestroying(){this._unregisterListeners(),super.onHandlerDestroying(),this.mainDetails=null,this.bufferedTrack=null,this.switchingTrack=null}_registerListeners(){let{hls:e}=this;e.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.LEVEL_LOADED,this.onLevelLoaded,this),e.on(p.AUDIO_TRACKS_UPDATED,this.onAudioTracksUpdated,this),e.on(p.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this),e.on(p.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this),e.on(p.ERROR,this.onError,this),e.on(p.BUFFER_RESET,this.onBufferReset,this),e.on(p.BUFFER_CREATED,this.onBufferCreated,this),e.on(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.on(p.BUFFER_FLUSHED,this.onBufferFlushed,this),e.on(p.INIT_PTS_FOUND,this.onInitPtsFound,this),e.on(p.FRAG_BUFFERED,this.onFragBuffered,this)}_unregisterListeners(){let{hls:e}=this;e.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.LEVEL_LOADED,this.onLevelLoaded,this),e.off(p.AUDIO_TRACKS_UPDATED,this.onAudioTracksUpdated,this),e.off(p.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this),e.off(p.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this),e.off(p.ERROR,this.onError,this),e.off(p.BUFFER_RESET,this.onBufferReset,this),e.off(p.BUFFER_CREATED,this.onBufferCreated,this),e.off(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.off(p.BUFFER_FLUSHED,this.onBufferFlushed,this),e.off(p.INIT_PTS_FOUND,this.onInitPtsFound,this),e.off(p.FRAG_BUFFERED,this.onFragBuffered,this)}onInitPtsFound(e,{frag:t,id:i,initPTS:s,timescale:r}){if(i==="main"){let o=t.cc;this.initPTS[t.cc]={baseTime:s,timescale:r},this.log(`InitPTS for cc: ${o} found from main: ${s}`),this.videoTrackCC=o,this.state===k.WAITING_INIT_PTS&&this.tick()}}startLoad(e){if(!this.levels){this.startPosition=e,this.state=k.STOPPED;return}let t=this.lastCurrentTime;this.stopLoad(),this.setInterval(Uo),t>0&&e===-1?(this.log(`Override startPosition with lastCurrentTime @${t.toFixed(3)}`),e=t,this.state=k.IDLE):(this.loadedmetadata=!1,this.state=k.WAITING_TRACK),this.nextLoadPosition=this.startPosition=this.lastCurrentTime=e,this.tick()}doTick(){switch(this.state){case k.IDLE:this.doTickIdle();break;case k.WAITING_TRACK:{var e;let{levels:i,trackId:s}=this,r=i==null||(e=i[s])==null?void 0:e.details;if(r){if(this.waitForCdnTuneIn(r))break;this.state=k.WAITING_INIT_PTS}break}case k.FRAG_LOADING_WAITING_RETRY:{var t;let i=performance.now(),s=this.retryDate;if(!s||i>=s||(t=this.media)!=null&&t.seeking){let{levels:r,trackId:o}=this;this.log("RetryDate reached, switch back to IDLE state"),this.resetStartWhenNotLoaded((r==null?void 0:r[o])||null),this.state=k.IDLE}break}case k.WAITING_INIT_PTS:{let i=this.waitingData;if(i){let{frag:s,part:r,cache:o,complete:a}=i;if(this.initPTS[s.cc]!==void 0){this.waitingData=null,this.waitingVideoCC=-1,this.state=k.FRAG_LOADING;let l=o.flush(),c={frag:s,part:r,payload:l,networkDetails:null};this._handleFragmentLoadProgress(c),a&&super._handleFragmentLoadComplete(c)}else if(this.videoTrackCC!==this.waitingVideoCC)this.log(`Waiting fragment cc (${s.cc}) cancelled because video is at cc ${this.videoTrackCC}`),this.clearWaitingFragment();else{let l=this.getLoadPosition(),c=J.bufferInfo(this.mediaBuffer,l,this.config.maxBufferHole);ur(c.end,this.config.maxFragLookUpTolerance,s)<0&&(this.log(`Waiting fragment cc (${s.cc}) @ ${s.start} cancelled because another fragment at ${c.end} is needed`),this.clearWaitingFragment())}}else this.state=k.IDLE}}this.onTickEnd()}clearWaitingFragment(){let e=this.waitingData;e&&(this.fragmentTracker.removeFragment(e.frag),this.waitingData=null,this.waitingVideoCC=-1,this.state=k.IDLE)}resetLoadingState(){this.clearWaitingFragment(),super.resetLoadingState()}onTickEnd(){let{media:e}=this;e!=null&&e.readyState&&(this.lastCurrentTime=e.currentTime)}doTickIdle(){let{hls:e,levels:t,media:i,trackId:s}=this,r=e.config;if(!i&&(this.startFragRequested||!r.startFragPrefetch)||!(t!=null&&t[s]))return;let o=t[s],a=o.details;if(!a||a.live&&this.levelLastLoaded!==o||this.waitForCdnTuneIn(a)){this.state=k.WAITING_TRACK;return}let l=this.mediaBuffer?this.mediaBuffer:this.media;this.bufferFlushed&&l&&(this.bufferFlushed=!1,this.afterBufferFlushed(l,Q.AUDIO,H.AUDIO));let c=this.getFwdBufferInfo(l,H.AUDIO);if(c===null)return;let{bufferedTrack:u,switchingTrack:h}=this;if(!h&&this._streamEnded(c,a)){e.trigger(p.BUFFER_EOS,{type:"audio"}),this.state=k.ENDED;return}let d=this.getFwdBufferInfo(this.videoBuffer?this.videoBuffer:this.media,H.MAIN),f=c.len,g=this.getMaxBufferLength(d==null?void 0:d.len),m=a.fragments,y=m[0].start,T=this.flushing?this.getLoadPosition():c.end;if(h&&i){let x=this.getLoadPosition();u&&!Vt(h.attrs,u.attrs)&&(T=x),a.PTSKnown&&x<y&&(c.end>y||c.nextStart)&&(this.log("Alt audio track ahead of main track, seek to start of alt audio track"),i.currentTime=y+.05)}if(f>=g&&!h&&T<m[m.length-1].start)return;let v=this.getNextFragment(T,a),E=!1;if(v&&this.isLoopLoading(v,T)&&(E=!!v.gap,v=this.getNextFragmentLoopLoading(v,a,c,H.MAIN,g)),!v){this.bufferFlushed=!0;return}let S=d&&v.start>d.end+a.targetduration;if(S||!(d!=null&&d.len)&&c.len){let x=this.getAppendedFrag(v.start,H.MAIN);if(x===null||(E||(E=!!x.gap||!!S&&d.len===0),S&&!E||E&&c.nextStart&&c.nextStart<x.end))return}this.loadFragment(v,o,T)}getMaxBufferLength(e){let t=super.getMaxBufferLength();return e?Math.min(Math.max(t,e),this.config.maxMaxBufferLength):t}onMediaDetaching(){this.videoBuffer=null,this.bufferFlushed=this.flushing=!1,super.onMediaDetaching()}onAudioTracksUpdated(e,{audioTracks:t}){this.resetTransmuxer(),this.levels=t.map(i=>new lt(i))}onAudioTrackSwitching(e,t){let i=!!t.url;this.trackId=t.id;let{fragCurrent:s}=this;s&&(s.abortRequests(),this.removeUnbufferedFrags(s.start)),this.resetLoadingState(),i?this.setInterval(Uo):this.resetTransmuxer(),i?(this.switchingTrack=t,this.state=k.IDLE,this.flushAudioIfNeeded(t)):(this.switchingTrack=null,this.bufferedTrack=t,this.state=k.STOPPED),this.tick()}onManifestLoading(){this.fragmentTracker.removeAllFragments(),this.startPosition=this.lastCurrentTime=0,this.bufferFlushed=this.flushing=!1,this.levels=this.mainDetails=this.waitingData=this.bufferedTrack=this.cachedTrackLoadedData=this.switchingTrack=null,this.startFragRequested=!1,this.trackId=this.videoTrackCC=this.waitingVideoCC=-1}onLevelLoaded(e,t){this.mainDetails=t.details,this.cachedTrackLoadedData!==null&&(this.hls.trigger(p.AUDIO_TRACK_LOADED,this.cachedTrackLoadedData),this.cachedTrackLoadedData=null)}onAudioTrackLoaded(e,t){var i;if(this.mainDetails==null){this.cachedTrackLoadedData=t;return}let{levels:s}=this,{details:r,id:o}=t;if(!s){this.warn(`Audio tracks were reset while loading level ${o}`);return}this.log(`Audio track ${o} loaded [${r.startSN},${r.endSN}]${r.lastPartSn?`[part-${r.lastPartSn}-${r.lastPartIndex}]`:""},duration:${r.totalduration}`);let a=s[o],l=0;if(r.live||(i=a.details)!=null&&i.live){this.checkLiveUpdate(r);let u=this.mainDetails;if(r.deltaUpdateFailed||!u)return;if(!a.details&&r.hasProgramDateTime&&u.hasProgramDateTime)Qi(r,u),l=r.fragments[0].start;else{var c;l=this.alignPlaylists(r,a.details,(c=this.levelLastLoaded)==null?void 0:c.details)}}a.details=r,this.levelLastLoaded=a,!this.startFragRequested&&(this.mainDetails||!r.live)&&this.setStartPosition(this.mainDetails||r,l),this.state===k.WAITING_TRACK&&!this.waitForCdnTuneIn(r)&&(this.state=k.IDLE),this.tick()}_handleFragmentLoadProgress(e){var t;let{frag:i,part:s,payload:r}=e,{config:o,trackId:a,levels:l}=this;if(!l){this.warn(`Audio tracks were reset while fragment load was in progress. Fragment ${i.sn} of level ${i.level} will not be buffered`);return}let c=l[a];if(!c){this.warn("Audio track is undefined on fragment load progress");return}let u=c.details;if(!u){this.warn("Audio track details undefined on fragment load progress"),this.removeUnbufferedFrags(i.start);return}let h=o.defaultAudioCodec||c.audioCodec||"mp4a.40.2",d=this.transmuxer;d||(d=this.transmuxer=new ns(this.hls,H.AUDIO,this._handleTransmuxComplete.bind(this),this._handleTransmuxerFlush.bind(this)));let f=this.initPTS[i.cc],g=(t=i.initSegment)==null?void 0:t.data;if(f!==void 0){let y=s?s.index:-1,T=y!==-1,v=new oi(i.level,i.sn,i.stats.chunkCount,r.byteLength,y,T);d.push(r,g,h,"",i,s,u.totalduration,!1,v,f)}else{this.log(`Unknown video PTS for cc ${i.cc}, waiting for video PTS before demuxing audio frag ${i.sn} of [${u.startSN} ,${u.endSN}],track ${a}`);let{cache:m}=this.waitingData=this.waitingData||{frag:i,part:s,cache:new Ji,complete:!1};m.push(new Uint8Array(r)),this.waitingVideoCC=this.videoTrackCC,this.state=k.WAITING_INIT_PTS}}_handleFragmentLoadComplete(e){if(this.waitingData){this.waitingData.complete=!0;return}super._handleFragmentLoadComplete(e)}onBufferReset(){this.mediaBuffer=this.videoBuffer=null,this.loadedmetadata=!1}onBufferCreated(e,t){let i=t.tracks.audio;i&&(this.mediaBuffer=i.buffer||null),t.tracks.video&&(this.videoBuffer=t.tracks.video.buffer||null)}onFragBuffered(e,t){let{frag:i,part:s}=t;if(i.type!==H.AUDIO){if(!this.loadedmetadata&&i.type===H.MAIN){let r=this.videoBuffer||this.media;r&&J.getBuffered(r).length&&(this.loadedmetadata=!0)}return}if(this.fragContextChanged(i)){this.warn(`Fragment ${i.sn}${s?" p: "+s.index:""} of level ${i.level} finished buffering, but was aborted. state: ${this.state}, audioSwitch: ${this.switchingTrack?this.switchingTrack.name:"false"}`);return}if(i.sn!=="initSegment"){this.fragPrevious=i;let r=this.switchingTrack;r&&(this.bufferedTrack=r,this.switchingTrack=null,this.hls.trigger(p.AUDIO_TRACK_SWITCHED,ye({},r)))}this.fragBufferedComplete(i,s)}onError(e,t){var i;if(t.fatal){this.state=k.ERROR;return}switch(t.details){case I.FRAG_GAP:case I.FRAG_PARSING_ERROR:case I.FRAG_DECRYPT_ERROR:case I.FRAG_LOAD_ERROR:case I.FRAG_LOAD_TIMEOUT:case I.KEY_LOAD_ERROR:case I.KEY_LOAD_TIMEOUT:this.onFragmentOrKeyLoadError(H.AUDIO,t);break;case I.AUDIO_TRACK_LOAD_ERROR:case I.AUDIO_TRACK_LOAD_TIMEOUT:case I.LEVEL_PARSING_ERROR:!t.levelRetry&&this.state===k.WAITING_TRACK&&((i=t.context)==null?void 0:i.type)===z.AUDIO_TRACK&&(this.state=k.IDLE);break;case I.BUFFER_APPEND_ERROR:case I.BUFFER_FULL_ERROR:if(!t.parent||t.parent!=="audio")return;if(t.details===I.BUFFER_APPEND_ERROR){this.resetLoadingState();return}this.reduceLengthAndFlushBuffer(t)&&(this.bufferedTrack=null,super.flushMainBuffer(0,Number.POSITIVE_INFINITY,"audio"));break;case I.INTERNAL_EXCEPTION:this.recoverWorkerError(t);break}}onBufferFlushing(e,{type:t}){t!==Q.VIDEO&&(this.flushing=!0)}onBufferFlushed(e,{type:t}){if(t!==Q.VIDEO){this.flushing=!1,this.bufferFlushed=!0,this.state===k.ENDED&&(this.state=k.IDLE);let i=this.mediaBuffer||this.media;i&&(this.afterBufferFlushed(i,t,H.AUDIO),this.tick())}}_handleTransmuxComplete(e){var t;let i="audio",{hls:s}=this,{remuxResult:r,chunkMeta:o}=e,a=this.getCurrentContext(o);if(!a){this.resetWhenMissingContext(o);return}let{frag:l,part:c,level:u}=a,{details:h}=u,{audio:d,text:f,id3:g,initSegment:m}=r;if(this.fragContextChanged(l)||!h){this.fragmentTracker.removeFragment(l);return}if(this.state=k.PARSING,this.switchingTrack&&d&&this.completeAudioSwitch(this.switchingTrack),m!=null&&m.tracks){let y=l.initSegment||l;this._bufferInitSegment(u,m.tracks,y,o),s.trigger(p.FRAG_PARSING_INIT_SEGMENT,{frag:y,id:i,tracks:m.tracks})}if(d){let{startPTS:y,endPTS:T,startDTS:v,endDTS:E}=d;c&&(c.elementaryStreams[Q.AUDIO]={startPTS:y,endPTS:T,startDTS:v,endDTS:E}),l.setElementaryStreamInfo(Q.AUDIO,y,T,v,E),this.bufferFragmentData(d,l,c,o)}if(g!=null&&(t=g.samples)!=null&&t.length){let y=le({id:i,frag:l,details:h},g);s.trigger(p.FRAG_PARSING_METADATA,y)}if(f){let y=le({id:i,frag:l,details:h},f);s.trigger(p.FRAG_PARSING_USERDATA,y)}}_bufferInitSegment(e,t,i,s){if(this.state!==k.PARSING)return;t.video&&delete t.video;let r=t.audio;if(!r)return;r.id="audio";let o=e.audioCodec;this.log(`Init audio buffer, container:${r.container}, codecs[level/parsed]=[${o}/${r.codec}]`),o&&o.split(",").length===1&&(r.levelCodec=o),this.hls.trigger(p.BUFFER_CODECS,t);let a=r.initSegment;if(a!=null&&a.byteLength){let l={type:"audio",frag:i,part:null,chunkMeta:s,parent:i.type,data:a};this.hls.trigger(p.BUFFER_APPENDING,l)}this.tickImmediate()}loadFragment(e,t,i){let s=this.fragmentTracker.getState(e);if(this.fragCurrent=e,this.switchingTrack||s===pe.NOT_LOADED||s===pe.PARTIAL){var r;if(e.sn==="initSegment")this._loadInitSegment(e,t);else if((r=t.details)!=null&&r.live&&!this.initPTS[e.cc]){this.log(`Waiting for video PTS in continuity counter ${e.cc} of live stream before loading audio fragment ${e.sn} of level ${this.trackId}`),this.state=k.WAITING_INIT_PTS;let o=this.mainDetails;o&&o.fragments[0].start!==t.details.fragments[0].start&&Qi(t.details,o)}else this.startFragRequested=!0,super.loadFragment(e,t,i)}else this.clearTrackerIfNeeded(e)}flushAudioIfNeeded(e){let{media:t,bufferedTrack:i}=this,s=i==null?void 0:i.attrs,r=e.attrs;t&&s&&(s.CHANNELS!==r.CHANNELS||i.name!==e.name||i.lang!==e.lang)&&(this.log("Switching audio track : flushing all audio"),super.flushMainBuffer(0,Number.POSITIVE_INFINITY,"audio"),this.bufferedTrack=null)}completeAudioSwitch(e){let{hls:t}=this;this.flushAudioIfNeeded(e),this.bufferedTrack=e,this.switchingTrack=null,t.trigger(p.AUDIO_TRACK_SWITCHED,ye({},e))}},Pr=class extends ni{constructor(e){super(e,"[audio-track-controller]"),this.tracks=[],this.groupIds=null,this.tracksInGroup=[],this.trackId=-1,this.currentTrack=null,this.selectDefaultTrack=!0,this.registerListeners()}registerListeners(){let{hls:e}=this;e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_PARSED,this.onManifestParsed,this),e.on(p.LEVEL_LOADING,this.onLevelLoading,this),e.on(p.LEVEL_SWITCHING,this.onLevelSwitching,this),e.on(p.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this),e.on(p.ERROR,this.onError,this)}unregisterListeners(){let{hls:e}=this;e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_PARSED,this.onManifestParsed,this),e.off(p.LEVEL_LOADING,this.onLevelLoading,this),e.off(p.LEVEL_SWITCHING,this.onLevelSwitching,this),e.off(p.AUDIO_TRACK_LOADED,this.onAudioTrackLoaded,this),e.off(p.ERROR,this.onError,this)}destroy(){this.unregisterListeners(),this.tracks.length=0,this.tracksInGroup.length=0,this.currentTrack=null,super.destroy()}onManifestLoading(){this.tracks=[],this.tracksInGroup=[],this.groupIds=null,this.currentTrack=null,this.trackId=-1,this.selectDefaultTrack=!0}onManifestParsed(e,t){this.tracks=t.audioTracks||[]}onAudioTrackLoaded(e,t){let{id:i,groupId:s,details:r}=t,o=this.tracksInGroup[i];if(!o||o.groupId!==s){this.warn(`Audio track with id:${i} and group:${s} not found in active group ${o==null?void 0:o.groupId}`);return}let a=o.details;o.details=t.details,this.log(`Audio track ${i} "${o.name}" lang:${o.lang} group:${s} loaded [${r.startSN}-${r.endSN}]`),i===this.trackId&&this.playlistLoaded(i,t,a)}onLevelLoading(e,t){this.switchLevel(t.level)}onLevelSwitching(e,t){this.switchLevel(t.level)}switchLevel(e){let t=this.hls.levels[e];if(!t)return;let i=t.audioGroups||null,s=this.groupIds,r=this.currentTrack;if(!i||(s==null?void 0:s.length)!==(i==null?void 0:i.length)||i!=null&&i.some(a=>(s==null?void 0:s.indexOf(a))===-1)){this.groupIds=i,this.trackId=-1,this.currentTrack=null;let a=this.tracks.filter(d=>!i||i.indexOf(d.groupId)!==-1);if(a.length)this.selectDefaultTrack&&!a.some(d=>d.default)&&(this.selectDefaultTrack=!1),a.forEach((d,f)=>{d.id=f});else if(!r&&!this.tracksInGroup.length)return;this.tracksInGroup=a;let l=this.hls.config.audioPreference;if(!r&&l){let d=We(l,a,Pt);if(d>-1)r=a[d];else{let f=We(l,this.tracks);r=this.tracks[f]}}let c=this.findTrackId(r);c===-1&&r&&(c=this.findTrackId(null));let u={audioTracks:a};this.log(`Updating audio tracks, ${a.length} track(s) found in group(s): ${i==null?void 0:i.join(",")}`),this.hls.trigger(p.AUDIO_TRACKS_UPDATED,u);let h=this.trackId;if(c!==-1&&h===-1)this.setAudioTrack(c);else if(a.length&&h===-1){var o;let d=new Error(`No audio track selected for current audio group-ID(s): ${(o=this.groupIds)==null?void 0:o.join(",")} track count: ${a.length}`);this.warn(d.message),this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.AUDIO_TRACK_LOAD_ERROR,fatal:!0,error:d})}}else this.shouldReloadPlaylist(r)&&this.setAudioTrack(this.trackId)}onError(e,t){t.fatal||!t.context||t.context.type===z.AUDIO_TRACK&&t.context.id===this.trackId&&(!this.groupIds||this.groupIds.indexOf(t.context.groupId)!==-1)&&(this.requestScheduled=-1,this.checkRetry(t))}get allAudioTracks(){return this.tracks}get audioTracks(){return this.tracksInGroup}get audioTrack(){return this.trackId}set audioTrack(e){this.selectDefaultTrack=!1,this.setAudioTrack(e)}setAudioOption(e){let t=this.hls;if(t.config.audioPreference=e,e){let i=this.allAudioTracks;if(this.selectDefaultTrack=!1,i.length){let s=this.currentTrack;if(s&&Ut(e,s,Pt))return s;let r=We(e,this.tracksInGroup,Pt);if(r>-1){let o=this.tracksInGroup[r];return this.setAudioTrack(r),o}else if(s){let o=t.loadLevel;o===-1&&(o=t.firstAutoLevel);let a=Au(e,t.levels,i,o,Pt);if(a===-1)return null;t.nextLoadLevel=a}if(e.channels||e.audioCodec){let o=We(e,i);if(o>-1)return i[o]}}}return null}setAudioTrack(e){let t=this.tracksInGroup;if(e<0||e>=t.length){this.warn(`Invalid audio track id: ${e}`);return}this.clearTimer(),this.selectDefaultTrack=!1;let i=this.currentTrack,s=t[e],r=s.details&&!s.details.live;if(e===this.trackId&&s===i&&r||(this.log(`Switching to audio-track ${e} "${s.name}" lang:${s.lang} group:${s.groupId} channels:${s.channels}`),this.trackId=e,this.currentTrack=s,this.hls.trigger(p.AUDIO_TRACK_SWITCHING,ye({},s)),r))return;let o=this.switchParams(s.url,i==null?void 0:i.details,s.details);this.loadPlaylist(o)}findTrackId(e){let t=this.tracksInGroup;for(let i=0;i<t.length;i++){let s=t[i];if(!(this.selectDefaultTrack&&!s.default)&&(!e||Ut(e,s,Pt)))return i}if(e){let{name:i,lang:s,assocLang:r,characteristics:o,audioCodec:a,channels:l}=e;for(let c=0;c<t.length;c++){let u=t[c];if(Ut({name:i,lang:s,assocLang:r,characteristics:o,audioCodec:a,channels:l},u,Pt))return c}for(let c=0;c<t.length;c++){let u=t[c];if(Vt(e.attrs,u.attrs,["LANGUAGE","ASSOC-LANGUAGE","CHARACTERISTICS"]))return c}for(let c=0;c<t.length;c++){let u=t[c];if(Vt(e.attrs,u.attrs,["LANGUAGE"]))return c}}return-1}loadPlaylist(e){let t=this.currentTrack;if(this.shouldLoadPlaylist(t)&&t){super.loadPlaylist();let i=t.id,s=t.groupId,r=t.url;if(e)try{r=e.addDirectives(r)}catch(o){this.warn(`Could not construct new URL with HLS Delivery Directives: ${o}`)}this.log(`loading audio-track playlist ${i} "${t.name}" lang:${t.lang} group:${s}`),this.clearTimer(),this.hls.trigger(p.AUDIO_TRACK_LOADING,{url:r,id:i,groupId:s,deliveryDirectives:e||null})}}},$o=500,Or=class extends li{constructor(e,t,i){super(e,t,i,"[subtitle-stream-controller]",H.SUBTITLE),this.currentTrackId=-1,this.tracksBuffered=[],this.mainDetails=null,this._registerListeners()}onHandlerDestroying(){this._unregisterListeners(),super.onHandlerDestroying(),this.mainDetails=null}_registerListeners(){let{hls:e}=this;e.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.LEVEL_LOADED,this.onLevelLoaded,this),e.on(p.ERROR,this.onError,this),e.on(p.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this),e.on(p.SUBTITLE_TRACK_SWITCH,this.onSubtitleTrackSwitch,this),e.on(p.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this),e.on(p.SUBTITLE_FRAG_PROCESSED,this.onSubtitleFragProcessed,this),e.on(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.on(p.FRAG_BUFFERED,this.onFragBuffered,this)}_unregisterListeners(){let{hls:e}=this;e.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.LEVEL_LOADED,this.onLevelLoaded,this),e.off(p.ERROR,this.onError,this),e.off(p.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this),e.off(p.SUBTITLE_TRACK_SWITCH,this.onSubtitleTrackSwitch,this),e.off(p.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this),e.off(p.SUBTITLE_FRAG_PROCESSED,this.onSubtitleFragProcessed,this),e.off(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.off(p.FRAG_BUFFERED,this.onFragBuffered,this)}startLoad(e){this.stopLoad(),this.state=k.IDLE,this.setInterval($o),this.nextLoadPosition=this.startPosition=this.lastCurrentTime=e,this.tick()}onManifestLoading(){this.mainDetails=null,this.fragmentTracker.removeAllFragments()}onMediaDetaching(){this.tracksBuffered=[],super.onMediaDetaching()}onLevelLoaded(e,t){this.mainDetails=t.details}onSubtitleFragProcessed(e,t){let{frag:i,success:s}=t;if(this.fragPrevious=i,this.state=k.IDLE,!s)return;let r=this.tracksBuffered[this.currentTrackId];if(!r)return;let o,a=i.start;for(let c=0;c<r.length;c++)if(a>=r[c].start&&a<=r[c].end){o=r[c];break}let l=i.start+i.duration;o?o.end=l:(o={start:a,end:l},r.push(o)),this.fragmentTracker.fragBuffered(i),this.fragBufferedComplete(i,null)}onBufferFlushing(e,t){let{startOffset:i,endOffset:s}=t;if(i===0&&s!==Number.POSITIVE_INFINITY){let r=s-1;if(r<=0)return;t.endOffsetSubtitles=Math.max(0,r),this.tracksBuffered.forEach(o=>{for(let a=0;a<o.length;){if(o[a].end<=r){o.shift();continue}else if(o[a].start<r)o[a].start=r;else break;a++}}),this.fragmentTracker.removeFragmentsInRange(i,r,H.SUBTITLE)}}onFragBuffered(e,t){if(!this.loadedmetadata&&t.frag.type===H.MAIN){var i;(i=this.media)!=null&&i.buffered.length&&(this.loadedmetadata=!0)}}onError(e,t){let i=t.frag;(i==null?void 0:i.type)===H.SUBTITLE&&(t.details===I.FRAG_GAP&&this.fragmentTracker.fragBuffered(i,!0),this.fragCurrent&&this.fragCurrent.abortRequests(),this.state!==k.STOPPED&&(this.state=k.IDLE))}onSubtitleTracksUpdated(e,{subtitleTracks:t}){if(this.levels&&Ba(this.levels,t)){this.levels=t.map(i=>new lt(i));return}this.tracksBuffered=[],this.levels=t.map(i=>{let s=new lt(i);return this.tracksBuffered[s.id]=[],s}),this.fragmentTracker.removeFragmentsInRange(0,Number.POSITIVE_INFINITY,H.SUBTITLE),this.fragPrevious=null,this.mediaBuffer=null}onSubtitleTrackSwitch(e,t){var i;if(this.currentTrackId=t.id,!((i=this.levels)!=null&&i.length)||this.currentTrackId===-1){this.clearInterval();return}let s=this.levels[this.currentTrackId];s!=null&&s.details?this.mediaBuffer=this.mediaBufferTimeRanges:this.mediaBuffer=null,s&&this.setInterval($o)}onSubtitleTrackLoaded(e,t){var i;let{currentTrackId:s,levels:r}=this,{details:o,id:a}=t;if(!r){this.warn(`Subtitle tracks were reset while loading level ${a}`);return}let l=r[a];if(a>=r.length||!l)return;this.log(`Subtitle track ${a} loaded [${o.startSN},${o.endSN}]${o.lastPartSn?`[part-${o.lastPartSn}-${o.lastPartIndex}]`:""},duration:${o.totalduration}`),this.mediaBuffer=this.mediaBufferTimeRanges;let c=0;if(o.live||(i=l.details)!=null&&i.live){let h=this.mainDetails;if(o.deltaUpdateFailed||!h)return;let d=h.fragments[0];if(!l.details)o.hasProgramDateTime&&h.hasProgramDateTime?(Qi(o,h),c=o.fragments[0].start):d&&(c=d.start,cr(o,c));else{var u;c=this.alignPlaylists(o,l.details,(u=this.levelLastLoaded)==null?void 0:u.details),c===0&&d&&(c=d.start,cr(o,c))}}l.details=o,this.levelLastLoaded=l,a===s&&(!this.startFragRequested&&(this.mainDetails||!o.live)&&this.setStartPosition(this.mainDetails||o,c),this.tick(),o.live&&!this.fragCurrent&&this.media&&this.state===k.IDLE&&(Xi(null,o.fragments,this.media.currentTime,0)||(this.warn("Subtitle playlist not aligned with playback"),l.details=void 0)))}_handleFragmentLoadComplete(e){let{frag:t,payload:i}=e,s=t.decryptdata,r=this.hls;if(!this.fragContextChanged(t)&&i&&i.byteLength>0&&s!=null&&s.key&&s.iv&&s.method==="AES-128"){let o=performance.now();this.decrypter.decrypt(new Uint8Array(i),s.key.buffer,s.iv.buffer).catch(a=>{throw r.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.FRAG_DECRYPT_ERROR,fatal:!1,error:a,reason:a.message,frag:t}),a}).then(a=>{let l=performance.now();r.trigger(p.FRAG_DECRYPTED,{frag:t,payload:a,stats:{tstart:o,tdecrypt:l}})}).catch(a=>{this.warn(`${a.name}: ${a.message}`),this.state=k.IDLE})}}doTick(){if(!this.media){this.state=k.IDLE;return}if(this.state===k.IDLE){let{currentTrackId:e,levels:t}=this,i=t==null?void 0:t[e];if(!i||!t.length||!i.details)return;let{config:s}=this,r=this.getLoadPosition(),o=J.bufferedInfo(this.tracksBuffered[this.currentTrackId]||[],r,s.maxBufferHole),{end:a,len:l}=o,c=this.getFwdBufferInfo(this.media,H.MAIN),u=i.details,h=this.getMaxBufferLength(c==null?void 0:c.len)+u.levelTargetDuration;if(l>h)return;let d=u.fragments,f=d.length,g=u.edge,m=null,y=this.fragPrevious;if(a<g){let T=s.maxFragLookUpTolerance,v=a>g-T?0:T;m=Xi(y,d,Math.max(d[0].start,a),v),!m&&y&&y.start<d[0].start&&(m=d[0])}else m=d[f-1];if(!m)return;if(m=this.mapToInitFragWhenRequired(m),m.sn!=="initSegment"){let T=m.sn-u.startSN,v=d[T-1];v&&v.cc===m.cc&&this.fragmentTracker.getState(v)===pe.NOT_LOADED&&(m=v)}this.fragmentTracker.getState(m)===pe.NOT_LOADED&&this.loadFragment(m,i,a)}}getMaxBufferLength(e){let t=super.getMaxBufferLength();return e?Math.max(t,e):t}loadFragment(e,t,i){this.fragCurrent=e,e.sn==="initSegment"?this._loadInitSegment(e,t):(this.startFragRequested=!0,super.loadFragment(e,t,i))}get mediaBufferTimeRanges(){return new Fr(this.tracksBuffered[this.currentTrackId]||[])}},Fr=class{constructor(e){this.buffered=void 0;let t=(i,s,r)=>{if(s=s>>>0,s>r-1)throw new DOMException(`Failed to execute '${i}' on 'TimeRanges': The index provided (${s}) is greater than the maximum bound (${r})`);return e[s][i]};this.buffered={get length(){return e.length},end(i){return t("end",i,e.length)},start(i){return t("start",i,e.length)}}}},Mr=class extends ni{constructor(e){super(e,"[subtitle-track-controller]"),this.media=null,this.tracks=[],this.groupIds=null,this.tracksInGroup=[],this.trackId=-1,this.currentTrack=null,this.selectDefaultTrack=!0,this.queuedDefaultTrack=-1,this.asyncPollTrackChange=()=>this.pollTrackChange(0),this.useTextTrackPolling=!1,this.subtitlePollingInterval=-1,this._subtitleDisplay=!0,this.onTextTracksChanged=()=>{if(this.useTextTrackPolling||self.clearInterval(this.subtitlePollingInterval),!this.media||!this.hls.config.renderTextTracksNatively)return;let t=null,i=Pi(this.media.textTracks);for(let r=0;r<i.length;r++)if(i[r].mode==="hidden")t=i[r];else if(i[r].mode==="showing"){t=i[r];break}let s=this.findTrackForTextTrack(t);this.subtitleTrack!==s&&this.setSubtitleTrack(s)},this.registerListeners()}destroy(){this.unregisterListeners(),this.tracks.length=0,this.tracksInGroup.length=0,this.currentTrack=null,this.onTextTracksChanged=this.asyncPollTrackChange=null,super.destroy()}get subtitleDisplay(){return this._subtitleDisplay}set subtitleDisplay(e){this._subtitleDisplay=e,this.trackId>-1&&this.toggleTrackModes()}registerListeners(){let{hls:e}=this;e.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_PARSED,this.onManifestParsed,this),e.on(p.LEVEL_LOADING,this.onLevelLoading,this),e.on(p.LEVEL_SWITCHING,this.onLevelSwitching,this),e.on(p.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this),e.on(p.ERROR,this.onError,this)}unregisterListeners(){let{hls:e}=this;e.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_PARSED,this.onManifestParsed,this),e.off(p.LEVEL_LOADING,this.onLevelLoading,this),e.off(p.LEVEL_SWITCHING,this.onLevelSwitching,this),e.off(p.SUBTITLE_TRACK_LOADED,this.onSubtitleTrackLoaded,this),e.off(p.ERROR,this.onError,this)}onMediaAttached(e,t){this.media=t.media,this.media&&(this.queuedDefaultTrack>-1&&(this.subtitleTrack=this.queuedDefaultTrack,this.queuedDefaultTrack=-1),this.useTextTrackPolling=!(this.media.textTracks&&"onchange"in this.media.textTracks),this.useTextTrackPolling?this.pollTrackChange(500):this.media.textTracks.addEventListener("change",this.asyncPollTrackChange))}pollTrackChange(e){self.clearInterval(this.subtitlePollingInterval),this.subtitlePollingInterval=self.setInterval(this.onTextTracksChanged,e)}onMediaDetaching(){if(!this.media)return;self.clearInterval(this.subtitlePollingInterval),this.useTextTrackPolling||this.media.textTracks.removeEventListener("change",this.asyncPollTrackChange),this.trackId>-1&&(this.queuedDefaultTrack=this.trackId),Pi(this.media.textTracks).forEach(t=>{Nt(t)}),this.subtitleTrack=-1,this.media=null}onManifestLoading(){this.tracks=[],this.groupIds=null,this.tracksInGroup=[],this.trackId=-1,this.currentTrack=null,this.selectDefaultTrack=!0}onManifestParsed(e,t){this.tracks=t.subtitleTracks}onSubtitleTrackLoaded(e,t){let{id:i,groupId:s,details:r}=t,o=this.tracksInGroup[i];if(!o||o.groupId!==s){this.warn(`Subtitle track with id:${i} and group:${s} not found in active group ${o==null?void 0:o.groupId}`);return}let a=o.details;o.details=t.details,this.log(`Subtitle track ${i} "${o.name}" lang:${o.lang} group:${s} loaded [${r.startSN}-${r.endSN}]`),i===this.trackId&&this.playlistLoaded(i,t,a)}onLevelLoading(e,t){this.switchLevel(t.level)}onLevelSwitching(e,t){this.switchLevel(t.level)}switchLevel(e){let t=this.hls.levels[e];if(!t)return;let i=t.subtitleGroups||null,s=this.groupIds,r=this.currentTrack;if(!i||(s==null?void 0:s.length)!==(i==null?void 0:i.length)||i!=null&&i.some(o=>(s==null?void 0:s.indexOf(o))===-1)){this.groupIds=i,this.trackId=-1,this.currentTrack=null;let o=this.tracks.filter(u=>!i||i.indexOf(u.groupId)!==-1);if(o.length)this.selectDefaultTrack&&!o.some(u=>u.default)&&(this.selectDefaultTrack=!1),o.forEach((u,h)=>{u.id=h});else if(!r&&!this.tracksInGroup.length)return;this.tracksInGroup=o;let a=this.hls.config.subtitlePreference;if(!r&&a){this.selectDefaultTrack=!1;let u=We(a,o);if(u>-1)r=o[u];else{let h=We(a,this.tracks);r=this.tracks[h]}}let l=this.findTrackId(r);l===-1&&r&&(l=this.findTrackId(null));let c={subtitleTracks:o};this.log(`Updating subtitle tracks, ${o.length} track(s) found in "${i==null?void 0:i.join(",")}" group-id`),this.hls.trigger(p.SUBTITLE_TRACKS_UPDATED,c),l!==-1&&this.trackId===-1&&this.setSubtitleTrack(l)}else this.shouldReloadPlaylist(r)&&this.setSubtitleTrack(this.trackId)}findTrackId(e){let t=this.tracksInGroup,i=this.selectDefaultTrack;for(let s=0;s<t.length;s++){let r=t[s];if(!(i&&!r.default||!i&&!e)&&(!e||Ut(r,e)))return s}if(e){for(let s=0;s<t.length;s++){let r=t[s];if(Vt(e.attrs,r.attrs,["LANGUAGE","ASSOC-LANGUAGE","CHARACTERISTICS"]))return s}for(let s=0;s<t.length;s++){let r=t[s];if(Vt(e.attrs,r.attrs,["LANGUAGE"]))return s}}return-1}findTrackForTextTrack(e){if(e){let t=this.tracksInGroup;for(let i=0;i<t.length;i++){let s=t[i];if(kr(s,e))return i}}return-1}onError(e,t){t.fatal||!t.context||t.context.type===z.SUBTITLE_TRACK&&t.context.id===this.trackId&&(!this.groupIds||this.groupIds.indexOf(t.context.groupId)!==-1)&&this.checkRetry(t)}get allSubtitleTracks(){return this.tracks}get subtitleTracks(){return this.tracksInGroup}get subtitleTrack(){return this.trackId}set subtitleTrack(e){this.selectDefaultTrack=!1,this.setSubtitleTrack(e)}setSubtitleOption(e){if(this.hls.config.subtitlePreference=e,e){let t=this.allSubtitleTracks;if(this.selectDefaultTrack=!1,t.length){let i=this.currentTrack;if(i&&Ut(e,i))return i;let s=We(e,this.tracksInGroup);if(s>-1){let r=this.tracksInGroup[s];return this.setSubtitleTrack(s),r}else{if(i)return null;{let r=We(e,t);if(r>-1)return t[r]}}}}return null}loadPlaylist(e){super.loadPlaylist();let t=this.currentTrack;if(this.shouldLoadPlaylist(t)&&t){let i=t.id,s=t.groupId,r=t.url;if(e)try{r=e.addDirectives(r)}catch(o){this.warn(`Could not construct new URL with HLS Delivery Directives: ${o}`)}this.log(`Loading subtitle playlist for id ${i}`),this.hls.trigger(p.SUBTITLE_TRACK_LOADING,{url:r,id:i,groupId:s,deliveryDirectives:e||null})}}toggleTrackModes(){let{media:e}=this;if(!e)return;let t=Pi(e.textTracks),i=this.currentTrack,s;if(i&&(s=t.filter(r=>kr(i,r))[0],s||this.warn(`Unable to find subtitle TextTrack with name "${i.name}" and language "${i.lang}"`)),[].slice.call(t).forEach(r=>{r.mode!=="disabled"&&r!==s&&(r.mode="disabled")}),s){let r=this.subtitleDisplay?"showing":"hidden";s.mode!==r&&(s.mode=r)}}setSubtitleTrack(e){let t=this.tracksInGroup;if(!this.media){this.queuedDefaultTrack=e;return}if(e<-1||e>=t.length||!M(e)){this.warn(`Invalid subtitle track id: ${e}`);return}this.clearTimer(),this.selectDefaultTrack=!1;let i=this.currentTrack,s=t[e]||null;if(this.trackId=e,this.currentTrack=s,this.toggleTrackModes(),!s){this.hls.trigger(p.SUBTITLE_TRACK_SWITCH,{id:e});return}let r=!!s.details&&!s.details.live;if(e===this.trackId&&s===i&&r)return;this.log(`Switching to subtitle-track ${e}`+(s?` "${s.name}" lang:${s.lang} group:${s.groupId}`:""));let{id:o,groupId:a="",name:l,type:c,url:u}=s;this.hls.trigger(p.SUBTITLE_TRACK_SWITCH,{id:o,groupId:a,name:l,type:c,url:u});let h=this.switchParams(s.url,i==null?void 0:i.details,s.details);this.loadPlaylist(h)}},Nr=class{constructor(e){this.buffers=void 0,this.queues={video:[],audio:[],audiovideo:[]},this.buffers=e}append(e,t,i){let s=this.queues[t];s.push(e),s.length===1&&!i&&this.executeNext(t)}insertAbort(e,t){this.queues[t].unshift(e),this.executeNext(t)}appendBlocker(e){let t,i=new Promise(r=>{t=r}),s={execute:t,onStart:()=>{},onComplete:()=>{},onError:()=>{}};return this.append(s,e),i}executeNext(e){let t=this.queues[e];if(t.length){let i=t[0];try{i.execute()}catch(s){L.warn(`[buffer-operation-queue]: Exception executing "${e}" SourceBuffer operation: ${s}`),i.onError(s);let r=this.buffers[e];r!=null&&r.updating||this.shiftAndExecuteNext(e)}}}shiftAndExecuteNext(e){this.queues[e].shift(),this.executeNext(e)}current(e){return this.queues[e][0]}},Go=/(avc[1234]|hvc1|hev1|dvh[1e]|vp09|av01)(?:\.[^.,]+)+/,Br=class{constructor(e){this.details=null,this._objectUrl=null,this.operationQueue=void 0,this.listeners=void 0,this.hls=void 0,this.bufferCodecEventsExpected=0,this._bufferCodecEventsTotal=0,this.media=null,this.mediaSource=null,this.lastMpegAudioChunk=null,this.appendSource=void 0,this.appendErrors={audio:0,video:0,audiovideo:0},this.tracks={},this.pendingTracks={},this.sourceBuffer=void 0,this.log=void 0,this.warn=void 0,this.error=void 0,this._onEndStreaming=i=>{this.hls&&this.hls.pauseBuffering()},this._onStartStreaming=i=>{this.hls&&this.hls.resumeBuffering()},this._onMediaSourceOpen=()=>{let{media:i,mediaSource:s}=this;this.log("Media source opened"),i&&(i.removeEventListener("emptied",this._onMediaEmptied),this.updateMediaElementDuration(),this.hls.trigger(p.MEDIA_ATTACHED,{media:i,mediaSource:s})),s&&s.removeEventListener("sourceopen",this._onMediaSourceOpen),this.checkPendingTracks()},this._onMediaSourceClose=()=>{this.log("Media source closed")},this._onMediaSourceEnded=()=>{this.log("Media source ended")},this._onMediaEmptied=()=>{let{mediaSrc:i,_objectUrl:s}=this;i!==s&&L.error(`Media element src was set while attaching MediaSource (${s} > ${i})`)},this.hls=e;let t="[buffer-controller]";this.appendSource=Hc(Rt(e.config.preferManagedMediaSource)),this.log=L.log.bind(L,t),this.warn=L.warn.bind(L,t),this.error=L.error.bind(L,t),this._initSourceBuffer(),this.registerListeners()}hasSourceTypes(){return this.getSourceBufferTypes().length>0||Object.keys(this.pendingTracks).length>0}destroy(){this.unregisterListeners(),this.details=null,this.lastMpegAudioChunk=null,this.hls=null}registerListeners(){let{hls:e}=this;e.on(p.MEDIA_ATTACHING,this.onMediaAttaching,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_PARSED,this.onManifestParsed,this),e.on(p.BUFFER_RESET,this.onBufferReset,this),e.on(p.BUFFER_APPENDING,this.onBufferAppending,this),e.on(p.BUFFER_CODECS,this.onBufferCodecs,this),e.on(p.BUFFER_EOS,this.onBufferEos,this),e.on(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.on(p.LEVEL_UPDATED,this.onLevelUpdated,this),e.on(p.FRAG_PARSED,this.onFragParsed,this),e.on(p.FRAG_CHANGED,this.onFragChanged,this)}unregisterListeners(){let{hls:e}=this;e.off(p.MEDIA_ATTACHING,this.onMediaAttaching,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_PARSED,this.onManifestParsed,this),e.off(p.BUFFER_RESET,this.onBufferReset,this),e.off(p.BUFFER_APPENDING,this.onBufferAppending,this),e.off(p.BUFFER_CODECS,this.onBufferCodecs,this),e.off(p.BUFFER_EOS,this.onBufferEos,this),e.off(p.BUFFER_FLUSHING,this.onBufferFlushing,this),e.off(p.LEVEL_UPDATED,this.onLevelUpdated,this),e.off(p.FRAG_PARSED,this.onFragParsed,this),e.off(p.FRAG_CHANGED,this.onFragChanged,this)}_initSourceBuffer(){this.sourceBuffer={},this.operationQueue=new Nr(this.sourceBuffer),this.listeners={audio:[],video:[],audiovideo:[]},this.appendErrors={audio:0,video:0,audiovideo:0},this.lastMpegAudioChunk=null}onManifestLoading(){this.bufferCodecEventsExpected=this._bufferCodecEventsTotal=0,this.details=null}onManifestParsed(e,t){let i=2;(t.audio&&!t.video||!t.altAudio)&&(i=1),this.bufferCodecEventsExpected=this._bufferCodecEventsTotal=i,this.log(`${this.bufferCodecEventsExpected} bufferCodec event(s) expected`)}onMediaAttaching(e,t){let i=this.media=t.media,s=Rt(this.appendSource);if(i&&s){var r;let o=this.mediaSource=new s;this.log(`created media source: ${(r=o.constructor)==null?void 0:r.name}`),o.addEventListener("sourceopen",this._onMediaSourceOpen),o.addEventListener("sourceended",this._onMediaSourceEnded),o.addEventListener("sourceclose",this._onMediaSourceClose),this.appendSource&&(o.addEventListener("startstreaming",this._onStartStreaming),o.addEventListener("endstreaming",this._onEndStreaming));let a=this._objectUrl=self.URL.createObjectURL(o);if(this.appendSource)try{i.removeAttribute("src");let l=self.ManagedMediaSource;i.disableRemotePlayback=i.disableRemotePlayback||l&&o instanceof l,Ho(i),nh(i,a),i.load()}catch(l){i.src=a}else i.src=a;i.addEventListener("emptied",this._onMediaEmptied)}}onMediaDetaching(){let{media:e,mediaSource:t,_objectUrl:i}=this;if(t){if(this.log("media source detaching"),t.readyState==="open")try{t.endOfStream()}catch(s){this.warn(`onMediaDetaching: ${s.message} while calling endOfStream`)}this.onBufferReset(),t.removeEventListener("sourceopen",this._onMediaSourceOpen),t.removeEventListener("sourceended",this._onMediaSourceEnded),t.removeEventListener("sourceclose",this._onMediaSourceClose),this.appendSource&&(t.removeEventListener("startstreaming",this._onStartStreaming),t.removeEventListener("endstreaming",this._onEndStreaming)),e&&(e.removeEventListener("emptied",this._onMediaEmptied),i&&self.URL.revokeObjectURL(i),this.mediaSrc===i?(e.removeAttribute("src"),this.appendSource&&Ho(e),e.load()):this.warn("media|source.src was changed by a third party - skip cleanup")),this.mediaSource=null,this.media=null,this._objectUrl=null,this.bufferCodecEventsExpected=this._bufferCodecEventsTotal,this.pendingTracks={},this.tracks={}}this.hls.trigger(p.MEDIA_DETACHED,void 0)}onBufferReset(){this.getSourceBufferTypes().forEach(e=>{this.resetBuffer(e)}),this._initSourceBuffer()}resetBuffer(e){let t=this.sourceBuffer[e];try{if(t){var i;this.removeBufferListeners(e),this.sourceBuffer[e]=void 0,(i=this.mediaSource)!=null&&i.sourceBuffers.length&&this.mediaSource.removeSourceBuffer(t)}}catch(s){this.warn(`onBufferReset ${e}`,s)}}onBufferCodecs(e,t){let i=this.getSourceBufferTypes().length,s=Object.keys(t);if(s.forEach(o=>{if(i){let l=this.tracks[o];if(l&&typeof l.buffer.changeType=="function"){var a;let{id:c,codec:u,levelCodec:h,container:d,metadata:f}=t[o],g=go(l.codec,l.levelCodec),m=g==null?void 0:g.replace(Go,"$1"),y=go(u,h),T=(a=y)==null?void 0:a.replace(Go,"$1");if(y&&m!==T){o.slice(0,5)==="audio"&&(y=Wi(y,this.appendSource));let v=`${d};codecs=${y}`;this.appendChangeType(o,v),this.log(`switching codec ${g} to ${y}`),this.tracks[o]={buffer:l.buffer,codec:u,container:d,levelCodec:h,metadata:f,id:c}}}}else this.pendingTracks[o]=t[o]}),i)return;let r=Math.max(this.bufferCodecEventsExpected-1,0);this.bufferCodecEventsExpected!==r&&(this.log(`${r} bufferCodec event(s) expected ${s.join(",")}`),this.bufferCodecEventsExpected=r),this.mediaSource&&this.mediaSource.readyState==="open"&&this.checkPendingTracks()}appendChangeType(e,t){let{operationQueue:i}=this,s={execute:()=>{let r=this.sourceBuffer[e];r&&(this.log(`changing ${e} sourceBuffer type to ${t}`),r.changeType(t)),i.shiftAndExecuteNext(e)},onStart:()=>{},onComplete:()=>{},onError:r=>{this.warn(`Failed to change ${e} SourceBuffer type`,r)}};i.append(s,e,!!this.pendingTracks[e])}onBufferAppending(e,t){let{hls:i,operationQueue:s,tracks:r}=this,{data:o,type:a,frag:l,part:c,chunkMeta:u}=t,h=u.buffering[a],d=self.performance.now();h.start=d;let f=l.stats.buffering,g=c?c.stats.buffering:null;f.start===0&&(f.start=d),g&&g.start===0&&(g.start=d);let m=r.audio,y=!1;a==="audio"&&(m==null?void 0:m.container)==="audio/mpeg"&&(y=!this.lastMpegAudioChunk||u.id===1||this.lastMpegAudioChunk.sn!==u.sn,this.lastMpegAudioChunk=u);let T=l.start,v={execute:()=>{if(h.executeStart=self.performance.now(),y){let E=this.sourceBuffer[a];if(E){let S=T-E.timestampOffset;Math.abs(S)>=.1&&(this.log(`Updating audio SourceBuffer timestampOffset to ${T} (delta: ${S}) sn: ${l.sn})`),E.timestampOffset=T)}}this.appendExecutor(o,a)},onStart:()=>{},onComplete:()=>{let E=self.performance.now();h.executeEnd=h.end=E,f.first===0&&(f.first=E),g&&g.first===0&&(g.first=E);let{sourceBuffer:S}=this,x={};for(let A in S)x[A]=J.getBuffered(S[A]);this.appendErrors[a]=0,a==="audio"||a==="video"?this.appendErrors.audiovideo=0:(this.appendErrors.audio=0,this.appendErrors.video=0),this.hls.trigger(p.BUFFER_APPENDED,{type:a,frag:l,part:c,chunkMeta:u,parent:l.type,timeRanges:x})},onError:E=>{let S={type:V.MEDIA_ERROR,parent:l.type,details:I.BUFFER_APPEND_ERROR,sourceBufferName:a,frag:l,part:c,chunkMeta:u,error:E,err:E,fatal:!1};if(E.code===DOMException.QUOTA_EXCEEDED_ERR)S.details=I.BUFFER_FULL_ERROR;else{let x=++this.appendErrors[a];S.details=I.BUFFER_APPEND_ERROR,this.warn(`Failed ${x}/${i.config.appendErrorMaxRetry} times to append segment in "${a}" sourceBuffer`),x>=i.config.appendErrorMaxRetry&&(S.fatal=!0)}i.trigger(p.ERROR,S)}};s.append(v,a,!!this.pendingTracks[a])}onBufferFlushing(e,t){let{operationQueue:i}=this,s=r=>({execute:this.removeExecutor.bind(this,r,t.startOffset,t.endOffset),onStart:()=>{},onComplete:()=>{this.hls.trigger(p.BUFFER_FLUSHED,{type:r})},onError:o=>{this.warn(`Failed to remove from ${r} SourceBuffer`,o)}});t.type?i.append(s(t.type),t.type):this.getSourceBufferTypes().forEach(r=>{i.append(s(r),r)})}onFragParsed(e,t){let{frag:i,part:s}=t,r=[],o=s?s.elementaryStreams:i.elementaryStreams;o[Q.AUDIOVIDEO]?r.push("audiovideo"):(o[Q.AUDIO]&&r.push("audio"),o[Q.VIDEO]&&r.push("video"));let a=()=>{let l=self.performance.now();i.stats.buffering.end=l,s&&(s.stats.buffering.end=l);let c=s?s.stats:i.stats;this.hls.trigger(p.FRAG_BUFFERED,{frag:i,part:s,stats:c,id:i.type})};r.length===0&&this.warn(`Fragments must have at least one ElementaryStreamType set. type: ${i.type} level: ${i.level} sn: ${i.sn}`),this.blockBuffers(a,r)}onFragChanged(e,t){this.trimBuffers()}onBufferEos(e,t){this.getSourceBufferTypes().reduce((s,r)=>{let o=this.sourceBuffer[r];return o&&(!t.type||t.type===r)&&(o.ending=!0,o.ended||(o.ended=!0,this.log(`${r} sourceBuffer now EOS`))),s&&!!(!o||o.ended)},!0)&&(this.log("Queueing mediaSource.endOfStream()"),this.blockBuffers(()=>{this.getSourceBufferTypes().forEach(r=>{let o=this.sourceBuffer[r];o&&(o.ending=!1)});let{mediaSource:s}=this;if(!s||s.readyState!=="open"){s&&this.log(`Could not call mediaSource.endOfStream(). mediaSource.readyState: ${s.readyState}`);return}this.log("Calling mediaSource.endOfStream()"),s.endOfStream()}))}onLevelUpdated(e,{details:t}){t.fragments.length&&(this.details=t,this.getSourceBufferTypes().length?this.blockBuffers(this.updateMediaElementDuration.bind(this)):this.updateMediaElementDuration())}trimBuffers(){let{hls:e,details:t,media:i}=this;if(!i||t===null||!this.getSourceBufferTypes().length)return;let r=e.config,o=i.currentTime,a=t.levelTargetDuration,l=t.live&&r.liveBackBufferLength!==null?r.liveBackBufferLength:r.backBufferLength;if(M(l)&&l>0){let c=Math.max(l,a),u=Math.floor(o/a)*a-c;this.flushBackBuffer(o,a,u)}if(M(r.frontBufferFlushThreshold)&&r.frontBufferFlushThreshold>0){let c=Math.max(r.maxBufferLength,r.frontBufferFlushThreshold),u=Math.max(c,a),h=Math.floor(o/a)*a+u;this.flushFrontBuffer(o,a,h)}}flushBackBuffer(e,t,i){let{details:s,sourceBuffer:r}=this;this.getSourceBufferTypes().forEach(a=>{let l=r[a];if(l){let c=J.getBuffered(l);if(c.length>0&&i>c.start(0)){if(this.hls.trigger(p.BACK_BUFFER_REACHED,{bufferEnd:i}),s!=null&&s.live)this.hls.trigger(p.LIVE_BACK_BUFFER_REACHED,{bufferEnd:i});else if(l.ended&&c.end(c.length-1)-e<t*2){this.log(`Cannot flush ${a} back buffer while SourceBuffer is in ended state`);return}this.hls.trigger(p.BUFFER_FLUSHING,{startOffset:0,endOffset:i,type:a})}}})}flushFrontBuffer(e,t,i){let{sourceBuffer:s}=this;this.getSourceBufferTypes().forEach(o=>{let a=s[o];if(a){let l=J.getBuffered(a),c=l.length;if(c<2)return;let u=l.start(c-1),h=l.end(c-1);if(i>u||e>=u&&e<=h)return;if(a.ended&&e-h<2*t){this.log(`Cannot flush ${o} front buffer while SourceBuffer is in ended state`);return}this.hls.trigger(p.BUFFER_FLUSHING,{startOffset:u,endOffset:1/0,type:o})}})}updateMediaElementDuration(){if(!this.details||!this.media||!this.mediaSource||this.mediaSource.readyState!=="open")return;let{details:e,hls:t,media:i,mediaSource:s}=this,r=e.fragments[0].start+e.totalduration,o=i.duration,a=M(s.duration)?s.duration:0;e.live&&t.config.liveDurationInfinity?(s.duration=1/0,this.updateSeekableRange(e)):(r>a&&r>o||!M(o))&&(this.log(`Updating Media Source duration to ${r.toFixed(3)}`),s.duration=r)}updateSeekableRange(e){let t=this.mediaSource,i=e.fragments;if(i.length&&e.live&&t!=null&&t.setLiveSeekableRange){let r=Math.max(0,i[0].start),o=Math.max(r,r+e.totalduration);this.log(`Media Source duration is set to ${t.duration}. Setting seekable range to ${r}-${o}.`),t.setLiveSeekableRange(r,o)}}checkPendingTracks(){let{bufferCodecEventsExpected:e,operationQueue:t,pendingTracks:i}=this,s=Object.keys(i).length;if(s&&(!e||s===2||"audiovideo"in i)){this.createSourceBuffers(i),this.pendingTracks={};let r=this.getSourceBufferTypes();if(r.length)this.hls.trigger(p.BUFFER_CREATED,{tracks:this.tracks}),r.forEach(o=>{t.executeNext(o)});else{let o=new Error("could not create source buffer for media codec(s)");this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_INCOMPATIBLE_CODECS_ERROR,fatal:!0,error:o,reason:o.message})}}}createSourceBuffers(e){let{sourceBuffer:t,mediaSource:i}=this;if(!i)throw Error("createSourceBuffers called when mediaSource was null");for(let r in e)if(!t[r]){var s;let o=e[r];if(!o)throw Error(`source buffer exists for track ${r}, however track does not`);let a=((s=o.levelCodec)==null?void 0:s.indexOf(","))===-1?o.levelCodec:o.codec;a&&r.slice(0,5)==="audio"&&(a=Wi(a,this.appendSource));let l=`${o.container};codecs=${a}`;this.log(`creating sourceBuffer(${l})`);try{let c=t[r]=i.addSourceBuffer(l),u=r;this.addBufferListener(u,"updatestart",this._onSBUpdateStart),this.addBufferListener(u,"updateend",this._onSBUpdateEnd),this.addBufferListener(u,"error",this._onSBUpdateError),this.appendSource&&this.addBufferListener(u,"bufferedchange",(h,d)=>{let f=d.removedRanges;f!=null&&f.length&&this.hls.trigger(p.BUFFER_FLUSHED,{type:r})}),this.tracks[r]={buffer:c,codec:a,container:o.container,levelCodec:o.levelCodec,metadata:o.metadata,id:o.id}}catch(c){this.error(`error while trying to add sourceBuffer: ${c.message}`),this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_ADD_CODEC_ERROR,fatal:!1,error:c,sourceBufferName:r,mimeType:l})}}}get mediaSrc(){var e;let t=((e=this.media)==null?void 0:e.firstChild)||this.media;return t==null?void 0:t.src}_onSBUpdateStart(e){let{operationQueue:t}=this;t.current(e).onStart()}_onSBUpdateEnd(e){var t;if(((t=this.mediaSource)==null?void 0:t.readyState)==="closed"){this.resetBuffer(e);return}let{operationQueue:i}=this;i.current(e).onComplete(),i.shiftAndExecuteNext(e)}_onSBUpdateError(e,t){var i;let s=new Error(`${e} SourceBuffer error. MediaSource readyState: ${(i=this.mediaSource)==null?void 0:i.readyState}`);this.error(`${s}`,t),this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_APPENDING_ERROR,sourceBufferName:e,error:s,fatal:!1});let r=this.operationQueue.current(e);r&&r.onError(s)}removeExecutor(e,t,i){let{media:s,mediaSource:r,operationQueue:o,sourceBuffer:a}=this,l=a[e];if(!s||!r||!l){this.warn(`Attempting to remove from the ${e} SourceBuffer, but it does not exist`),o.shiftAndExecuteNext(e);return}let c=M(s.duration)?s.duration:1/0,u=M(r.duration)?r.duration:1/0,h=Math.max(0,t),d=Math.min(i,c,u);d>h&&(!l.ending||l.ended)?(l.ended=!1,this.log(`Removing [${h},${d}] from the ${e} SourceBuffer`),l.remove(h,d)):o.shiftAndExecuteNext(e)}appendExecutor(e,t){let i=this.sourceBuffer[t];if(!i){if(!this.pendingTracks[t])throw new Error(`Attempting to append to the ${t} SourceBuffer, but it does not exist`);return}i.ended=!1,i.appendBuffer(e)}blockBuffers(e,t=this.getSourceBufferTypes()){if(!t.length){this.log("Blocking operation requested, but no SourceBuffers exist"),Promise.resolve().then(e);return}let{operationQueue:i}=this,s=t.map(r=>i.appendBlocker(r));Promise.all(s).then(()=>{e(),t.forEach(r=>{let o=this.sourceBuffer[r];o!=null&&o.updating||i.shiftAndExecuteNext(r)})})}getSourceBufferTypes(){return Object.keys(this.sourceBuffer)}addBufferListener(e,t,i){let s=this.sourceBuffer[e];if(!s)return;let r=i.bind(this,e);this.listeners[e].push({event:t,listener:r}),s.addEventListener(t,r)}removeBufferListeners(e){let t=this.sourceBuffer[e];t&&this.listeners[e].forEach(i=>{t.removeEventListener(i.event,i.listener)})}};function Ho(n){let e=n.querySelectorAll("source");[].slice.call(e).forEach(t=>{n.removeChild(t)})}function nh(n,e){let t=self.document.createElement("source");t.type="video/mp4",t.src=e,n.appendChild(t)}var oh={42:225,92:233,94:237,95:243,96:250,123:231,124:247,125:209,126:241,127:9608,128:174,129:176,130:189,131:191,132:8482,133:162,134:163,135:9834,136:224,137:32,138:232,139:226,140:234,141:238,142:244,143:251,144:193,145:201,146:211,147:218,148:220,149:252,150:8216,151:161,152:42,153:8217,154:9473,155:169,156:8480,157:8226,158:8220,159:8221,160:192,161:194,162:199,163:200,164:202,165:203,166:235,167:206,168:207,169:239,170:212,171:217,172:249,173:219,174:171,175:187,176:195,177:227,178:205,179:204,180:236,181:210,182:242,183:213,184:245,185:123,186:125,187:92,188:94,189:95,190:124,191:8764,192:196,193:228,194:214,195:246,196:223,197:165,198:164,199:9475,200:197,201:229,202:216,203:248,204:9487,205:9491,206:9495,207:9499},Ua=n=>String.fromCharCode(oh[n]||n),Ne=15,Je=100,ah={17:1,18:3,21:5,22:7,23:9,16:11,19:12,20:14},lh={17:2,18:4,21:6,22:8,23:10,19:13,20:15},ch={25:1,26:3,29:5,30:7,31:9,24:11,27:12,28:14},uh={25:2,26:4,29:6,30:8,31:10,27:13,28:15},hh=["white","green","blue","cyan","red","yellow","magenta","black","transparent"],Ur=class{constructor(){this.time=null,this.verboseLevel=0}log(e,t){if(this.verboseLevel>=e){let i=typeof t=="function"?t():t;L.log(`${this.time} [${e}] ${i}`)}}},vt=function(e){let t=[];for(let i=0;i<e.length;i++)t.push(e[i].toString(16));return t},os=class{constructor(){this.foreground="white",this.underline=!1,this.italics=!1,this.background="black",this.flash=!1}reset(){this.foreground="white",this.underline=!1,this.italics=!1,this.background="black",this.flash=!1}setStyles(e){let t=["foreground","underline","italics","background","flash"];for(let i=0;i<t.length;i++){let s=t[i];e.hasOwnProperty(s)&&(this[s]=e[s])}}isDefault(){return this.foreground==="white"&&!this.underline&&!this.italics&&this.background==="black"&&!this.flash}equals(e){return this.foreground===e.foreground&&this.underline===e.underline&&this.italics===e.italics&&this.background===e.background&&this.flash===e.flash}copy(e){this.foreground=e.foreground,this.underline=e.underline,this.italics=e.italics,this.background=e.background,this.flash=e.flash}toString(){return"color="+this.foreground+", underline="+this.underline+", italics="+this.italics+", background="+this.background+", flash="+this.flash}},$r=class{constructor(){this.uchar=" ",this.penState=new os}reset(){this.uchar=" ",this.penState.reset()}setChar(e,t){this.uchar=e,this.penState.copy(t)}setPenState(e){this.penState.copy(e)}equals(e){return this.uchar===e.uchar&&this.penState.equals(e.penState)}copy(e){this.uchar=e.uchar,this.penState.copy(e.penState)}isEmpty(){return this.uchar===" "&&this.penState.isDefault()}},Gr=class{constructor(e){this.chars=[],this.pos=0,this.currPenState=new os,this.cueStartTime=null,this.logger=void 0;for(let t=0;t<Je;t++)this.chars.push(new $r);this.logger=e}equals(e){for(let t=0;t<Je;t++)if(!this.chars[t].equals(e.chars[t]))return!1;return!0}copy(e){for(let t=0;t<Je;t++)this.chars[t].copy(e.chars[t])}isEmpty(){let e=!0;for(let t=0;t<Je;t++)if(!this.chars[t].isEmpty()){e=!1;break}return e}setCursor(e){this.pos!==e&&(this.pos=e),this.pos<0?(this.logger.log(3,"Negative cursor position "+this.pos),this.pos=0):this.pos>Je&&(this.logger.log(3,"Too large cursor position "+this.pos),this.pos=Je)}moveCursor(e){let t=this.pos+e;if(e>1)for(let i=this.pos+1;i<t+1;i++)this.chars[i].setPenState(this.currPenState);this.setCursor(t)}backSpace(){this.moveCursor(-1),this.chars[this.pos].setChar(" ",this.currPenState)}insertChar(e){e>=144&&this.backSpace();let t=Ua(e);if(this.pos>=Je){this.logger.log(0,()=>"Cannot insert "+e.toString(16)+" ("+t+") at position "+this.pos+". Skipping it!");return}this.chars[this.pos].setChar(t,this.currPenState),this.moveCursor(1)}clearFromPos(e){let t;for(t=e;t<Je;t++)this.chars[t].reset()}clear(){this.clearFromPos(0),this.pos=0,this.currPenState.reset()}clearToEndOfRow(){this.clearFromPos(this.pos)}getTextString(){let e=[],t=!0;for(let i=0;i<Je;i++){let s=this.chars[i].uchar;s!==" "&&(t=!1),e.push(s)}return t?"":e.join("")}setPenStyles(e){this.currPenState.setStyles(e),this.chars[this.pos].setPenState(this.currPenState)}},ii=class{constructor(e){this.rows=[],this.currRow=Ne-1,this.nrRollUpRows=null,this.lastOutputScreen=null,this.logger=void 0;for(let t=0;t<Ne;t++)this.rows.push(new Gr(e));this.logger=e}reset(){for(let e=0;e<Ne;e++)this.rows[e].clear();this.currRow=Ne-1}equals(e){let t=!0;for(let i=0;i<Ne;i++)if(!this.rows[i].equals(e.rows[i])){t=!1;break}return t}copy(e){for(let t=0;t<Ne;t++)this.rows[t].copy(e.rows[t])}isEmpty(){let e=!0;for(let t=0;t<Ne;t++)if(!this.rows[t].isEmpty()){e=!1;break}return e}backSpace(){this.rows[this.currRow].backSpace()}clearToEndOfRow(){this.rows[this.currRow].clearToEndOfRow()}insertChar(e){this.rows[this.currRow].insertChar(e)}setPen(e){this.rows[this.currRow].setPenStyles(e)}moveCursor(e){this.rows[this.currRow].moveCursor(e)}setCursor(e){this.logger.log(2,"setCursor: "+e),this.rows[this.currRow].setCursor(e)}setPAC(e){this.logger.log(2,()=>"pacData = "+JSON.stringify(e));let t=e.row-1;if(this.nrRollUpRows&&t<this.nrRollUpRows-1&&(t=this.nrRollUpRows-1),this.nrRollUpRows&&this.currRow!==t){for(let a=0;a<Ne;a++)this.rows[a].clear();let r=this.currRow+1-this.nrRollUpRows,o=this.lastOutputScreen;if(o){let a=o.rows[r].cueStartTime,l=this.logger.time;if(a!==null&&l!==null&&a<l)for(let c=0;c<this.nrRollUpRows;c++)this.rows[t-this.nrRollUpRows+c+1].copy(o.rows[r+c])}}this.currRow=t;let i=this.rows[this.currRow];if(e.indent!==null){let r=e.indent,o=Math.max(r-1,0);i.setCursor(e.indent),e.color=i.chars[o].penState.foreground}let s={foreground:e.color,underline:e.underline,italics:e.italics,background:"black",flash:!1};this.setPen(s)}setBkgData(e){this.logger.log(2,()=>"bkgData = "+JSON.stringify(e)),this.backSpace(),this.setPen(e),this.insertChar(32)}setRollUpRows(e){this.nrRollUpRows=e}rollUp(){if(this.nrRollUpRows===null){this.logger.log(3,"roll_up but nrRollUpRows not set yet");return}this.logger.log(1,()=>this.getDisplayText());let e=this.currRow+1-this.nrRollUpRows,t=this.rows.splice(e,1)[0];t.clear(),this.rows.splice(this.currRow,0,t),this.logger.log(2,"Rolling up")}getDisplayText(e){e=e||!1;let t=[],i="",s=-1;for(let r=0;r<Ne;r++){let o=this.rows[r].getTextString();o&&(s=r+1,e?t.push("Row "+s+": '"+o+"'"):t.push(o.trim()))}return t.length>0&&(e?i="["+t.join(" | ")+"]":i=t.join(`
`)),i}getTextAndFormat(){return this.rows}},as=class{constructor(e,t,i){this.chNr=void 0,this.outputFilter=void 0,this.mode=void 0,this.verbose=void 0,this.displayedMemory=void 0,this.nonDisplayedMemory=void 0,this.lastOutputScreen=void 0,this.currRollUpRow=void 0,this.writeScreen=void 0,this.cueStartTime=void 0,this.logger=void 0,this.chNr=e,this.outputFilter=t,this.mode=null,this.verbose=0,this.displayedMemory=new ii(i),this.nonDisplayedMemory=new ii(i),this.lastOutputScreen=new ii(i),this.currRollUpRow=this.displayedMemory.rows[Ne-1],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null,this.logger=i}reset(){this.mode=null,this.displayedMemory.reset(),this.nonDisplayedMemory.reset(),this.lastOutputScreen.reset(),this.outputFilter.reset(),this.currRollUpRow=this.displayedMemory.rows[Ne-1],this.writeScreen=this.displayedMemory,this.mode=null,this.cueStartTime=null}getHandler(){return this.outputFilter}setHandler(e){this.outputFilter=e}setPAC(e){this.writeScreen.setPAC(e)}setBkgData(e){this.writeScreen.setBkgData(e)}setMode(e){e!==this.mode&&(this.mode=e,this.logger.log(2,()=>"MODE="+e),this.mode==="MODE_POP-ON"?this.writeScreen=this.nonDisplayedMemory:(this.writeScreen=this.displayedMemory,this.writeScreen.reset()),this.mode!=="MODE_ROLL-UP"&&(this.displayedMemory.nrRollUpRows=null,this.nonDisplayedMemory.nrRollUpRows=null),this.mode=e)}insertChars(e){for(let i=0;i<e.length;i++)this.writeScreen.insertChar(e[i]);let t=this.writeScreen===this.displayedMemory?"DISP":"NON_DISP";this.logger.log(2,()=>t+": "+this.writeScreen.getDisplayText(!0)),(this.mode==="MODE_PAINT-ON"||this.mode==="MODE_ROLL-UP")&&(this.logger.log(1,()=>"DISPLAYED: "+this.displayedMemory.getDisplayText(!0)),this.outputDataUpdate())}ccRCL(){this.logger.log(2,"RCL - Resume Caption Loading"),this.setMode("MODE_POP-ON")}ccBS(){this.logger.log(2,"BS - BackSpace"),this.mode!=="MODE_TEXT"&&(this.writeScreen.backSpace(),this.writeScreen===this.displayedMemory&&this.outputDataUpdate())}ccAOF(){}ccAON(){}ccDER(){this.logger.log(2,"DER- Delete to End of Row"),this.writeScreen.clearToEndOfRow(),this.outputDataUpdate()}ccRU(e){this.logger.log(2,"RU("+e+") - Roll Up"),this.writeScreen=this.displayedMemory,this.setMode("MODE_ROLL-UP"),this.writeScreen.setRollUpRows(e)}ccFON(){this.logger.log(2,"FON - Flash On"),this.writeScreen.setPen({flash:!0})}ccRDC(){this.logger.log(2,"RDC - Resume Direct Captioning"),this.setMode("MODE_PAINT-ON")}ccTR(){this.logger.log(2,"TR"),this.setMode("MODE_TEXT")}ccRTD(){this.logger.log(2,"RTD"),this.setMode("MODE_TEXT")}ccEDM(){this.logger.log(2,"EDM - Erase Displayed Memory"),this.displayedMemory.reset(),this.outputDataUpdate(!0)}ccCR(){this.logger.log(2,"CR - Carriage Return"),this.writeScreen.rollUp(),this.outputDataUpdate(!0)}ccENM(){this.logger.log(2,"ENM - Erase Non-displayed Memory"),this.nonDisplayedMemory.reset()}ccEOC(){if(this.logger.log(2,"EOC - End Of Caption"),this.mode==="MODE_POP-ON"){let e=this.displayedMemory;this.displayedMemory=this.nonDisplayedMemory,this.nonDisplayedMemory=e,this.writeScreen=this.nonDisplayedMemory,this.logger.log(1,()=>"DISP: "+this.displayedMemory.getDisplayText())}this.outputDataUpdate(!0)}ccTO(e){this.logger.log(2,"TO("+e+") - Tab Offset"),this.writeScreen.moveCursor(e)}ccMIDROW(e){let t={flash:!1};if(t.underline=e%2===1,t.italics=e>=46,t.italics)t.foreground="white";else{let i=Math.floor(e/2)-16,s=["white","green","blue","cyan","red","yellow","magenta"];t.foreground=s[i]}this.logger.log(2,"MIDROW: "+JSON.stringify(t)),this.writeScreen.setPen(t)}outputDataUpdate(e=!1){let t=this.logger.time;t!==null&&this.outputFilter&&(this.cueStartTime===null&&!this.displayedMemory.isEmpty()?this.cueStartTime=t:this.displayedMemory.equals(this.lastOutputScreen)||(this.outputFilter.newCue(this.cueStartTime,t,this.lastOutputScreen),e&&this.outputFilter.dispatchCue&&this.outputFilter.dispatchCue(),this.cueStartTime=this.displayedMemory.isEmpty()?null:t),this.lastOutputScreen.copy(this.displayedMemory))}cueSplitAtTime(e){this.outputFilter&&(this.displayedMemory.isEmpty()||(this.outputFilter.newCue&&this.outputFilter.newCue(this.cueStartTime,e,this.displayedMemory),this.cueStartTime=e))}},ls=class{constructor(e,t,i){this.channels=void 0,this.currentChannel=0,this.cmdHistory=fh(),this.logger=void 0;let s=this.logger=new Ur;this.channels=[null,new as(e,t,s),new as(e+1,i,s)]}getHandler(e){return this.channels[e].getHandler()}setHandler(e,t){this.channels[e].setHandler(t)}addData(e,t){this.logger.time=e;for(let i=0;i<t.length;i+=2){let s=t[i]&127,r=t[i+1]&127,o=!1,a=null;if(s===0&&r===0)continue;this.logger.log(3,()=>"["+vt([t[i],t[i+1]])+"] -> ("+vt([s,r])+")");let l=this.cmdHistory;if(s>=16&&s<=31){if(dh(s,r,l)){Ci(null,null,l),this.logger.log(3,()=>"Repeated command ("+vt([s,r])+") is dropped");continue}Ci(s,r,this.cmdHistory),o=this.parseCmd(s,r),o||(o=this.parseMidrow(s,r)),o||(o=this.parsePAC(s,r)),o||(o=this.parseBackgroundAttributes(s,r))}else Ci(null,null,l);if(!o&&(a=this.parseChars(s,r),a)){let u=this.currentChannel;u&&u>0?this.channels[u].insertChars(a):this.logger.log(2,"No channel found yet. TEXT-MODE?")}!o&&!a&&this.logger.log(2,()=>"Couldn't parse cleaned data "+vt([s,r])+" orig: "+vt([t[i],t[i+1]]))}}parseCmd(e,t){let i=(e===20||e===28||e===21||e===29)&&t>=32&&t<=47,s=(e===23||e===31)&&t>=33&&t<=35;if(!(i||s))return!1;let r=e===20||e===21||e===23?1:2,o=this.channels[r];return e===20||e===21||e===28||e===29?t===32?o.ccRCL():t===33?o.ccBS():t===34?o.ccAOF():t===35?o.ccAON():t===36?o.ccDER():t===37?o.ccRU(2):t===38?o.ccRU(3):t===39?o.ccRU(4):t===40?o.ccFON():t===41?o.ccRDC():t===42?o.ccTR():t===43?o.ccRTD():t===44?o.ccEDM():t===45?o.ccCR():t===46?o.ccENM():t===47&&o.ccEOC():o.ccTO(t-32),this.currentChannel=r,!0}parseMidrow(e,t){let i=0;if((e===17||e===25)&&t>=32&&t<=47){if(e===17?i=1:i=2,i!==this.currentChannel)return this.logger.log(0,"Mismatch channel in midrow parsing"),!1;let s=this.channels[i];return s?(s.ccMIDROW(t),this.logger.log(3,()=>"MIDROW ("+vt([e,t])+")"),!0):!1}return!1}parsePAC(e,t){let i,s=(e>=17&&e<=23||e>=25&&e<=31)&&t>=64&&t<=127,r=(e===16||e===24)&&t>=64&&t<=95;if(!(s||r))return!1;let o=e<=23?1:2;t>=64&&t<=95?i=o===1?ah[e]:ch[e]:i=o===1?lh[e]:uh[e];let a=this.channels[o];return a?(a.setPAC(this.interpretPAC(i,t)),this.currentChannel=o,!0):!1}interpretPAC(e,t){let i,s={color:null,italics:!1,indent:null,underline:!1,row:e};return t>95?i=t-96:i=t-64,s.underline=(i&1)===1,i<=13?s.color=["white","green","blue","cyan","red","yellow","magenta","white"][Math.floor(i/2)]:i<=15?(s.italics=!0,s.color="white"):s.indent=Math.floor((i-16)/2)*4,s}parseChars(e,t){let i,s=null,r=null;if(e>=25?(i=2,r=e-8):(i=1,r=e),r>=17&&r<=19){let o;r===17?o=t+80:r===18?o=t+112:o=t+144,this.logger.log(2,()=>"Special char '"+Ua(o)+"' in channel "+i),s=[o]}else e>=32&&e<=127&&(s=t===0?[e]:[e,t]);return s&&this.logger.log(3,()=>"Char codes =  "+vt(s).join(",")),s}parseBackgroundAttributes(e,t){let i=(e===16||e===24)&&t>=32&&t<=47,s=(e===23||e===31)&&t>=45&&t<=47;if(!(i||s))return!1;let r,o={};e===16||e===24?(r=Math.floor((t-32)/2),o.background=hh[r],t%2===1&&(o.background=o.background+"_semi")):t===45?o.background="transparent":(o.foreground="black",t===47&&(o.underline=!0));let a=e<=23?1:2;return this.channels[a].setBkgData(o),!0}reset(){for(let e=0;e<Object.keys(this.channels).length;e++){let t=this.channels[e];t&&t.reset()}Ci(null,null,this.cmdHistory)}cueSplitAtTime(e){for(let t=0;t<this.channels.length;t++){let i=this.channels[t];i&&i.cueSplitAtTime(e)}}};function Ci(n,e,t){t.a=n,t.b=e}function dh(n,e,t){return t.a===n&&t.b===e}function fh(){return{a:null,b:null}}var Bt=class{constructor(e,t){this.timelineController=void 0,this.cueRanges=[],this.trackName=void 0,this.startTime=null,this.endTime=null,this.screen=null,this.timelineController=e,this.trackName=t}dispatchCue(){this.startTime!==null&&(this.timelineController.addCues(this.trackName,this.startTime,this.endTime,this.screen,this.cueRanges),this.startTime=null)}newCue(e,t,i){(this.startTime===null||this.startTime>e)&&(this.startTime=e),this.endTime=t,this.screen=i,this.timelineController.createCaptionsTrack(this.trackName)}reset(){this.cueRanges=[],this.startTime=null}},mn=function(){if(Ht!=null&&Ht.VTTCue)return self.VTTCue;let n=["","lr","rl"],e=["start","middle","end","left","right"];function t(a,l){if(typeof l!="string"||!Array.isArray(a))return!1;let c=l.toLowerCase();return~a.indexOf(c)?c:!1}function i(a){return t(n,a)}function s(a){return t(e,a)}function r(a,...l){let c=1;for(;c<arguments.length;c++){let u=arguments[c];for(let h in u)a[h]=u[h]}return a}function o(a,l,c){let u=this,h={enumerable:!0};u.hasBeenReset=!1;let d="",f=!1,g=a,m=l,y=c,T=null,v="",E=!0,S="auto",x="start",A=50,b="middle",C=50,_="middle";Object.defineProperty(u,"id",r({},h,{get:function(){return d},set:function(D){d=""+D}})),Object.defineProperty(u,"pauseOnExit",r({},h,{get:function(){return f},set:function(D){f=!!D}})),Object.defineProperty(u,"startTime",r({},h,{get:function(){return g},set:function(D){if(typeof D!="number")throw new TypeError("Start time must be set to a number.");g=D,this.hasBeenReset=!0}})),Object.defineProperty(u,"endTime",r({},h,{get:function(){return m},set:function(D){if(typeof D!="number")throw new TypeError("End time must be set to a number.");m=D,this.hasBeenReset=!0}})),Object.defineProperty(u,"text",r({},h,{get:function(){return y},set:function(D){y=""+D,this.hasBeenReset=!0}})),Object.defineProperty(u,"region",r({},h,{get:function(){return T},set:function(D){T=D,this.hasBeenReset=!0}})),Object.defineProperty(u,"vertical",r({},h,{get:function(){return v},set:function(D){let w=i(D);if(w===!1)throw new SyntaxError("An invalid or illegal string was specified.");v=w,this.hasBeenReset=!0}})),Object.defineProperty(u,"snapToLines",r({},h,{get:function(){return E},set:function(D){E=!!D,this.hasBeenReset=!0}})),Object.defineProperty(u,"line",r({},h,{get:function(){return S},set:function(D){if(typeof D!="number"&&D!=="auto")throw new SyntaxError("An invalid number or illegal string was specified.");S=D,this.hasBeenReset=!0}})),Object.defineProperty(u,"lineAlign",r({},h,{get:function(){return x},set:function(D){let w=s(D);if(!w)throw new SyntaxError("An invalid or illegal string was specified.");x=w,this.hasBeenReset=!0}})),Object.defineProperty(u,"position",r({},h,{get:function(){return A},set:function(D){if(D<0||D>100)throw new Error("Position must be between 0 and 100.");A=D,this.hasBeenReset=!0}})),Object.defineProperty(u,"positionAlign",r({},h,{get:function(){return b},set:function(D){let w=s(D);if(!w)throw new SyntaxError("An invalid or illegal string was specified.");b=w,this.hasBeenReset=!0}})),Object.defineProperty(u,"size",r({},h,{get:function(){return C},set:function(D){if(D<0||D>100)throw new Error("Size must be between 0 and 100.");C=D,this.hasBeenReset=!0}})),Object.defineProperty(u,"align",r({},h,{get:function(){return _},set:function(D){let w=s(D);if(!w)throw new SyntaxError("An invalid or illegal string was specified.");_=w,this.hasBeenReset=!0}})),u.displayState=void 0}return o.prototype.getCueAsHTML=function(){return self.WebVTT.convertCueToDOMTree(self,this.text)},o}(),Hr=class{decode(e,t){if(!e)return"";if(typeof e!="string")throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(e))}};function $a(n){function e(i,s,r,o){return(i|0)*3600+(s|0)*60+(r|0)+parseFloat(o||0)}let t=n.match(/^(?:(\d+):)?(\d{2}):(\d{2})(\.\d+)?/);return t?parseFloat(t[2])>59?e(t[2],t[3],0,t[4]):e(t[1],t[2],t[3],t[4]):null}var Vr=class{constructor(){this.values=Object.create(null)}set(e,t){!this.get(e)&&t!==""&&(this.values[e]=t)}get(e,t,i){return i?this.has(e)?this.values[e]:t[i]:this.has(e)?this.values[e]:t}has(e){return e in this.values}alt(e,t,i){for(let s=0;s<i.length;++s)if(t===i[s]){this.set(e,t);break}}integer(e,t){/^-?\d+$/.test(t)&&this.set(e,parseInt(t,10))}percent(e,t){if(/^([\d]{1,3})(\.[\d]*)?%$/.test(t)){let i=parseFloat(t);if(i>=0&&i<=100)return this.set(e,i),!0}return!1}};function Ga(n,e,t,i){let s=i?n.split(i):[n];for(let r in s){if(typeof s[r]!="string")continue;let o=s[r].split(t);if(o.length!==2)continue;let a=o[0],l=o[1];e(a,l)}}var Kr=new mn(0,0,""),wi=Kr.align==="middle"?"middle":"center";function gh(n,e,t){let i=n;function s(){let a=$a(n);if(a===null)throw new Error("Malformed timestamp: "+i);return n=n.replace(/^[^\sa-zA-Z-]+/,""),a}function r(a,l){let c=new Vr;Ga(a,function(d,f){let g;switch(d){case"region":for(let m=t.length-1;m>=0;m--)if(t[m].id===f){c.set(d,t[m].region);break}break;case"vertical":c.alt(d,f,["rl","lr"]);break;case"line":g=f.split(","),c.integer(d,g[0]),c.percent(d,g[0])&&c.set("snapToLines",!1),c.alt(d,g[0],["auto"]),g.length===2&&c.alt("lineAlign",g[1],["start",wi,"end"]);break;case"position":g=f.split(","),c.percent(d,g[0]),g.length===2&&c.alt("positionAlign",g[1],["start",wi,"end","line-left","line-right","auto"]);break;case"size":c.percent(d,f);break;case"align":c.alt(d,f,["start",wi,"end","left","right"]);break}},/:/,/\s/),l.region=c.get("region",null),l.vertical=c.get("vertical","");let u=c.get("line","auto");u==="auto"&&Kr.line===-1&&(u=-1),l.line=u,l.lineAlign=c.get("lineAlign","start"),l.snapToLines=c.get("snapToLines",!0),l.size=c.get("size",100),l.align=c.get("align",wi);let h=c.get("position","auto");h==="auto"&&Kr.position===50&&(h=l.align==="start"||l.align==="left"?0:l.align==="end"||l.align==="right"?100:50),l.position=h}function o(){n=n.replace(/^\s+/,"")}if(o(),e.startTime=s(),o(),n.slice(0,3)!=="-->")throw new Error("Malformed time stamp (time stamps must be separated by '-->'): "+i);n=n.slice(3),o(),e.endTime=s(),o(),r(n,e)}function Ha(n){return n.replace(/<br(?: \/)?>/gi,`
`)}var Wr=class{constructor(){this.state="INITIAL",this.buffer="",this.decoder=new Hr,this.regionList=[],this.cue=null,this.oncue=void 0,this.onparsingerror=void 0,this.onflush=void 0}parse(e){let t=this;e&&(t.buffer+=t.decoder.decode(e,{stream:!0}));function i(){let r=t.buffer,o=0;for(r=Ha(r);o<r.length&&r[o]!=="\r"&&r[o]!==`
`;)++o;let a=r.slice(0,o);return r[o]==="\r"&&++o,r[o]===`
`&&++o,t.buffer=r.slice(o),a}function s(r){Ga(r,function(o,a){},/:/)}try{let r="";if(t.state==="INITIAL"){if(!/\r\n|\n/.test(t.buffer))return this;r=i();let a=r.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);if(!(a!=null&&a[0]))throw new Error("Malformed WebVTT signature.");t.state="HEADER"}let o=!1;for(;t.buffer;){if(!/\r\n|\n/.test(t.buffer))return this;switch(o?o=!1:r=i(),t.state){case"HEADER":/:/.test(r)?s(r):r||(t.state="ID");continue;case"NOTE":r||(t.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(r)){t.state="NOTE";break}if(!r)continue;if(t.cue=new mn(0,0,""),t.state="CUE",r.indexOf("-->")===-1){t.cue.id=r;continue}case"CUE":if(!t.cue){t.state="BADCUE";continue}try{gh(r,t.cue,t.regionList)}catch(a){t.cue=null,t.state="BADCUE";continue}t.state="CUETEXT";continue;case"CUETEXT":{let a=r.indexOf("-->")!==-1;if(!r||a&&(o=!0)){t.oncue&&t.cue&&t.oncue(t.cue),t.cue=null,t.state="ID";continue}if(t.cue===null)continue;t.cue.text&&(t.cue.text+=`
`),t.cue.text+=r}continue;case"BADCUE":r||(t.state="ID")}}}catch(r){t.state==="CUETEXT"&&t.cue&&t.oncue&&t.oncue(t.cue),t.cue=null,t.state=t.state==="INITIAL"?"BADWEBVTT":"BADCUE"}return this}flush(){let e=this;try{if((e.cue||e.state==="HEADER")&&(e.buffer+=`

`,e.parse()),e.state==="INITIAL"||e.state==="BADWEBVTT")throw new Error("Malformed WebVTT signature.")}catch(t){e.onparsingerror&&e.onparsingerror(t)}return e.onflush&&e.onflush(),this}},mh=/\r\n|\n\r|\n|\r/g,Ws=function(e,t,i=0){return e.slice(i,i+t.length)===t},ph=function(e){let t=parseInt(e.slice(-3)),i=parseInt(e.slice(-6,-4)),s=parseInt(e.slice(-9,-7)),r=e.length>9?parseInt(e.substring(0,e.indexOf(":"))):0;if(!M(t)||!M(i)||!M(s)||!M(r))throw Error(`Malformed X-TIMESTAMP-MAP: Local:${e}`);return t+=1e3*i,t+=60*1e3*s,t+=60*60*1e3*r,t},Ys=function(e){let t=5381,i=e.length;for(;i;)t=t*33^e.charCodeAt(--i);return(t>>>0).toString()};function pn(n,e,t){return Ys(n.toString())+Ys(e.toString())+Ys(t)}var yh=function(e,t,i){let s=e[t],r=e[s.prevCC];if(!r||!r.new&&s.new){e.ccOffset=e.presentationOffset=s.start,s.new=!1;return}for(;(o=r)!=null&&o.new;){var o;e.ccOffset+=s.start-r.start,s.new=!1,s=r,r=e[s.prevCC]}e.presentationOffset=i};function Th(n,e,t,i,s,r,o){let a=new Wr,l=Ye(new Uint8Array(n)).trim().replace(mh,`
`).split(`
`),c=[],u=e?Qu(e.baseTime,e.timescale):0,h="00:00.000",d=0,f=0,g,m=!0;a.oncue=function(y){let T=t[i],v=t.ccOffset,E=(d-u)/9e4;if(T!=null&&T.new&&(f!==void 0?v=t.ccOffset=T.start:yh(t,i,E)),E){if(!e){g=new Error("Missing initPTS for VTT MPEGTS");return}v=E-t.presentationOffset}let S=y.endTime-y.startTime,x=we((y.startTime+v-f)*9e4,s*9e4)/9e4;y.startTime=Math.max(x,0),y.endTime=Math.max(x+S,0);let A=y.text.trim();y.text=decodeURIComponent(encodeURIComponent(A)),y.id||(y.id=pn(y.startTime,y.endTime,A)),y.endTime>0&&c.push(y)},a.onparsingerror=function(y){g=y},a.onflush=function(){if(g){o(g);return}r(c)},l.forEach(y=>{if(m)if(Ws(y,"X-TIMESTAMP-MAP=")){m=!1,y.slice(16).split(",").forEach(T=>{Ws(T,"LOCAL:")?h=T.slice(6):Ws(T,"MPEGTS:")&&(d=parseInt(T.slice(7)))});try{f=ph(h)/1e3}catch(T){g=T}return}else y===""&&(m=!1);a.parse(y+`
`)}),a.flush()}var qs="stpp.ttml.im1t",Va=/^(\d{2,}):(\d{2}):(\d{2}):(\d{2})\.?(\d+)?$/,Ka=/^(\d*(?:\.\d*)?)(h|m|s|ms|f|t)$/,xh={left:"start",center:"center",right:"end",start:"start",end:"end"};function Vo(n,e,t,i){let s=Y(new Uint8Array(n),["mdat"]);if(s.length===0){i(new Error("Could not parse IMSC1 mdat"));return}let r=s.map(a=>Ye(a)),o=Xu(e.baseTime,1,e.timescale);try{r.forEach(a=>t(Eh(a,o)))}catch(a){i(a)}}function Eh(n,e){let s=new DOMParser().parseFromString(n,"text/xml").getElementsByTagName("tt")[0];if(!s)throw new Error("Invalid ttml");let r={frameRate:30,subFrameRate:1,frameRateMultiplier:0,tickRate:0},o=Object.keys(r).reduce((h,d)=>(h[d]=s.getAttribute(`ttp:${d}`)||r[d],h),{}),a=s.getAttribute("xml:space")!=="preserve",l=Ko(js(s,"styling","style")),c=Ko(js(s,"layout","region")),u=js(s,"body","[begin]");return[].map.call(u,h=>{let d=Wa(h,a);if(!d||!h.hasAttribute("begin"))return null;let f=Xs(h.getAttribute("begin"),o),g=Xs(h.getAttribute("dur"),o),m=Xs(h.getAttribute("end"),o);if(f===null)throw Wo(h);if(m===null){if(g===null)throw Wo(h);m=f+g}let y=new mn(f-e,m-e,d);y.id=pn(y.startTime,y.endTime,y.text);let T=c[h.getAttribute("region")],v=l[h.getAttribute("style")],E=vh(T,v,l),{textAlign:S}=E;if(S){let x=xh[S];x&&(y.lineAlign=x),y.align=S}return le(y,E),y}).filter(h=>h!==null)}function js(n,e,t){let i=n.getElementsByTagName(e)[0];return i?[].slice.call(i.querySelectorAll(t)):[]}function Ko(n){return n.reduce((e,t)=>{let i=t.getAttribute("xml:id");return i&&(e[i]=t),e},{})}function Wa(n,e){return[].slice.call(n.childNodes).reduce((t,i,s)=>{var r;return i.nodeName==="br"&&s?t+`
`:(r=i.childNodes)!=null&&r.length?Wa(i,e):e?t+i.textContent.trim().replace(/\s+/g," "):t+i.textContent},"")}function vh(n,e,t){let i="http://www.w3.org/ns/ttml#styling",s=null,r=["displayAlign","textAlign","color","backgroundColor","fontSize","fontFamily"],o=n!=null&&n.hasAttribute("style")?n.getAttribute("style"):null;return o&&t.hasOwnProperty(o)&&(s=t[o]),r.reduce((a,l)=>{let c=zs(e,i,l)||zs(n,i,l)||zs(s,i,l);return c&&(a[l]=c),a},{})}function zs(n,e,t){return n&&n.hasAttributeNS(e,t)?n.getAttributeNS(e,t):null}function Wo(n){return new Error(`Could not parse ttml timestamp ${n}`)}function Xs(n,e){if(!n)return null;let t=$a(n);return t===null&&(Va.test(n)?t=Sh(n,e):Ka.test(n)&&(t=Ah(n,e))),t}function Sh(n,e){let t=Va.exec(n),i=(t[4]|0)+(t[5]|0)/e.subFrameRate;return(t[1]|0)*3600+(t[2]|0)*60+(t[3]|0)+i/e.frameRate}function Ah(n,e){let t=Ka.exec(n),i=Number(t[1]);switch(t[2]){case"h":return i*3600;case"m":return i*60;case"ms":return i*1e3;case"f":return i/e.frameRate;case"t":return i/e.tickRate}return i}var Yr=class{constructor(e){this.hls=void 0,this.media=null,this.config=void 0,this.enabled=!0,this.Cues=void 0,this.textTracks=[],this.tracks=[],this.initPTS=[],this.unparsedVttFrags=[],this.captionsTracks={},this.nonNativeCaptionsTracks={},this.cea608Parser1=void 0,this.cea608Parser2=void 0,this.lastCc=-1,this.lastSn=-1,this.lastPartIndex=-1,this.prevCC=-1,this.vttCCs=qo(),this.captionsProperties=void 0,this.hls=e,this.config=e.config,this.Cues=e.config.cueHandler,this.captionsProperties={textTrack1:{label:this.config.captionsTextTrack1Label,languageCode:this.config.captionsTextTrack1LanguageCode},textTrack2:{label:this.config.captionsTextTrack2Label,languageCode:this.config.captionsTextTrack2LanguageCode},textTrack3:{label:this.config.captionsTextTrack3Label,languageCode:this.config.captionsTextTrack3LanguageCode},textTrack4:{label:this.config.captionsTextTrack4Label,languageCode:this.config.captionsTextTrack4LanguageCode}},e.on(p.MEDIA_ATTACHING,this.onMediaAttaching,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_LOADED,this.onManifestLoaded,this),e.on(p.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this),e.on(p.FRAG_LOADING,this.onFragLoading,this),e.on(p.FRAG_LOADED,this.onFragLoaded,this),e.on(p.FRAG_PARSING_USERDATA,this.onFragParsingUserdata,this),e.on(p.FRAG_DECRYPTED,this.onFragDecrypted,this),e.on(p.INIT_PTS_FOUND,this.onInitPtsFound,this),e.on(p.SUBTITLE_TRACKS_CLEARED,this.onSubtitleTracksCleared,this),e.on(p.BUFFER_FLUSHING,this.onBufferFlushing,this)}destroy(){let{hls:e}=this;e.off(p.MEDIA_ATTACHING,this.onMediaAttaching,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_LOADED,this.onManifestLoaded,this),e.off(p.SUBTITLE_TRACKS_UPDATED,this.onSubtitleTracksUpdated,this),e.off(p.FRAG_LOADING,this.onFragLoading,this),e.off(p.FRAG_LOADED,this.onFragLoaded,this),e.off(p.FRAG_PARSING_USERDATA,this.onFragParsingUserdata,this),e.off(p.FRAG_DECRYPTED,this.onFragDecrypted,this),e.off(p.INIT_PTS_FOUND,this.onInitPtsFound,this),e.off(p.SUBTITLE_TRACKS_CLEARED,this.onSubtitleTracksCleared,this),e.off(p.BUFFER_FLUSHING,this.onBufferFlushing,this),this.hls=this.config=null,this.cea608Parser1=this.cea608Parser2=void 0}initCea608Parsers(){if(this.config.enableCEA708Captions&&(!this.cea608Parser1||!this.cea608Parser2)){let e=new Bt(this,"textTrack1"),t=new Bt(this,"textTrack2"),i=new Bt(this,"textTrack3"),s=new Bt(this,"textTrack4");this.cea608Parser1=new ls(1,e,t),this.cea608Parser2=new ls(3,i,s)}}addCues(e,t,i,s,r){let o=!1;for(let a=r.length;a--;){let l=r[a],c=Lh(l[0],l[1],t,i);if(c>=0&&(l[0]=Math.min(l[0],t),l[1]=Math.max(l[1],i),o=!0,c/(i-t)>.5))return}if(o||r.push([t,i]),this.config.renderTextTracksNatively){let a=this.captionsTracks[e];this.Cues.newCue(a,t,i,s)}else{let a=this.Cues.newCue(null,t,i,s);this.hls.trigger(p.CUES_PARSED,{type:"captions",cues:a,track:e})}}onInitPtsFound(e,{frag:t,id:i,initPTS:s,timescale:r}){let{unparsedVttFrags:o}=this;i==="main"&&(this.initPTS[t.cc]={baseTime:s,timescale:r}),o.length&&(this.unparsedVttFrags=[],o.forEach(a=>{this.onFragLoaded(p.FRAG_LOADED,a)}))}getExistingTrack(e,t){let{media:i}=this;if(i)for(let s=0;s<i.textTracks.length;s++){let r=i.textTracks[s];if(Yo(r,{name:e,lang:t,attrs:{}}))return r}return null}createCaptionsTrack(e){this.config.renderTextTracksNatively?this.createNativeTrack(e):this.createNonNativeTrack(e)}createNativeTrack(e){if(this.captionsTracks[e])return;let{captionsProperties:t,captionsTracks:i,media:s}=this,{label:r,languageCode:o}=t[e],a=this.getExistingTrack(r,o);if(a)i[e]=a,Nt(i[e]),ga(i[e],s);else{let l=this.createTextTrack("captions",r,o);l&&(l[e]=!0,i[e]=l)}}createNonNativeTrack(e){if(this.nonNativeCaptionsTracks[e])return;let t=this.captionsProperties[e];if(!t)return;let i=t.label,s={_id:e,label:i,kind:"captions",default:t.media?!!t.media.default:!1,closedCaptions:t.media};this.nonNativeCaptionsTracks[e]=s,this.hls.trigger(p.NON_NATIVE_TEXT_TRACKS_FOUND,{tracks:[s]})}createTextTrack(e,t,i){let s=this.media;if(s)return s.addTextTrack(e,t,i)}onMediaAttaching(e,t){this.media=t.media,this._cleanTracks()}onMediaDetaching(){let{captionsTracks:e}=this;Object.keys(e).forEach(t=>{Nt(e[t]),delete e[t]}),this.nonNativeCaptionsTracks={}}onManifestLoading(){this.lastCc=-1,this.lastSn=-1,this.lastPartIndex=-1,this.prevCC=-1,this.vttCCs=qo(),this._cleanTracks(),this.tracks=[],this.captionsTracks={},this.nonNativeCaptionsTracks={},this.textTracks=[],this.unparsedVttFrags=[],this.initPTS=[],this.cea608Parser1&&this.cea608Parser2&&(this.cea608Parser1.reset(),this.cea608Parser2.reset())}_cleanTracks(){let{media:e}=this;if(!e)return;let t=e.textTracks;if(t)for(let i=0;i<t.length;i++)Nt(t[i])}onSubtitleTracksUpdated(e,t){let i=t.subtitleTracks||[],s=i.some(r=>r.textCodec===qs);if(this.config.enableWebVTT||s&&this.config.enableIMSC1){if(Ba(this.tracks,i)){this.tracks=i;return}if(this.textTracks=[],this.tracks=i,this.config.renderTextTracksNatively){let o=this.media,a=o?Pi(o.textTracks):null;if(this.tracks.forEach((l,c)=>{let u;if(a){let h=null;for(let d=0;d<a.length;d++)if(a[d]&&Yo(a[d],l)){h=a[d],a[d]=null;break}h&&(u=h)}if(u)Nt(u);else{let h=Ya(l);u=this.createTextTrack(h,l.name,l.lang),u&&(u.mode="disabled")}u&&this.textTracks.push(u)}),a!=null&&a.length){let l=a.filter(c=>c!==null).map(c=>c.label);l.length&&L.warn(`Media element contains unused subtitle tracks: ${l.join(", ")}. Replace media element for each source to clear TextTracks and captions menu.`)}}else if(this.tracks.length){let o=this.tracks.map(a=>({label:a.name,kind:a.type.toLowerCase(),default:a.default,subtitleTrack:a}));this.hls.trigger(p.NON_NATIVE_TEXT_TRACKS_FOUND,{tracks:o})}}}onManifestLoaded(e,t){this.config.enableCEA708Captions&&t.captions&&t.captions.forEach(i=>{let s=/(?:CC|SERVICE)([1-4])/.exec(i.instreamId);if(!s)return;let r=`textTrack${s[1]}`,o=this.captionsProperties[r];o&&(o.label=i.name,i.lang&&(o.languageCode=i.lang),o.media=i)})}closedCaptionsForLevel(e){let t=this.hls.levels[e.level];return t==null?void 0:t.attrs["CLOSED-CAPTIONS"]}onFragLoading(e,t){if(this.enabled&&t.frag.type===H.MAIN){var i,s;let{cea608Parser1:r,cea608Parser2:o,lastSn:a}=this,{cc:l,sn:c}=t.frag,u=(i=(s=t.part)==null?void 0:s.index)!=null?i:-1;r&&o&&(c!==a+1||c===a&&u!==this.lastPartIndex+1||l!==this.lastCc)&&(r.reset(),o.reset()),this.lastCc=l,this.lastSn=c,this.lastPartIndex=u}}onFragLoaded(e,t){let{frag:i,payload:s}=t;if(i.type===H.SUBTITLE)if(s.byteLength){let r=i.decryptdata,o="stats"in t;if(r==null||!r.encrypted||o){let a=this.tracks[i.level],l=this.vttCCs;l[i.cc]||(l[i.cc]={start:i.start,prevCC:this.prevCC,new:!0},this.prevCC=i.cc),a&&a.textCodec===qs?this._parseIMSC1(i,s):this._parseVTTs(t)}}else this.hls.trigger(p.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:i,error:new Error("Empty subtitle payload")})}_parseIMSC1(e,t){let i=this.hls;Vo(t,this.initPTS[e.cc],s=>{this._appendCues(s,e.level),i.trigger(p.SUBTITLE_FRAG_PROCESSED,{success:!0,frag:e})},s=>{L.log(`Failed to parse IMSC1: ${s}`),i.trigger(p.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:e,error:s})})}_parseVTTs(e){var t;let{frag:i,payload:s}=e,{initPTS:r,unparsedVttFrags:o}=this,a=r.length-1;if(!r[i.cc]&&a===-1){o.push(e);return}let l=this.hls,c=(t=i.initSegment)!=null&&t.data?_e(i.initSegment.data,new Uint8Array(s)):s;Th(c,this.initPTS[i.cc],this.vttCCs,i.cc,i.start,u=>{this._appendCues(u,i.level),l.trigger(p.SUBTITLE_FRAG_PROCESSED,{success:!0,frag:i})},u=>{let h=u.message==="Missing initPTS for VTT MPEGTS";h?o.push(e):this._fallbackToIMSC1(i,s),L.log(`Failed to parse VTT cue: ${u}`),!(h&&a>i.cc)&&l.trigger(p.SUBTITLE_FRAG_PROCESSED,{success:!1,frag:i,error:u})})}_fallbackToIMSC1(e,t){let i=this.tracks[e.level];i.textCodec||Vo(t,this.initPTS[e.cc],()=>{i.textCodec=qs,this._parseIMSC1(e,t)},()=>{i.textCodec="wvtt"})}_appendCues(e,t){let i=this.hls;if(this.config.renderTextTracksNatively){let s=this.textTracks[t];if(!s||s.mode==="disabled")return;e.forEach(r=>ma(s,r))}else{let s=this.tracks[t];if(!s)return;let r=s.default?"default":"subtitles"+t;i.trigger(p.CUES_PARSED,{type:"subtitles",cues:e,track:r})}}onFragDecrypted(e,t){let{frag:i}=t;i.type===H.SUBTITLE&&this.onFragLoaded(p.FRAG_LOADED,t)}onSubtitleTracksCleared(){this.tracks=[],this.captionsTracks={}}onFragParsingUserdata(e,t){this.initCea608Parsers();let{cea608Parser1:i,cea608Parser2:s}=this;if(!this.enabled||!i||!s)return;let{frag:r,samples:o}=t;if(!(r.type===H.MAIN&&this.closedCaptionsForLevel(r)==="NONE"))for(let a=0;a<o.length;a++){let l=o[a].bytes;if(l){let c=this.extractCea608Data(l);i.addData(o[a].pts,c[0]),s.addData(o[a].pts,c[1])}}}onBufferFlushing(e,{startOffset:t,endOffset:i,endOffsetSubtitles:s,type:r}){let{media:o}=this;if(!(!o||o.currentTime<i)){if(!r||r==="video"){let{captionsTracks:a}=this;Object.keys(a).forEach(l=>rr(a[l],t,i))}if(this.config.renderTextTracksNatively&&t===0&&s!==void 0){let{textTracks:a}=this;Object.keys(a).forEach(l=>rr(a[l],t,s))}}}extractCea608Data(e){let t=[[],[]],i=e[0]&31,s=2;for(let r=0;r<i;r++){let o=e[s++],a=127&e[s++],l=127&e[s++];if(a===0&&l===0)continue;if((4&o)!==0){let u=3&o;(u===0||u===1)&&(t[u].push(a),t[u].push(l))}}return t}};function Ya(n){return n.characteristics&&/transcribes-spoken-dialog/gi.test(n.characteristics)&&/describes-music-and-sound/gi.test(n.characteristics)?"captions":"subtitles"}function Yo(n,e){return!!n&&n.kind===Ya(e)&&kr(e,n)}function Lh(n,e,t,i){return Math.min(e,i)-Math.max(n,t)}function qo(){return{ccOffset:0,presentationOffset:0,0:{start:0,prevCC:-1,new:!0}}}var ui=class{constructor(e){this.hls=void 0,this.autoLevelCapping=void 0,this.firstLevel=void 0,this.media=void 0,this.restrictedLevels=void 0,this.timer=void 0,this.clientRect=void 0,this.streamController=void 0,this.hls=e,this.autoLevelCapping=Number.POSITIVE_INFINITY,this.firstLevel=-1,this.media=null,this.restrictedLevels=[],this.timer=void 0,this.clientRect=null,this.registerListeners()}setStreamController(e){this.streamController=e}destroy(){this.hls&&this.unregisterListener(),this.timer&&this.stopCapping(),this.media=null,this.clientRect=null,this.hls=this.streamController=null}registerListeners(){let{hls:e}=this;e.on(p.FPS_DROP_LEVEL_CAPPING,this.onFpsDropLevelCapping,this),e.on(p.MEDIA_ATTACHING,this.onMediaAttaching,this),e.on(p.MANIFEST_PARSED,this.onManifestParsed,this),e.on(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.on(p.BUFFER_CODECS,this.onBufferCodecs,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this)}unregisterListener(){let{hls:e}=this;e.off(p.FPS_DROP_LEVEL_CAPPING,this.onFpsDropLevelCapping,this),e.off(p.MEDIA_ATTACHING,this.onMediaAttaching,this),e.off(p.MANIFEST_PARSED,this.onManifestParsed,this),e.off(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.off(p.BUFFER_CODECS,this.onBufferCodecs,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this)}onFpsDropLevelCapping(e,t){let i=this.hls.levels[t.droppedLevel];this.isLevelAllowed(i)&&this.restrictedLevels.push({bitrate:i.bitrate,height:i.height,width:i.width})}onMediaAttaching(e,t){this.media=t.media instanceof HTMLVideoElement?t.media:null,this.clientRect=null,this.timer&&this.hls.levels.length&&this.detectPlayerSize()}onManifestParsed(e,t){let i=this.hls;this.restrictedLevels=[],this.firstLevel=t.firstLevel,i.config.capLevelToPlayerSize&&t.video&&this.startCapping()}onLevelsUpdated(e,t){this.timer&&M(this.autoLevelCapping)&&this.detectPlayerSize()}onBufferCodecs(e,t){this.hls.config.capLevelToPlayerSize&&t.video&&this.startCapping()}onMediaDetaching(){this.stopCapping()}detectPlayerSize(){if(this.media){if(this.mediaHeight<=0||this.mediaWidth<=0){this.clientRect=null;return}let e=this.hls.levels;if(e.length){let t=this.hls,i=this.getMaxLevel(e.length-1);i!==this.autoLevelCapping&&L.log(`Setting autoLevelCapping to ${i}: ${e[i].height}p@${e[i].bitrate} for media ${this.mediaWidth}x${this.mediaHeight}`),t.autoLevelCapping=i,t.autoLevelCapping>this.autoLevelCapping&&this.streamController&&this.streamController.nextLevelSwitch(),this.autoLevelCapping=t.autoLevelCapping}}}getMaxLevel(e){let t=this.hls.levels;if(!t.length)return-1;let i=t.filter((s,r)=>this.isLevelAllowed(s)&&r<=e);return this.clientRect=null,ui.getMaxLevelByMediaSize(i,this.mediaWidth,this.mediaHeight)}startCapping(){this.timer||(this.autoLevelCapping=Number.POSITIVE_INFINITY,self.clearInterval(this.timer),this.timer=self.setInterval(this.detectPlayerSize.bind(this),1e3),this.detectPlayerSize())}stopCapping(){this.restrictedLevels=[],this.firstLevel=-1,this.autoLevelCapping=Number.POSITIVE_INFINITY,this.timer&&(self.clearInterval(this.timer),this.timer=void 0)}getDimensions(){if(this.clientRect)return this.clientRect;let e=this.media,t={width:0,height:0};if(e){let i=e.getBoundingClientRect();t.width=i.width,t.height=i.height,!t.width&&!t.height&&(t.width=i.right-i.left||e.width||0,t.height=i.bottom-i.top||e.height||0)}return this.clientRect=t,t}get mediaWidth(){return this.getDimensions().width*this.contentScaleFactor}get mediaHeight(){return this.getDimensions().height*this.contentScaleFactor}get contentScaleFactor(){let e=1;if(!this.hls.config.ignoreDevicePixelRatio)try{e=self.devicePixelRatio}catch(t){}return e}isLevelAllowed(e){return!this.restrictedLevels.some(i=>e.bitrate===i.bitrate&&e.width===i.width&&e.height===i.height)}static getMaxLevelByMediaSize(e,t,i){if(!(e!=null&&e.length))return-1;let s=(a,l)=>l?a.width!==l.width||a.height!==l.height:!0,r=e.length-1,o=Math.max(t,i);for(let a=0;a<e.length;a+=1){let l=e[a];if((l.width>=o||l.height>=o)&&s(l,e[a+1])){r=a;break}}return r}},qr=class{constructor(e){this.hls=void 0,this.isVideoPlaybackQualityAvailable=!1,this.timer=void 0,this.media=null,this.lastTime=void 0,this.lastDroppedFrames=0,this.lastDecodedFrames=0,this.streamController=void 0,this.hls=e,this.registerListeners()}setStreamController(e){this.streamController=e}registerListeners(){this.hls.on(p.MEDIA_ATTACHING,this.onMediaAttaching,this)}unregisterListeners(){this.hls.off(p.MEDIA_ATTACHING,this.onMediaAttaching,this)}destroy(){this.timer&&clearInterval(this.timer),this.unregisterListeners(),this.isVideoPlaybackQualityAvailable=!1,this.media=null}onMediaAttaching(e,t){let i=this.hls.config;if(i.capLevelOnFPSDrop){let s=t.media instanceof self.HTMLVideoElement?t.media:null;this.media=s,s&&typeof s.getVideoPlaybackQuality=="function"&&(this.isVideoPlaybackQualityAvailable=!0),self.clearInterval(this.timer),this.timer=self.setInterval(this.checkFPSInterval.bind(this),i.fpsDroppedMonitoringPeriod)}}checkFPS(e,t,i){let s=performance.now();if(t){if(this.lastTime){let r=s-this.lastTime,o=i-this.lastDroppedFrames,a=t-this.lastDecodedFrames,l=1e3*o/r,c=this.hls;if(c.trigger(p.FPS_DROP,{currentDropped:o,currentDecoded:a,totalDroppedFrames:i}),l>0&&o>c.config.fpsDroppedMonitoringThreshold*a){let u=c.currentLevel;L.warn("drop FPS ratio greater than max allowed value for currentLevel: "+u),u>0&&(c.autoLevelCapping===-1||c.autoLevelCapping>=u)&&(u=u-1,c.trigger(p.FPS_DROP_LEVEL_CAPPING,{level:u,droppedLevel:c.currentLevel}),c.autoLevelCapping=u,this.streamController.nextLevelSwitch())}}this.lastTime=s,this.lastDroppedFrames=i,this.lastDecodedFrames=t}}checkFPSInterval(){let e=this.media;if(e)if(this.isVideoPlaybackQualityAvailable){let t=e.getVideoPlaybackQuality();this.checkFPS(e,t.totalVideoFrames,t.droppedVideoFrames)}else this.checkFPS(e,e.webkitDecodedFrameCount,e.webkitDroppedFrameCount)}},ki="[eme]",at=class{constructor(e){this.hls=void 0,this.config=void 0,this.media=null,this.keyFormatPromise=null,this.keySystemAccessPromises={},this._requestLicenseFailureCount=0,this.mediaKeySessions=[],this.keyIdToKeySessionPromise={},this.setMediaKeysQueue=at.CDMCleanupPromise?[at.CDMCleanupPromise]:[],this.onMediaEncrypted=this._onMediaEncrypted.bind(this),this.onWaitingForKey=this._onWaitingForKey.bind(this),this.debug=L.debug.bind(L,ki),this.log=L.log.bind(L,ki),this.warn=L.warn.bind(L,ki),this.error=L.error.bind(L,ki),this.hls=e,this.config=e.config,this.registerListeners()}destroy(){this.unregisterListeners(),this.onMediaDetached();let e=this.config;e.requestMediaKeySystemAccessFunc=null,e.licenseXhrSetup=e.licenseResponseCallback=void 0,e.drmSystems=e.drmSystemOptions={},this.hls=this.onMediaEncrypted=this.onWaitingForKey=this.keyIdToKeySessionPromise=null,this.config=null}registerListeners(){this.hls.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),this.hls.on(p.MEDIA_DETACHED,this.onMediaDetached,this),this.hls.on(p.MANIFEST_LOADING,this.onManifestLoading,this),this.hls.on(p.MANIFEST_LOADED,this.onManifestLoaded,this)}unregisterListeners(){this.hls.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),this.hls.off(p.MEDIA_DETACHED,this.onMediaDetached,this),this.hls.off(p.MANIFEST_LOADING,this.onManifestLoading,this),this.hls.off(p.MANIFEST_LOADED,this.onManifestLoaded,this)}getLicenseServerUrl(e){let{drmSystems:t,widevineLicenseUrl:i}=this.config,s=t[e];if(s)return s.licenseUrl;if(e===se.WIDEVINE&&i)return i;throw new Error(`no license server URL configured for key-system "${e}"`)}getServerCertificateUrl(e){let{drmSystems:t}=this.config,i=t[e];if(i)return i.serverCertificateUrl;this.log(`No Server Certificate in config.drmSystems["${e}"]`)}attemptKeySystemAccess(e){let t=this.hls.levels,i=(o,a,l)=>!!o&&l.indexOf(o)===a,s=t.map(o=>o.audioCodec).filter(i),r=t.map(o=>o.videoCodec).filter(i);return s.length+r.length===0&&r.push("avc1.42e01e"),new Promise((o,a)=>{let l=c=>{let u=c.shift();this.getMediaKeysPromise(u,s,r).then(h=>o({keySystem:u,mediaKeys:h})).catch(h=>{c.length?l(c):h instanceof Ae?a(h):a(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_NO_ACCESS,error:h,fatal:!0},h.message))})};l(e)})}requestMediaKeySystemAccess(e,t){let{requestMediaKeySystemAccessFunc:i}=this.config;if(typeof i!="function"){let s=`Configured requestMediaKeySystemAccess is not a function ${i}`;return ta===null&&self.location.protocol==="http:"&&(s=`navigator.requestMediaKeySystemAccess is not available over insecure protocol ${location.protocol}`),Promise.reject(new Error(s))}return i(e,t)}getMediaKeysPromise(e,t,i){let s=gc(e,t,i,this.config.drmSystemOptions),r=this.keySystemAccessPromises[e],o=r==null?void 0:r.keySystemAccess;if(!o){this.log(`Requesting encrypted media "${e}" key-system access with config: ${JSON.stringify(s)}`),o=this.requestMediaKeySystemAccess(e,s);let a=this.keySystemAccessPromises[e]={keySystemAccess:o};return o.catch(l=>{this.log(`Failed to obtain access to key-system "${e}": ${l}`)}),o.then(l=>{this.log(`Access for key-system "${l.keySystem}" obtained`);let c=this.fetchServerCertificate(e);return this.log(`Create media-keys for "${e}"`),a.mediaKeys=l.createMediaKeys().then(u=>(this.log(`Media-keys created for "${e}"`),c.then(h=>h?this.setMediaKeysServerCertificate(u,e,h):u))),a.mediaKeys.catch(u=>{this.error(`Failed to create media-keys for "${e}"}: ${u}`)}),a.mediaKeys})}return o.then(()=>r.mediaKeys)}createMediaKeySessionContext({decryptdata:e,keySystem:t,mediaKeys:i}){this.log(`Creating key-system session "${t}" keyId: ${He.hexDump(e.keyId||[])}`);let s=i.createSession(),r={decryptdata:e,keySystem:t,mediaKeys:i,mediaKeysSession:s,keyStatus:"status-pending"};return this.mediaKeySessions.push(r),r}renewKeySession(e){let t=e.decryptdata;if(t.pssh){let i=this.createMediaKeySessionContext(e),s=this.getKeyIdString(t),r="cenc";this.keyIdToKeySessionPromise[s]=this.generateRequestWithPreferredKeySession(i,r,t.pssh,"expired")}else this.warn("Could not renew expired session. Missing pssh initData.");this.removeSession(e)}getKeyIdString(e){if(!e)throw new Error("Could not read keyId of undefined decryptdata");if(e.keyId===null)throw new Error("keyId is null");return He.hexDump(e.keyId)}updateKeySession(e,t){var i;let s=e.mediaKeysSession;return this.log(`Updating key-session "${s.sessionId}" for keyID ${He.hexDump(((i=e.decryptdata)==null?void 0:i.keyId)||[])}
      } (data length: ${t&&t.byteLength})`),s.update(t)}selectKeySystemFormat(e){let t=Object.keys(e.levelkeys||{});return this.keyFormatPromise||(this.log(`Selecting key-system from fragment (sn: ${e.sn} ${e.type}: ${e.level}) key formats ${t.join(", ")}`),this.keyFormatPromise=this.getKeyFormatPromise(t)),this.keyFormatPromise}getKeyFormatPromise(e){return new Promise((t,i)=>{let s=Ps(this.config),r=e.map(oo).filter(o=>!!o&&s.indexOf(o)!==-1);return this.getKeySystemSelectionPromise(r).then(({keySystem:o})=>{let a=ao(o);a?t(a):i(new Error(`Unable to find format for key-system "${o}"`))}).catch(i)})}loadKey(e){let t=e.keyInfo.decryptdata,i=this.getKeyIdString(t),s=`(keyId: ${i} format: "${t.keyFormat}" method: ${t.method} uri: ${t.uri})`;this.log(`Starting session for key ${s}`);let r=this.keyIdToKeySessionPromise[i];return r||(r=this.keyIdToKeySessionPromise[i]=this.getKeySystemForKeyPromise(t).then(({keySystem:o,mediaKeys:a})=>(this.throwIfDestroyed(),this.log(`Handle encrypted media sn: ${e.frag.sn} ${e.frag.type}: ${e.frag.level} using key ${s}`),this.attemptSetMediaKeys(o,a).then(()=>{this.throwIfDestroyed();let l=this.createMediaKeySessionContext({keySystem:o,mediaKeys:a,decryptdata:t}),c="cenc";return this.generateRequestWithPreferredKeySession(l,c,t.pssh,"playlist-key")}))),r.catch(o=>this.handleError(o))),r}throwIfDestroyed(e="Invalid state"){if(!this.hls)throw new Error("invalid state")}handleError(e){this.hls&&(this.error(e.message),e instanceof Ae?this.hls.trigger(p.ERROR,e.data):this.hls.trigger(p.ERROR,{type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_NO_KEYS,error:e,fatal:!0}))}getKeySystemForKeyPromise(e){let t=this.getKeyIdString(e),i=this.keyIdToKeySessionPromise[t];if(!i){let s=oo(e.keyFormat),r=s?[s]:Ps(this.config);return this.attemptKeySystemAccess(r)}return i}getKeySystemSelectionPromise(e){if(e.length||(e=Ps(this.config)),e.length===0)throw new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_NO_CONFIGURED_LICENSE,fatal:!0},`Missing key-system license configuration options ${JSON.stringify({drmSystems:this.config.drmSystems})}`);return this.attemptKeySystemAccess(e)}_onMediaEncrypted(e){let{initDataType:t,initData:i}=e;if(this.debug(`"${e.type}" event: init data type: "${t}"`),i===null)return;let s,r;if(t==="sinf"&&this.config.drmSystems[se.FAIRPLAY]){let u=he(new Uint8Array(i));try{let h=an(JSON.parse(u).sinf),d=ca(new Uint8Array(h));if(!d)return;s=d.subarray(8,24),r=se.FAIRPLAY}catch(h){this.warn('Failed to parse sinf "encrypted" event message initData');return}}else{let u=Uc(i);if(u===null)return;u.version===0&&u.systemId===ea.WIDEVINE&&u.data&&(s=u.data.subarray(8,24)),r=fc(u.systemId)}if(!r||!s)return;let o=He.hexDump(s),{keyIdToKeySessionPromise:a,mediaKeySessions:l}=this,c=a[o];for(let u=0;u<l.length;u++){let h=l[u],d=h.decryptdata;if(d.pssh||!d.keyId)continue;let f=He.hexDump(d.keyId);if(o===f||d.uri.replace(/-/g,"").indexOf(o)!==-1){c=a[f],delete a[f],d.pssh=new Uint8Array(i),d.keyId=s,c=a[o]=c.then(()=>this.generateRequestWithPreferredKeySession(h,t,i,"encrypted-event-key-match"));break}}c||(c=a[o]=this.getKeySystemSelectionPromise([r]).then(({keySystem:u,mediaKeys:h})=>{var d;this.throwIfDestroyed();let f=new bt("ISO-23001-7",o,(d=ao(u))!=null?d:"");return f.pssh=new Uint8Array(i),f.keyId=s,this.attemptSetMediaKeys(u,h).then(()=>{this.throwIfDestroyed();let g=this.createMediaKeySessionContext({decryptdata:f,keySystem:u,mediaKeys:h});return this.generateRequestWithPreferredKeySession(g,t,i,"encrypted-event-no-match")})})),c.catch(u=>this.handleError(u))}_onWaitingForKey(e){this.log(`"${e.type}" event`)}attemptSetMediaKeys(e,t){let i=this.setMediaKeysQueue.slice();this.log(`Setting media-keys for "${e}"`);let s=Promise.all(i).then(()=>{if(!this.media)throw new Error("Attempted to set mediaKeys without media element attached");return this.media.setMediaKeys(t)});return this.setMediaKeysQueue.push(s),s.then(()=>{this.log(`Media-keys set for "${e}"`),i.push(s),this.setMediaKeysQueue=this.setMediaKeysQueue.filter(r=>i.indexOf(r)===-1)})}generateRequestWithPreferredKeySession(e,t,i,s){var r,o;let a=(r=this.config.drmSystems)==null||(o=r[e.keySystem])==null?void 0:o.generateRequest;if(a)try{let g=a.call(this.hls,t,i,e);if(!g)throw new Error("Invalid response from configured generateRequest filter");t=g.initDataType,i=e.decryptdata.pssh=g.initData?new Uint8Array(g.initData):null}catch(g){var l;if(this.warn(g.message),(l=this.hls)!=null&&l.config.debug)throw g}if(i===null)return this.log(`Skipping key-session request for "${s}" (no initData)`),Promise.resolve(e);let c=this.getKeyIdString(e.decryptdata);this.log(`Generating key-session request for "${s}": ${c} (init data type: ${t} length: ${i?i.byteLength:null})`);let u=new gn,h=e._onmessage=g=>{let m=e.mediaKeysSession;if(!m){u.emit("error",new Error("invalid state"));return}let{messageType:y,message:T}=g;this.log(`"${y}" message event for session "${m.sessionId}" message size: ${T.byteLength}`),y==="license-request"||y==="license-renewal"?this.renewLicense(e,T).catch(v=>{this.handleError(v),u.emit("error",v)}):y==="license-release"?e.keySystem===se.FAIRPLAY&&(this.updateKeySession(e,tr("acknowledged")),this.removeSession(e)):this.warn(`unhandled media key message type "${y}"`)},d=e._onkeystatuseschange=g=>{if(!e.mediaKeysSession){u.emit("error",new Error("invalid state"));return}this.onKeyStatusChange(e);let y=e.keyStatus;u.emit("keyStatus",y),y==="expired"&&(this.warn(`${e.keySystem} expired for key ${c}`),this.renewKeySession(e))};e.mediaKeysSession.addEventListener("message",h),e.mediaKeysSession.addEventListener("keystatuseschange",d);let f=new Promise((g,m)=>{u.on("error",m),u.on("keyStatus",y=>{y.startsWith("usable")?g():y==="output-restricted"?m(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_STATUS_OUTPUT_RESTRICTED,fatal:!1},"HDCP level output restricted")):y==="internal-error"?m(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_STATUS_INTERNAL_ERROR,fatal:!0},`key status changed to "${y}"`)):y==="expired"?m(new Error("key expired while generating request")):this.warn(`unhandled key status change "${y}"`)})});return e.mediaKeysSession.generateRequest(t,i).then(()=>{var g;this.log(`Request generated for key-session "${(g=e.mediaKeysSession)==null?void 0:g.sessionId}" keyId: ${c}`)}).catch(g=>{throw new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_NO_SESSION,error:g,fatal:!1},`Error generating key-session request: ${g}`)}).then(()=>f).catch(g=>{throw u.removeAllListeners(),this.removeSession(e),g}).then(()=>(u.removeAllListeners(),e))}onKeyStatusChange(e){e.mediaKeysSession.keyStatuses.forEach((t,i)=>{this.log(`key status change "${t}" for keyStatuses keyId: ${He.hexDump("buffer"in i?new Uint8Array(i.buffer,i.byteOffset,i.byteLength):new Uint8Array(i))} session keyId: ${He.hexDump(new Uint8Array(e.decryptdata.keyId||[]))} uri: ${e.decryptdata.uri}`),e.keyStatus=t})}fetchServerCertificate(e){let t=this.config,i=t.loader,s=new i(t),r=this.getServerCertificateUrl(e);return r?(this.log(`Fetching server certificate for "${e}"`),new Promise((o,a)=>{let l={responseType:"arraybuffer",url:r},c=t.certLoadPolicy.default,u={loadPolicy:c,timeout:c.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0},h={onSuccess:(d,f,g,m)=>{o(d.data)},onError:(d,f,g,m)=>{a(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,fatal:!0,networkDetails:g,response:ye({url:l.url,data:void 0},d)},`"${e}" certificate request failed (${r}). Status: ${d.code} (${d.text})`))},onTimeout:(d,f,g)=>{a(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_SERVER_CERTIFICATE_REQUEST_FAILED,fatal:!0,networkDetails:g,response:{url:l.url,data:void 0}},`"${e}" certificate request timed out (${r})`))},onAbort:(d,f,g)=>{a(new Error("aborted"))}};s.load(l,u,h)})):Promise.resolve()}setMediaKeysServerCertificate(e,t,i){return new Promise((s,r)=>{e.setServerCertificate(i).then(o=>{this.log(`setServerCertificate ${o?"success":"not supported by CDM"} (${i==null?void 0:i.byteLength}) on "${t}"`),s(e)}).catch(o=>{r(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_SERVER_CERTIFICATE_UPDATE_FAILED,error:o,fatal:!0},o.message))})})}renewLicense(e,t){return this.requestLicense(e,new Uint8Array(t)).then(i=>this.updateKeySession(e,new Uint8Array(i)).catch(s=>{throw new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_SESSION_UPDATE_FAILED,error:s,fatal:!0},s.message)}))}unpackPlayReadyKeyMessage(e,t){let i=String.fromCharCode.apply(null,new Uint16Array(t.buffer));if(!i.includes("PlayReadyKeyMessage"))return e.setRequestHeader("Content-Type","text/xml; charset=utf-8"),t;let s=new DOMParser().parseFromString(i,"application/xml"),r=s.querySelectorAll("HttpHeader");if(r.length>0){let u;for(let h=0,d=r.length;h<d;h++){var o,a;u=r[h];let f=(o=u.querySelector("name"))==null?void 0:o.textContent,g=(a=u.querySelector("value"))==null?void 0:a.textContent;f&&g&&e.setRequestHeader(f,g)}}let l=s.querySelector("Challenge"),c=l==null?void 0:l.textContent;if(!c)throw new Error("Cannot find <Challenge> in key message");return tr(atob(c))}setupLicenseXHR(e,t,i,s){let r=this.config.licenseXhrSetup;return r?Promise.resolve().then(()=>{if(!i.decryptdata)throw new Error("Key removed");return r.call(this.hls,e,t,i,s)}).catch(o=>{if(!i.decryptdata)throw o;return e.open("POST",t,!0),r.call(this.hls,e,t,i,s)}).then(o=>(e.readyState||e.open("POST",t,!0),{xhr:e,licenseChallenge:o||s})):(e.open("POST",t,!0),Promise.resolve({xhr:e,licenseChallenge:s}))}requestLicense(e,t){let i=this.config.keyLoadPolicy.default;return new Promise((s,r)=>{let o=this.getLicenseServerUrl(e.keySystem);this.log(`Sending license request to URL: ${o}`);let a=new XMLHttpRequest;a.responseType="arraybuffer",a.onreadystatechange=()=>{if(!this.hls||!e.mediaKeysSession)return r(new Error("invalid state"));if(a.readyState===4)if(a.status===200){this._requestLicenseFailureCount=0;let l=a.response;this.log(`License received ${l instanceof ArrayBuffer?l.byteLength:l}`);let c=this.config.licenseResponseCallback;if(c)try{l=c.call(this.hls,a,o,e)}catch(u){this.error(u)}s(l)}else{let l=i.errorRetry,c=l?l.maxNumRetry:0;if(this._requestLicenseFailureCount++,this._requestLicenseFailureCount>c||a.status>=400&&a.status<500)r(new Ae({type:V.KEY_SYSTEM_ERROR,details:I.KEY_SYSTEM_LICENSE_REQUEST_FAILED,fatal:!0,networkDetails:a,response:{url:o,data:void 0,code:a.status,text:a.statusText}},`License Request XHR failed (${o}). Status: ${a.status} (${a.statusText})`));else{let u=c-this._requestLicenseFailureCount+1;this.warn(`Retrying license request, ${u} attempts left`),this.requestLicense(e,t).then(s,r)}}},e.licenseXhr&&e.licenseXhr.readyState!==XMLHttpRequest.DONE&&e.licenseXhr.abort(),e.licenseXhr=a,this.setupLicenseXHR(a,o,e,t).then(({xhr:l,licenseChallenge:c})=>{e.keySystem==se.PLAYREADY&&(c=this.unpackPlayReadyKeyMessage(l,c)),l.send(c)})})}onMediaAttached(e,t){if(!this.config.emeEnabled)return;let i=t.media;this.media=i,i.addEventListener("encrypted",this.onMediaEncrypted),i.addEventListener("waitingforkey",this.onWaitingForKey)}onMediaDetached(){let e=this.media,t=this.mediaKeySessions;e&&(e.removeEventListener("encrypted",this.onMediaEncrypted),e.removeEventListener("waitingforkey",this.onWaitingForKey),this.media=null),this._requestLicenseFailureCount=0,this.setMediaKeysQueue=[],this.mediaKeySessions=[],this.keyIdToKeySessionPromise={},bt.clearKeyUriToKeyIdMap();let i=t.length;at.CDMCleanupPromise=Promise.all(t.map(s=>this.removeSession(s)).concat(e==null?void 0:e.setMediaKeys(null).catch(s=>{this.log(`Could not clear media keys: ${s}`)}))).then(()=>{i&&(this.log("finished closing key sessions and clearing media keys"),t.length=0)}).catch(s=>{this.log(`Could not close sessions and clear media keys: ${s}`)})}onManifestLoading(){this.keyFormatPromise=null}onManifestLoaded(e,{sessionKeys:t}){if(!(!t||!this.config.emeEnabled)&&!this.keyFormatPromise){let i=t.reduce((s,r)=>(s.indexOf(r.keyFormat)===-1&&s.push(r.keyFormat),s),[]);this.log(`Selecting key-system from session-keys ${i.join(", ")}`),this.keyFormatPromise=this.getKeyFormatPromise(i)}}removeSession(e){let{mediaKeysSession:t,licenseXhr:i}=e;if(t){this.log(`Remove licenses and keys and close session ${t.sessionId}`),e._onmessage&&(t.removeEventListener("message",e._onmessage),e._onmessage=void 0),e._onkeystatuseschange&&(t.removeEventListener("keystatuseschange",e._onkeystatuseschange),e._onkeystatuseschange=void 0),i&&i.readyState!==XMLHttpRequest.DONE&&i.abort(),e.mediaKeysSession=e.decryptdata=e.licenseXhr=void 0;let s=this.mediaKeySessions.indexOf(e);return s>-1&&this.mediaKeySessions.splice(s,1),t.remove().catch(r=>{this.log(`Could not remove session: ${r}`)}).then(()=>t.close()).catch(r=>{this.log(`Could not close session: ${r}`)})}}};at.CDMCleanupPromise=void 0;var Ae=class extends Error{constructor(e,t){super(t),this.data=void 0,e.error||(e.error=new Error(t)),this.data=e,e.err=e.error}},Ee;(function(n){n.MANIFEST="m",n.AUDIO="a",n.VIDEO="v",n.MUXED="av",n.INIT="i",n.CAPTION="c",n.TIMED_TEXT="tt",n.KEY="k",n.OTHER="o"})(Ee||(Ee={}));var jr;(function(n){n.DASH="d",n.HLS="h",n.SMOOTH="s",n.OTHER="o"})(jr||(jr={}));var At;(function(n){n.OBJECT="CMCD-Object",n.REQUEST="CMCD-Request",n.SESSION="CMCD-Session",n.STATUS="CMCD-Status"})(At||(At={}));var bh={[At.OBJECT]:["br","d","ot","tb"],[At.REQUEST]:["bl","dl","mtp","nor","nrr","su"],[At.SESSION]:["cid","pr","sf","sid","st","v"],[At.STATUS]:["bs","rtp"]},ct=class{constructor(e,t){this.value=void 0,this.params=void 0,Array.isArray(e)&&(e=e.map(i=>i instanceof ct?i:new ct(i))),this.value=e,this.params=t}},cs=class{constructor(e){this.description=void 0,this.description=e}},Rh="Dict";function Ih(n){return Array.isArray(n)?JSON.stringify(n):n instanceof Map?"Map{}":n instanceof Set?"Set{}":typeof n=="object"?JSON.stringify(n):String(n)}function Dh(n,e,t,i){return new Error(`failed to ${n} "${Ih(e)}" as ${t}`,{cause:i})}var jo="Bare Item",Ch="Boolean",wh="Byte Sequence",kh="Decimal",_h="Integer";function Ph(n){return n<-999999999999999||999999999999999<n}var Oh=/[\x00-\x1f\x7f]+/,Fh="Token",Mh="Key";function qe(n,e,t){return Dh("serialize",n,e,t)}function Nh(n){if(typeof n!="boolean")throw qe(n,Ch);return n?"?1":"?0"}function Bh(n){return btoa(String.fromCharCode(...n))}function Uh(n){if(ArrayBuffer.isView(n)===!1)throw qe(n,wh);return`:${Bh(n)}:`}function qa(n){if(Ph(n))throw qe(n,_h);return n.toString()}function $h(n){return`@${qa(n.getTime()/1e3)}`}function ja(n,e){if(n<0)return-ja(-n,e);let t=Math.pow(10,e);if(Math.abs(n*t%1-.5)<Number.EPSILON){let s=Math.floor(n*t);return(s%2===0?s:s+1)/t}else return Math.round(n*t)/t}function Gh(n){let e=ja(n,3);if(Math.floor(Math.abs(e)).toString().length>12)throw qe(n,kh);let t=e.toString();return t.includes(".")?t:`${t}.0`}var Hh="String";function Vh(n){if(Oh.test(n))throw qe(n,Hh);return`"${n.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}"`}function Kh(n){return n.description||n.toString().slice(7,-1)}function zo(n){let e=Kh(n);if(/^([a-zA-Z*])([!#$%&'*+\-.^_`|~\w:/]*)$/.test(e)===!1)throw qe(e,Fh);return e}function zr(n){switch(typeof n){case"number":if(!M(n))throw qe(n,jo);return Number.isInteger(n)?qa(n):Gh(n);case"string":return Vh(n);case"symbol":return zo(n);case"boolean":return Nh(n);case"object":if(n instanceof Date)return $h(n);if(n instanceof Uint8Array)return Uh(n);if(n instanceof cs)return zo(n);default:throw qe(n,jo)}}function Xr(n){if(/^[a-z*][a-z0-9\-_.*]*$/.test(n)===!1)throw qe(n,Mh);return n}function yn(n){return n==null?"":Object.entries(n).map(([e,t])=>t===!0?`;${Xr(e)}`:`;${Xr(e)}=${zr(t)}`).join("")}function za(n){return n instanceof ct?`${zr(n.value)}${yn(n.params)}`:zr(n)}function Wh(n){return`(${n.value.map(za).join(" ")})${yn(n.params)}`}function Yh(n,e={whitespace:!0}){if(typeof n!="object")throw qe(n,Rh);let t=n instanceof Map?n.entries():Object.entries(n),i=e!=null&&e.whitespace?" ":"";return Array.from(t).map(([s,r])=>{r instanceof ct||(r=new ct(r));let o=Xr(s);return r.value===!0?o+=yn(r.params):(o+="=",Array.isArray(r.value)?o+=Wh(r):o+=za(r)),o}).join(`,${i}`)}function qh(n,e){return Yh(n,e)}var jh=n=>n==="ot"||n==="sf"||n==="st",zh=n=>typeof n=="number"?M(n):n!=null&&n!==""&&n!==!1;function Xh(n,e){let t=new URL(n),i=new URL(e);if(t.origin!==i.origin)return n;let s=t.pathname.split("/").slice(1),r=i.pathname.split("/").slice(1,-1);for(;s[0]===r[0];)s.shift(),r.shift();for(;r.length;)r.shift(),s.unshift("..");return s.join("/")}function Qh(){try{return crypto.randomUUID()}catch(n){try{let e=URL.createObjectURL(new Blob),t=e.toString();return URL.revokeObjectURL(e),t.slice(t.lastIndexOf("/")+1)}catch(e){let t=new Date().getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,s=>{let r=(t+Math.random()*16)%16|0;return t=Math.floor(t/16),(s=="x"?r:r&3|8).toString(16)})}}}var Bi=n=>Math.round(n),Jh=(n,e)=>(e!=null&&e.baseUrl&&(n=Xh(n,e.baseUrl)),encodeURIComponent(n)),_i=n=>Bi(n/100)*100,Zh={br:Bi,d:Bi,bl:_i,dl:_i,mtp:_i,nor:Jh,rtp:_i,tb:Bi};function ed(n,e){let t={};if(n==null||typeof n!="object")return t;let i=Object.keys(n).sort(),s=le({},Zh,e==null?void 0:e.formatters),r=e==null?void 0:e.filter;return i.forEach(o=>{if(r!=null&&r(o))return;let a=n[o],l=s[o];l&&(a=l(a,e)),!(o==="v"&&a===1)&&(o=="pr"&&a===1||zh(a)&&(jh(o)&&typeof a=="string"&&(a=new cs(a)),t[o]=a))}),t}function Xa(n,e={}){return n?qh(ed(n,e),le({whitespace:!1},e)):""}function td(n,e={}){if(!n)return{};let t=Object.entries(n),i=Object.entries(bh).concat(Object.entries((e==null?void 0:e.customHeaderMap)||{})),s=t.reduce((r,o)=>{var a,l;let[c,u]=o,h=((a=i.find(d=>d[1].includes(c)))==null?void 0:a[0])||At.REQUEST;return(l=r[h])!=null||(r[h]={}),r[h][c]=u,r},{});return Object.entries(s).reduce((r,[o,a])=>(r[o]=Xa(a,e),r),{})}function id(n,e,t){return le(n,td(e,t))}var sd="CMCD";function rd(n,e={}){if(!n)return"";let t=Xa(n,e);return`${sd}=${encodeURIComponent(t)}`}var Xo=/CMCD=[^&#]+/;function nd(n,e,t){let i=rd(e,t);if(!i)return n;if(Xo.test(n))return n.replace(Xo,i);let s=n.includes("?")?"&":"?";return`${n}${s}${i}`}var Qr=class{constructor(e){this.hls=void 0,this.config=void 0,this.media=void 0,this.sid=void 0,this.cid=void 0,this.useHeaders=!1,this.includeKeys=void 0,this.initialized=!1,this.starved=!1,this.buffering=!0,this.audioBuffer=void 0,this.videoBuffer=void 0,this.onWaiting=()=>{this.initialized&&(this.starved=!0),this.buffering=!0},this.onPlaying=()=>{this.initialized||(this.initialized=!0),this.buffering=!1},this.applyPlaylistData=s=>{try{this.apply(s,{ot:Ee.MANIFEST,su:!this.initialized})}catch(r){L.warn("Could not generate manifest CMCD data.",r)}},this.applyFragmentData=s=>{try{let r=s.frag,o=this.hls.levels[r.level],a=this.getObjectType(r),l={d:r.duration*1e3,ot:a};(a===Ee.VIDEO||a===Ee.AUDIO||a==Ee.MUXED)&&(l.br=o.bitrate/1e3,l.tb=this.getTopBandwidth(a)/1e3,l.bl=this.getBufferLength(a)),this.apply(s,l)}catch(r){L.warn("Could not generate segment CMCD data.",r)}},this.hls=e;let t=this.config=e.config,{cmcd:i}=t;i!=null&&(t.pLoader=this.createPlaylistLoader(),t.fLoader=this.createFragmentLoader(),this.sid=i.sessionId||Qh(),this.cid=i.contentId,this.useHeaders=i.useHeaders===!0,this.includeKeys=i.includeKeys,this.registerListeners())}registerListeners(){let e=this.hls;e.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.on(p.MEDIA_DETACHED,this.onMediaDetached,this),e.on(p.BUFFER_CREATED,this.onBufferCreated,this)}unregisterListeners(){let e=this.hls;e.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.off(p.MEDIA_DETACHED,this.onMediaDetached,this),e.off(p.BUFFER_CREATED,this.onBufferCreated,this)}destroy(){this.unregisterListeners(),this.onMediaDetached(),this.hls=this.config=this.audioBuffer=this.videoBuffer=null,this.onWaiting=this.onPlaying=null}onMediaAttached(e,t){this.media=t.media,this.media.addEventListener("waiting",this.onWaiting),this.media.addEventListener("playing",this.onPlaying)}onMediaDetached(){this.media&&(this.media.removeEventListener("waiting",this.onWaiting),this.media.removeEventListener("playing",this.onPlaying),this.media=null)}onBufferCreated(e,t){var i,s;this.audioBuffer=(i=t.tracks.audio)==null?void 0:i.buffer,this.videoBuffer=(s=t.tracks.video)==null?void 0:s.buffer}createData(){var e;return{v:1,sf:jr.HLS,sid:this.sid,cid:this.cid,pr:(e=this.media)==null?void 0:e.playbackRate,mtp:this.hls.bandwidthEstimate/1e3}}apply(e,t={}){le(t,this.createData());let i=t.ot===Ee.INIT||t.ot===Ee.VIDEO||t.ot===Ee.MUXED;this.starved&&i&&(t.bs=!0,t.su=!0,this.starved=!1),t.su==null&&(t.su=this.buffering);let{includeKeys:s}=this;s&&(t=Object.keys(t).reduce((r,o)=>(s.includes(o)&&(r[o]=t[o]),r),{})),this.useHeaders?(e.headers||(e.headers={}),id(e.headers,t)):e.url=nd(e.url,t)}getObjectType(e){let{type:t}=e;if(t==="subtitle")return Ee.TIMED_TEXT;if(e.sn==="initSegment")return Ee.INIT;if(t==="audio")return Ee.AUDIO;if(t==="main")return this.hls.audioTracks.length?Ee.VIDEO:Ee.MUXED}getTopBandwidth(e){let t=0,i,s=this.hls;if(e===Ee.AUDIO)i=s.audioTracks;else{let r=s.maxAutoLevel,o=r>-1?r+1:s.levels.length;i=s.levels.slice(0,o)}for(let r of i)r.bitrate>t&&(t=r.bitrate);return t>0?t:NaN}getBufferLength(e){let t=this.hls.media,i=e===Ee.AUDIO?this.audioBuffer:this.videoBuffer;return!i||!t?NaN:J.bufferInfo(i,t.currentTime,this.config.maxBufferHole).len*1e3}createPlaylistLoader(){let{pLoader:e}=this.config,t=this.applyPlaylistData,i=e||this.config.loader;return class{constructor(r){this.loader=void 0,this.loader=new i(r)}get stats(){return this.loader.stats}get context(){return this.loader.context}destroy(){this.loader.destroy()}abort(){this.loader.abort()}load(r,o,a){t(r),this.loader.load(r,o,a)}}}createFragmentLoader(){let{fLoader:e}=this.config,t=this.applyFragmentData,i=e||this.config.loader;return class{constructor(r){this.loader=void 0,this.loader=new i(r)}get stats(){return this.loader.stats}get context(){return this.loader.context}destroy(){this.loader.destroy()}abort(){this.loader.abort()}load(r,o,a){t(r),this.loader.load(r,o,a)}}}},od=3e5,Jr=class{constructor(e){this.hls=void 0,this.log=void 0,this.loader=null,this.uri=null,this.pathwayId=".",this.pathwayPriority=null,this.timeToLoad=300,this.reloadTimer=-1,this.updated=0,this.started=!1,this.enabled=!0,this.levels=null,this.audioTracks=null,this.subtitleTracks=null,this.penalizedPathways={},this.hls=e,this.log=L.log.bind(L,"[content-steering]:"),this.registerListeners()}registerListeners(){let e=this.hls;e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_LOADED,this.onManifestLoaded,this),e.on(p.MANIFEST_PARSED,this.onManifestParsed,this),e.on(p.ERROR,this.onError,this)}unregisterListeners(){let e=this.hls;e&&(e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_LOADED,this.onManifestLoaded,this),e.off(p.MANIFEST_PARSED,this.onManifestParsed,this),e.off(p.ERROR,this.onError,this))}startLoad(){if(this.started=!0,this.clearTimeout(),this.enabled&&this.uri){if(this.updated){let e=this.timeToLoad*1e3-(performance.now()-this.updated);if(e>0){this.scheduleRefresh(this.uri,e);return}}this.loadSteeringManifest(this.uri)}}stopLoad(){this.started=!1,this.loader&&(this.loader.destroy(),this.loader=null),this.clearTimeout()}clearTimeout(){this.reloadTimer!==-1&&(self.clearTimeout(this.reloadTimer),this.reloadTimer=-1)}destroy(){this.unregisterListeners(),this.stopLoad(),this.hls=null,this.levels=this.audioTracks=this.subtitleTracks=null}removeLevel(e){let t=this.levels;t&&(this.levels=t.filter(i=>i!==e))}onManifestLoading(){this.stopLoad(),this.enabled=!0,this.timeToLoad=300,this.updated=0,this.uri=null,this.pathwayId=".",this.levels=this.audioTracks=this.subtitleTracks=null}onManifestLoaded(e,t){let{contentSteering:i}=t;i!==null&&(this.pathwayId=i.pathwayId,this.uri=i.uri,this.started&&this.startLoad())}onManifestParsed(e,t){this.audioTracks=t.audioTracks,this.subtitleTracks=t.subtitleTracks}onError(e,t){let{errorAction:i}=t;if((i==null?void 0:i.action)===me.SendAlternateToPenaltyBox&&i.flags===Me.MoveAllAlternatesMatchingHost){let s=this.levels,r=this.pathwayPriority,o=this.pathwayId;if(t.context){let{groupId:a,pathwayId:l,type:c}=t.context;a&&s?o=this.getPathwayForGroupId(a,c,o):l&&(o=l)}o in this.penalizedPathways||(this.penalizedPathways[o]=performance.now()),!r&&s&&(r=s.reduce((a,l)=>(a.indexOf(l.pathwayId)===-1&&a.push(l.pathwayId),a),[])),r&&r.length>1&&(this.updatePathwayPriority(r),i.resolved=this.pathwayId!==o),i.resolved||L.warn(`Could not resolve ${t.details} ("${t.error.message}") with content-steering for Pathway: ${o} levels: ${s&&s.length} priorities: ${JSON.stringify(r)} penalized: ${JSON.stringify(this.penalizedPathways)}`)}}filterParsedLevels(e){this.levels=e;let t=this.getLevelsForPathway(this.pathwayId);if(t.length===0){let i=e[0].pathwayId;this.log(`No levels found in Pathway ${this.pathwayId}. Setting initial Pathway to "${i}"`),t=this.getLevelsForPathway(i),this.pathwayId=i}return t.length!==e.length?(this.log(`Found ${t.length}/${e.length} levels in Pathway "${this.pathwayId}"`),t):e}getLevelsForPathway(e){return this.levels===null?[]:this.levels.filter(t=>e===t.pathwayId)}updatePathwayPriority(e){this.pathwayPriority=e;let t,i=this.penalizedPathways,s=performance.now();Object.keys(i).forEach(r=>{s-i[r]>od&&delete i[r]});for(let r=0;r<e.length;r++){let o=e[r];if(o in i)continue;if(o===this.pathwayId)return;let a=this.hls.nextLoadLevel,l=this.hls.levels[a];if(t=this.getLevelsForPathway(o),t.length>0){this.log(`Setting Pathway to "${o}"`),this.pathwayId=o,xa(t),this.hls.trigger(p.LEVELS_UPDATED,{levels:t});let c=this.hls.levels[a];l&&c&&this.levels&&(c.attrs["STABLE-VARIANT-ID"]!==l.attrs["STABLE-VARIANT-ID"]&&c.bitrate!==l.bitrate&&this.log(`Unstable Pathways change from bitrate ${l.bitrate} to ${c.bitrate}`),this.hls.nextLoadLevel=a);break}}}getPathwayForGroupId(e,t,i){let s=this.getLevelsForPathway(i).concat(this.levels||[]);for(let r=0;r<s.length;r++)if(t===z.AUDIO_TRACK&&s[r].hasAudioGroup(e)||t===z.SUBTITLE_TRACK&&s[r].hasSubtitleGroup(e))return s[r].pathwayId;return i}clonePathways(e){let t=this.levels;if(!t)return;let i={},s={};e.forEach(r=>{let{ID:o,"BASE-ID":a,"URI-REPLACEMENT":l}=r;if(t.some(u=>u.pathwayId===o))return;let c=this.getLevelsForPathway(a).map(u=>{let h=new te(u.attrs);h["PATHWAY-ID"]=o;let d=h.AUDIO&&`${h.AUDIO}_clone_${o}`,f=h.SUBTITLES&&`${h.SUBTITLES}_clone_${o}`;d&&(i[h.AUDIO]=d,h.AUDIO=d),f&&(s[h.SUBTITLES]=f,h.SUBTITLES=f);let g=Qa(u.uri,h["STABLE-VARIANT-ID"],"PER-VARIANT-URIS",l),m=new lt({attrs:h,audioCodec:u.audioCodec,bitrate:u.bitrate,height:u.height,name:u.name,url:g,videoCodec:u.videoCodec,width:u.width});if(u.audioGroups)for(let y=1;y<u.audioGroups.length;y++)m.addGroupId("audio",`${u.audioGroups[y]}_clone_${o}`);if(u.subtitleGroups)for(let y=1;y<u.subtitleGroups.length;y++)m.addGroupId("text",`${u.subtitleGroups[y]}_clone_${o}`);return m});t.push(...c),Qo(this.audioTracks,i,l,o),Qo(this.subtitleTracks,s,l,o)})}loadSteeringManifest(e){let t=this.hls.config,i=t.loader;this.loader&&this.loader.destroy(),this.loader=new i(t);let s;try{s=new self.URL(e)}catch(u){this.enabled=!1,this.log(`Failed to parse Steering Manifest URI: ${e}`);return}if(s.protocol!=="data:"){let u=(this.hls.bandwidthEstimate||t.abrEwmaDefaultEstimate)|0;s.searchParams.set("_HLS_pathway",this.pathwayId),s.searchParams.set("_HLS_throughput",""+u)}let r={responseType:"json",url:s.href},o=t.steeringManifestLoadPolicy.default,a=o.errorRetry||o.timeoutRetry||{},l={loadPolicy:o,timeout:o.maxLoadTimeMs,maxRetry:a.maxNumRetry||0,retryDelay:a.retryDelayMs||0,maxRetryDelay:a.maxRetryDelayMs||0},c={onSuccess:(u,h,d,f)=>{this.log(`Loaded steering manifest: "${s}"`);let g=u.data;if(g.VERSION!==1){this.log(`Steering VERSION ${g.VERSION} not supported!`);return}this.updated=performance.now(),this.timeToLoad=g.TTL;let{"RELOAD-URI":m,"PATHWAY-CLONES":y,"PATHWAY-PRIORITY":T}=g;if(m)try{this.uri=new self.URL(m,s).href}catch(E){this.enabled=!1,this.log(`Failed to parse Steering Manifest RELOAD-URI: ${m}`);return}this.scheduleRefresh(this.uri||d.url),y&&this.clonePathways(y);let v={steeringManifest:g,url:s.toString()};this.hls.trigger(p.STEERING_MANIFEST_LOADED,v),T&&this.updatePathwayPriority(T)},onError:(u,h,d,f)=>{if(this.log(`Error loading steering manifest: ${u.code} ${u.text} (${h.url})`),this.stopLoad(),u.code===410){this.enabled=!1,this.log(`Steering manifest ${h.url} no longer available`);return}let g=this.timeToLoad*1e3;if(u.code===429){let m=this.loader;if(typeof(m==null?void 0:m.getResponseHeader)=="function"){let y=m.getResponseHeader("Retry-After");y&&(g=parseFloat(y)*1e3)}this.log(`Steering manifest ${h.url} rate limited`);return}this.scheduleRefresh(this.uri||h.url,g)},onTimeout:(u,h,d)=>{this.log(`Timeout loading steering manifest (${h.url})`),this.scheduleRefresh(this.uri||h.url)}};this.log(`Requesting steering manifest: ${s}`),this.loader.load(r,l,c)}scheduleRefresh(e,t=this.timeToLoad*1e3){this.clearTimeout(),this.reloadTimer=self.setTimeout(()=>{var i;let s=(i=this.hls)==null?void 0:i.media;if(s&&!s.ended){this.loadSteeringManifest(e);return}this.scheduleRefresh(e,this.timeToLoad*1e3)},t)}};function Qo(n,e,t,i){n&&Object.keys(e).forEach(s=>{let r=n.filter(o=>o.groupId===s).map(o=>{let a=le({},o);return a.details=void 0,a.attrs=new te(a.attrs),a.url=a.attrs.URI=Qa(o.url,o.attrs["STABLE-RENDITION-ID"],"PER-RENDITION-URIS",t),a.groupId=a.attrs["GROUP-ID"]=e[s],a.attrs["PATHWAY-ID"]=i,a});n.push(...r)})}function Qa(n,e,t,i){let{HOST:s,PARAMS:r,[t]:o}=i,a;e&&(a=o==null?void 0:o[e],a&&(n=a));let l=new self.URL(n);return s&&!a&&(l.host=s),r&&Object.keys(r).sort().forEach(c=>{c&&l.searchParams.set(c,r[c])}),l.href}var ad=/^age:\s*[\d.]+\s*$/im,us=class{constructor(e){this.xhrSetup=void 0,this.requestTimeout=void 0,this.retryTimeout=void 0,this.retryDelay=void 0,this.config=null,this.callbacks=null,this.context=null,this.loader=null,this.stats=void 0,this.xhrSetup=e&&e.xhrSetup||null,this.stats=new Gt,this.retryDelay=0}destroy(){this.callbacks=null,this.abortInternal(),this.loader=null,this.config=null,this.context=null,this.xhrSetup=null}abortInternal(){let e=this.loader;self.clearTimeout(this.requestTimeout),self.clearTimeout(this.retryTimeout),e&&(e.onreadystatechange=null,e.onprogress=null,e.readyState!==4&&(this.stats.aborted=!0,e.abort()))}abort(){var e;this.abortInternal(),(e=this.callbacks)!=null&&e.onAbort&&this.callbacks.onAbort(this.stats,this.context,this.loader)}load(e,t,i){if(this.stats.loading.start)throw new Error("Loader can only be used once.");this.stats.loading.start=self.performance.now(),this.context=e,this.config=t,this.callbacks=i,this.loadInternal()}loadInternal(){let{config:e,context:t}=this;if(!e||!t)return;let i=this.loader=new self.XMLHttpRequest,s=this.stats;s.loading.first=0,s.loaded=0,s.aborted=!1;let r=this.xhrSetup;r?Promise.resolve().then(()=>{if(!(this.loader!==i||this.stats.aborted))return r(i,t.url)}).catch(o=>{if(!(this.loader!==i||this.stats.aborted))return i.open("GET",t.url,!0),r(i,t.url)}).then(()=>{this.loader!==i||this.stats.aborted||this.openAndSendXhr(i,t,e)}).catch(o=>{this.callbacks.onError({code:i.status,text:o.message},t,i,s)}):this.openAndSendXhr(i,t,e)}openAndSendXhr(e,t,i){e.readyState||e.open("GET",t.url,!0);let s=t.headers,{maxTimeToFirstByteMs:r,maxLoadTimeMs:o}=i.loadPolicy;if(s)for(let a in s)e.setRequestHeader(a,s[a]);t.rangeEnd&&e.setRequestHeader("Range","bytes="+t.rangeStart+"-"+(t.rangeEnd-1)),e.onreadystatechange=this.readystatechange.bind(this),e.onprogress=this.loadprogress.bind(this),e.responseType=t.responseType,self.clearTimeout(this.requestTimeout),i.timeout=r&&M(r)?r:o,this.requestTimeout=self.setTimeout(this.loadtimeout.bind(this),i.timeout),e.send()}readystatechange(){let{context:e,loader:t,stats:i}=this;if(!e||!t)return;let s=t.readyState,r=this.config;if(!i.aborted&&s>=2&&(i.loading.first===0&&(i.loading.first=Math.max(self.performance.now(),i.loading.start),r.timeout!==r.loadPolicy.maxLoadTimeMs&&(self.clearTimeout(this.requestTimeout),r.timeout=r.loadPolicy.maxLoadTimeMs,this.requestTimeout=self.setTimeout(this.loadtimeout.bind(this),r.loadPolicy.maxLoadTimeMs-(i.loading.first-i.loading.start)))),s===4)){self.clearTimeout(this.requestTimeout),t.onreadystatechange=null,t.onprogress=null;let o=t.status,a=t.responseType!=="text";if(o>=200&&o<300&&(a&&t.response||t.responseText!==null)){i.loading.end=Math.max(self.performance.now(),i.loading.first);let l=a?t.response:t.responseText,c=t.responseType==="arraybuffer"?l.byteLength:l.length;if(i.loaded=i.total=c,i.bwEstimate=i.total*8e3/(i.loading.end-i.loading.first),!this.callbacks)return;let u=this.callbacks.onProgress;if(u&&u(i,e,l,t),!this.callbacks)return;let h={url:t.responseURL,data:l,code:o};this.callbacks.onSuccess(h,i,e,t)}else{let l=r.loadPolicy.errorRetry,c=i.retry,u={url:e.url,data:void 0,code:o};zi(l,c,!1,u)?this.retry(l):(L.error(`${o} while loading ${e.url}`),this.callbacks.onError({code:o,text:t.statusText},e,t,i))}}}loadtimeout(){if(!this.config)return;let e=this.config.loadPolicy.timeoutRetry,t=this.stats.retry;if(zi(e,t,!0))this.retry(e);else{var i;L.warn(`timeout while loading ${(i=this.context)==null?void 0:i.url}`);let s=this.callbacks;s&&(this.abortInternal(),s.onTimeout(this.stats,this.context,this.loader))}}retry(e){let{context:t,stats:i}=this;this.retryDelay=un(e,i.retry),i.retry++,L.warn(`${status?"HTTP Status "+status:"Timeout"} while loading ${t==null?void 0:t.url}, retrying ${i.retry}/${e.maxNumRetry} in ${this.retryDelay}ms`),this.abortInternal(),this.loader=null,self.clearTimeout(this.retryTimeout),this.retryTimeout=self.setTimeout(this.loadInternal.bind(this),this.retryDelay)}loadprogress(e){let t=this.stats;t.loaded=e.loaded,e.lengthComputable&&(t.total=e.total)}getCacheAge(){let e=null;if(this.loader&&ad.test(this.loader.getAllResponseHeaders())){let t=this.loader.getResponseHeader("age");e=t?parseFloat(t):null}return e}getResponseHeader(e){return this.loader&&new RegExp(`^${e}:\\s*[\\d.]+\\s*$`,"im").test(this.loader.getAllResponseHeaders())?this.loader.getResponseHeader(e):null}};function ld(){if(self.fetch&&self.AbortController&&self.ReadableStream&&self.Request)try{return new self.ReadableStream({}),!0}catch(n){}return!1}var cd=/(\d+)-(\d+)\/(\d+)/,hs=class{constructor(e){this.fetchSetup=void 0,this.requestTimeout=void 0,this.request=null,this.response=null,this.controller=void 0,this.context=null,this.config=null,this.callbacks=null,this.stats=void 0,this.loader=null,this.fetchSetup=e.fetchSetup||fd,this.controller=new self.AbortController,this.stats=new Gt}destroy(){this.loader=this.callbacks=this.context=this.config=this.request=null,this.abortInternal(),this.response=null,this.fetchSetup=this.controller=this.stats=null}abortInternal(){this.controller&&!this.stats.loading.end&&(this.stats.aborted=!0,this.controller.abort())}abort(){var e;this.abortInternal(),(e=this.callbacks)!=null&&e.onAbort&&this.callbacks.onAbort(this.stats,this.context,this.response)}load(e,t,i){let s=this.stats;if(s.loading.start)throw new Error("Loader can only be used once.");s.loading.start=self.performance.now();let r=ud(e,this.controller.signal),o=i.onProgress,a=e.responseType==="arraybuffer",l=a?"byteLength":"length",{maxTimeToFirstByteMs:c,maxLoadTimeMs:u}=t.loadPolicy;this.context=e,this.config=t,this.callbacks=i,this.request=this.fetchSetup(e,r),self.clearTimeout(this.requestTimeout),t.timeout=c&&M(c)?c:u,this.requestTimeout=self.setTimeout(()=>{this.abortInternal(),i.onTimeout(s,e,this.response)},t.timeout),self.fetch(this.request).then(h=>{this.response=this.loader=h;let d=Math.max(self.performance.now(),s.loading.start);if(self.clearTimeout(this.requestTimeout),t.timeout=u,this.requestTimeout=self.setTimeout(()=>{this.abortInternal(),i.onTimeout(s,e,this.response)},u-(d-s.loading.start)),!h.ok){let{status:f,statusText:g}=h;throw new Zr(g||"fetch, bad network response",f,h)}return s.loading.first=d,s.total=dd(h.headers)||s.total,o&&M(t.highWaterMark)?this.loadProgressively(h,s,e,t.highWaterMark,o):a?h.arrayBuffer():e.responseType==="json"?h.json():h.text()}).then(h=>{let d=this.response;if(!d)throw new Error("loader destroyed");self.clearTimeout(this.requestTimeout),s.loading.end=Math.max(self.performance.now(),s.loading.first);let f=h[l];f&&(s.loaded=s.total=f);let g={url:d.url,data:h,code:d.status};o&&!M(t.highWaterMark)&&o(s,e,h,d),i.onSuccess(g,s,e,d)}).catch(h=>{if(self.clearTimeout(this.requestTimeout),s.aborted)return;let d=h&&h.code||0,f=h?h.message:null;i.onError({code:d,text:f},e,h?h.details:null,s)})}getCacheAge(){let e=null;if(this.response){let t=this.response.headers.get("age");e=t?parseFloat(t):null}return e}getResponseHeader(e){return this.response?this.response.headers.get(e):null}loadProgressively(e,t,i,s=0,r){let o=new Ji,a=e.body.getReader(),l=()=>a.read().then(c=>{if(c.done)return o.dataLength&&r(t,i,o.flush(),e),Promise.resolve(new ArrayBuffer(0));let u=c.value,h=u.length;return t.loaded+=h,h<s||o.dataLength?(o.push(u),o.dataLength>=s&&r(t,i,o.flush(),e)):r(t,i,u,e),l()}).catch(()=>Promise.reject());return l()}};function ud(n,e){let t={method:"GET",mode:"cors",credentials:"same-origin",signal:e,headers:new self.Headers(le({},n.headers))};return n.rangeEnd&&t.headers.set("Range","bytes="+n.rangeStart+"-"+String(n.rangeEnd-1)),t}function hd(n){let e=cd.exec(n);if(e)return parseInt(e[2])-parseInt(e[1])+1}function dd(n){let e=n.get("Content-Range");if(e){let i=hd(e);if(M(i))return i}let t=n.get("Content-Length");if(t)return parseInt(t)}function fd(n,e){return new self.Request(n.url,e)}var Zr=class extends Error{constructor(e,t,i){super(e),this.code=void 0,this.details=void 0,this.code=t,this.details=i}},gd=/\s/,md={newCue(n,e,t,i){let s=[],r,o,a,l,c,u=self.VTTCue||self.TextTrackCue;for(let d=0;d<i.rows.length;d++)if(r=i.rows[d],a=!0,l=0,c="",!r.isEmpty()){var h;for(let m=0;m<r.chars.length;m++)gd.test(r.chars[m].uchar)&&a?l++:(c+=r.chars[m].uchar,a=!1);r.cueStartTime=e,e===t&&(t+=1e-4),l>=16?l--:l++;let f=Ha(c.trim()),g=pn(e,t,f);n!=null&&(h=n.cues)!=null&&h.getCueById(g)||(o=new u(e,t,f),o.id=g,o.line=d+1,o.align="left",o.position=10+Math.min(80,Math.floor(l*8/32)*10),s.push(o))}return n&&s.length&&(s.sort((d,f)=>d.line==="auto"||f.line==="auto"?0:d.line>8&&f.line>8?f.line-d.line:d.line-f.line),s.forEach(d=>ma(n,d))),s}},pd={maxTimeToFirstByteMs:8e3,maxLoadTimeMs:2e4,timeoutRetry:null,errorRetry:null},Ja=ye(ye({autoStartLoad:!0,startPosition:-1,defaultAudioCodec:void 0,debug:!1,capLevelOnFPSDrop:!1,capLevelToPlayerSize:!1,ignoreDevicePixelRatio:!1,preferManagedMediaSource:!0,initialLiveManifestSize:1,maxBufferLength:30,backBufferLength:1/0,frontBufferFlushThreshold:1/0,maxBufferSize:60*1e3*1e3,maxBufferHole:.1,highBufferWatchdogPeriod:2,nudgeOffset:.1,nudgeMaxRetry:3,maxFragLookUpTolerance:.25,liveSyncDurationCount:3,liveMaxLatencyDurationCount:1/0,liveSyncDuration:void 0,liveMaxLatencyDuration:void 0,maxLiveSyncPlaybackRate:1,liveDurationInfinity:!1,liveBackBufferLength:null,maxMaxBufferLength:600,enableWorker:!0,workerPath:null,enableSoftwareAES:!0,startLevel:void 0,startFragPrefetch:!1,fpsDroppedMonitoringPeriod:5e3,fpsDroppedMonitoringThreshold:.2,appendErrorMaxRetry:3,loader:us,fLoader:void 0,pLoader:void 0,xhrSetup:void 0,licenseXhrSetup:void 0,licenseResponseCallback:void 0,abrController:fr,bufferController:Br,capLevelController:ui,errorController:hr,fpsController:qr,stretchShortVideoTrack:!1,maxAudioFramesDrift:1,forceKeyFrameOnDiscontinuity:!0,abrEwmaFastLive:3,abrEwmaSlowLive:9,abrEwmaFastVoD:3,abrEwmaSlowVoD:9,abrEwmaDefaultEstimate:5e5,abrEwmaDefaultEstimateMax:5e6,abrBandWidthFactor:.95,abrBandWidthUpFactor:.7,abrMaxWithRealBitrate:!1,maxStarvationDelay:4,maxLoadingDelay:4,minAutoBitrate:0,emeEnabled:!1,widevineLicenseUrl:void 0,drmSystems:{},drmSystemOptions:{},requestMediaKeySystemAccessFunc:ta,testBandwidth:!0,progressive:!1,lowLatencyMode:!0,cmcd:void 0,enableDateRangeMetadataCues:!0,enableEmsgMetadataCues:!0,enableID3MetadataCues:!0,useMediaCapabilities:!0,certLoadPolicy:{default:pd},keyLoadPolicy:{default:{maxTimeToFirstByteMs:8e3,maxLoadTimeMs:2e4,timeoutRetry:{maxNumRetry:1,retryDelayMs:1e3,maxRetryDelayMs:2e4,backoff:"linear"},errorRetry:{maxNumRetry:8,retryDelayMs:1e3,maxRetryDelayMs:2e4,backoff:"linear"}}},manifestLoadPolicy:{default:{maxTimeToFirstByteMs:1/0,maxLoadTimeMs:2e4,timeoutRetry:{maxNumRetry:2,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:1,retryDelayMs:1e3,maxRetryDelayMs:8e3}}},playlistLoadPolicy:{default:{maxTimeToFirstByteMs:1e4,maxLoadTimeMs:2e4,timeoutRetry:{maxNumRetry:2,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:2,retryDelayMs:1e3,maxRetryDelayMs:8e3}}},fragLoadPolicy:{default:{maxTimeToFirstByteMs:1e4,maxLoadTimeMs:12e4,timeoutRetry:{maxNumRetry:4,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:6,retryDelayMs:1e3,maxRetryDelayMs:8e3}}},steeringManifestLoadPolicy:{default:{maxTimeToFirstByteMs:1e4,maxLoadTimeMs:2e4,timeoutRetry:{maxNumRetry:2,retryDelayMs:0,maxRetryDelayMs:0},errorRetry:{maxNumRetry:1,retryDelayMs:1e3,maxRetryDelayMs:8e3}}},manifestLoadingTimeOut:1e4,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1e3,manifestLoadingMaxRetryTimeout:64e3,levelLoadingTimeOut:1e4,levelLoadingMaxRetry:4,levelLoadingRetryDelay:1e3,levelLoadingMaxRetryTimeout:64e3,fragLoadingTimeOut:2e4,fragLoadingMaxRetry:6,fragLoadingRetryDelay:1e3,fragLoadingMaxRetryTimeout:64e3},yd()),{},{subtitleStreamController:Or,subtitleTrackController:Mr,timelineController:Yr,audioStreamController:_r,audioTrackController:Pr,emeController:at,cmcdController:Qr,contentSteeringController:Jr});function yd(){return{cueHandler:md,enableWebVTT:!0,enableIMSC1:!0,enableCEA708Captions:!0,captionsTextTrack1Label:"English",captionsTextTrack1LanguageCode:"en",captionsTextTrack2Label:"Spanish",captionsTextTrack2LanguageCode:"es",captionsTextTrack3Label:"Unknown CC",captionsTextTrack3LanguageCode:"",captionsTextTrack4Label:"Unknown CC",captionsTextTrack4LanguageCode:"",renderTextTracksNatively:!0}}function Td(n,e){if((e.liveSyncDurationCount||e.liveMaxLatencyDurationCount)&&(e.liveSyncDuration||e.liveMaxLatencyDuration))throw new Error("Illegal hls.js config: don't mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration");if(e.liveMaxLatencyDurationCount!==void 0&&(e.liveSyncDurationCount===void 0||e.liveMaxLatencyDurationCount<=e.liveSyncDurationCount))throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be greater than "liveSyncDurationCount"');if(e.liveMaxLatencyDuration!==void 0&&(e.liveSyncDuration===void 0||e.liveMaxLatencyDuration<=e.liveSyncDuration))throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be greater than "liveSyncDuration"');let t=en(n),i=["manifest","level","frag"],s=["TimeOut","MaxRetry","RetryDelay","MaxRetryTimeout"];return i.forEach(r=>{let o=`${r==="level"?"playlist":r}LoadPolicy`,a=e[o]===void 0,l=[];s.forEach(c=>{let u=`${r}Loading${c}`,h=e[u];if(h!==void 0&&a){l.push(u);let d=t[o].default;switch(e[o]={default:d},c){case"TimeOut":d.maxLoadTimeMs=h,d.maxTimeToFirstByteMs=h;break;case"MaxRetry":d.errorRetry.maxNumRetry=h,d.timeoutRetry.maxNumRetry=h;break;case"RetryDelay":d.errorRetry.retryDelayMs=h,d.timeoutRetry.retryDelayMs=h;break;case"MaxRetryTimeout":d.errorRetry.maxRetryDelayMs=h,d.timeoutRetry.maxRetryDelayMs=h;break}}}),l.length&&L.warn(`hls.js config: "${l.join('", "')}" setting(s) are deprecated, use "${o}": ${JSON.stringify(e[o])}`)}),ye(ye({},t),e)}function en(n){return n&&typeof n=="object"?Array.isArray(n)?n.map(en):Object.keys(n).reduce((e,t)=>(e[t]=en(n[t]),e),{}):n}function xd(n){let e=n.loader;e!==hs&&e!==us?(L.log("[config]: Custom loader detected, cannot enable progressive streaming"),n.progressive=!1):ld()&&(n.loader=hs,n.progressive=!0,n.enableSoftwareAES=!0,L.log("[config]: Progressive streaming enabled, using FetchLoader"))}var Qs,tn=class extends ni{constructor(e,t){super(e,"[level-controller]"),this._levels=[],this._firstLevel=-1,this._maxAutoLevel=-1,this._startLevel=void 0,this.currentLevel=null,this.currentLevelIndex=-1,this.manualLevelIndex=-1,this.steering=void 0,this.onParsedComplete=void 0,this.steering=t,this._registerListeners()}_registerListeners(){let{hls:e}=this;e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_LOADED,this.onManifestLoaded,this),e.on(p.LEVEL_LOADED,this.onLevelLoaded,this),e.on(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.on(p.FRAG_BUFFERED,this.onFragBuffered,this),e.on(p.ERROR,this.onError,this)}_unregisterListeners(){let{hls:e}=this;e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_LOADED,this.onManifestLoaded,this),e.off(p.LEVEL_LOADED,this.onLevelLoaded,this),e.off(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.off(p.FRAG_BUFFERED,this.onFragBuffered,this),e.off(p.ERROR,this.onError,this)}destroy(){this._unregisterListeners(),this.steering=null,this.resetLevels(),super.destroy()}stopLoad(){this._levels.forEach(t=>{t.loadError=0,t.fragmentError=0}),super.stopLoad()}resetLevels(){this._startLevel=void 0,this.manualLevelIndex=-1,this.currentLevelIndex=-1,this.currentLevel=null,this._levels=[],this._maxAutoLevel=-1}onManifestLoading(e,t){this.resetLevels()}onManifestLoaded(e,t){let i=this.hls.config.preferManagedMediaSource,s=[],r={},o={},a=!1,l=!1,c=!1;t.levels.forEach(u=>{var h,d;let f=u.attrs,{audioCodec:g,videoCodec:m}=u;((h=g)==null?void 0:h.indexOf("mp4a.40.34"))!==-1&&(Qs||(Qs=/chrome|firefox/i.test(navigator.userAgent)),Qs&&(u.audioCodec=g=void 0)),g&&(u.audioCodec=g=Wi(g,i)),((d=m)==null?void 0:d.indexOf("avc1"))===0&&(m=u.videoCodec=Yc(m));let{width:y,height:T,unknownCodecs:v}=u;if(a||(a=!!(y&&T)),l||(l=!!m),c||(c=!!g),v!=null&&v.length||g&&!Ns(g,"audio",i)||m&&!Ns(m,"video",i))return;let{CODECS:E,"FRAME-RATE":S,"HDCP-LEVEL":x,"PATHWAY-ID":A,RESOLUTION:b,"VIDEO-RANGE":C}=f,D=`${`${A||"."}-`}${u.bitrate}-${b}-${S}-${E}-${C}-${x}`;if(r[D])if(r[D].uri!==u.url&&!u.attrs["PATHWAY-ID"]){let w=o[D]+=1;u.attrs["PATHWAY-ID"]=new Array(w+1).join(".");let B=new lt(u);r[D]=B,s.push(B)}else r[D].addGroupId("audio",f.AUDIO),r[D].addGroupId("text",f.SUBTITLES);else{let w=new lt(u);r[D]=w,o[D]=1,s.push(w)}}),this.filterAndSortMediaOptions(s,t,a,l,c)}filterAndSortMediaOptions(e,t,i,s,r){let o=[],a=[],l=e;if((i||s)&&r&&(l=l.filter(({videoCodec:g,videoRange:m,width:y,height:T})=>(!!g||!!(y&&T))&&iu(m))),l.length===0){Promise.resolve().then(()=>{if(this.hls){t.levels.length&&this.warn(`One or more CODECS in variant not supported: ${JSON.stringify(t.levels[0].attrs)}`);let g=new Error("no level with compatible codecs found in manifest");this.hls.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.MANIFEST_INCOMPATIBLE_CODECS_ERROR,fatal:!0,url:t.url,error:g,reason:g.message})}});return}if(t.audioTracks){let{preferManagedMediaSource:g}=this.hls.config;o=t.audioTracks.filter(m=>!m.audioCodec||Ns(m.audioCodec,"audio",g)),Jo(o)}t.subtitles&&(a=t.subtitles,Jo(a));let c=l.slice(0);l.sort((g,m)=>{if(g.attrs["HDCP-LEVEL"]!==m.attrs["HDCP-LEVEL"])return(g.attrs["HDCP-LEVEL"]||"")>(m.attrs["HDCP-LEVEL"]||"")?1:-1;if(i&&g.height!==m.height)return g.height-m.height;if(g.frameRate!==m.frameRate)return g.frameRate-m.frameRate;if(g.videoRange!==m.videoRange)return Yi.indexOf(g.videoRange)-Yi.indexOf(m.videoRange);if(g.videoCodec!==m.videoCodec){let y=fo(g.videoCodec),T=fo(m.videoCodec);if(y!==T)return T-y}if(g.uri===m.uri&&g.codecSet!==m.codecSet){let y=Ki(g.codecSet),T=Ki(m.codecSet);if(y!==T)return T-y}return g.averageBitrate!==m.averageBitrate?g.averageBitrate-m.averageBitrate:0});let u=c[0];if(this.steering&&(l=this.steering.filterParsedLevels(l),l.length!==c.length)){for(let g=0;g<c.length;g++)if(c[g].pathwayId===l[0].pathwayId){u=c[g];break}}this._levels=l;for(let g=0;g<l.length;g++)if(l[g]===u){var h;this._firstLevel=g;let m=u.bitrate,y=this.hls.bandwidthEstimate;if(this.log(`manifest loaded, ${l.length} level(s) found, first bitrate: ${m}`),((h=this.hls.userConfig)==null?void 0:h.abrEwmaDefaultEstimate)===void 0){let T=Math.min(m,this.hls.config.abrEwmaDefaultEstimateMax);T>y&&y===Ja.abrEwmaDefaultEstimate&&(this.hls.bandwidthEstimate=T)}break}let d=r&&!s,f={levels:l,audioTracks:o,subtitleTracks:a,sessionData:t.sessionData,sessionKeys:t.sessionKeys,firstLevel:this._firstLevel,stats:t.stats,audio:r,video:s,altAudio:!d&&o.some(g=>!!g.url)};this.hls.trigger(p.MANIFEST_PARSED,f),(this.hls.config.autoStartLoad||this.hls.forceStartLoad)&&this.hls.startLoad(this.hls.config.startPosition)}get levels(){return this._levels.length===0?null:this._levels}get level(){return this.currentLevelIndex}set level(e){let t=this._levels;if(t.length===0)return;if(e<0||e>=t.length){let u=new Error("invalid level idx"),h=e<0;if(this.hls.trigger(p.ERROR,{type:V.OTHER_ERROR,details:I.LEVEL_SWITCH_ERROR,level:e,fatal:h,error:u,reason:u.message}),h)return;e=Math.min(e,t.length-1)}let i=this.currentLevelIndex,s=this.currentLevel,r=s?s.attrs["PATHWAY-ID"]:void 0,o=t[e],a=o.attrs["PATHWAY-ID"];if(this.currentLevelIndex=e,this.currentLevel=o,i===e&&o.details&&s&&r===a)return;this.log(`Switching to level ${e} (${o.height?o.height+"p ":""}${o.videoRange?o.videoRange+" ":""}${o.codecSet?o.codecSet+" ":""}@${o.bitrate})${a?" with Pathway "+a:""} from level ${i}${r?" with Pathway "+r:""}`);let l={level:e,attrs:o.attrs,details:o.details,bitrate:o.bitrate,averageBitrate:o.averageBitrate,maxBitrate:o.maxBitrate,realBitrate:o.realBitrate,width:o.width,height:o.height,codecSet:o.codecSet,audioCodec:o.audioCodec,videoCodec:o.videoCodec,audioGroups:o.audioGroups,subtitleGroups:o.subtitleGroups,loaded:o.loaded,loadError:o.loadError,fragmentError:o.fragmentError,name:o.name,id:o.id,uri:o.uri,url:o.url,urlId:0,audioGroupIds:o.audioGroupIds,textGroupIds:o.textGroupIds};this.hls.trigger(p.LEVEL_SWITCHING,l);let c=o.details;if(!c||c.live){let u=this.switchParams(o.uri,s==null?void 0:s.details,c);this.loadPlaylist(u)}}get manualLevel(){return this.manualLevelIndex}set manualLevel(e){this.manualLevelIndex=e,this._startLevel===void 0&&(this._startLevel=e),e!==-1&&(this.level=e)}get firstLevel(){return this._firstLevel}set firstLevel(e){this._firstLevel=e}get startLevel(){if(this._startLevel===void 0){let e=this.hls.config.startLevel;return e!==void 0?e:this.hls.firstAutoLevel}return this._startLevel}set startLevel(e){this._startLevel=e}onError(e,t){t.fatal||!t.context||t.context.type===z.LEVEL&&t.context.level===this.level&&this.checkRetry(t)}onFragBuffered(e,{frag:t}){if(t!==void 0&&t.type===H.MAIN){let i=t.elementaryStreams;if(!Object.keys(i).some(r=>!!i[r]))return;let s=this._levels[t.level];s!=null&&s.loadError&&(this.log(`Resetting level error count of ${s.loadError} on frag buffered`),s.loadError=0)}}onLevelLoaded(e,t){var i;let{level:s,details:r}=t,o=this._levels[s];if(!o){var a;this.warn(`Invalid level index ${s}`),(a=t.deliveryDirectives)!=null&&a.skip&&(r.deltaUpdateFailed=!0);return}s===this.currentLevelIndex?(o.fragmentError===0&&(o.loadError=0),this.playlistLoaded(s,t,o.details)):(i=t.deliveryDirectives)!=null&&i.skip&&(r.deltaUpdateFailed=!0)}loadPlaylist(e){super.loadPlaylist();let t=this.currentLevelIndex,i=this.currentLevel;if(i&&this.shouldLoadPlaylist(i)){let s=i.uri;if(e)try{s=e.addDirectives(s)}catch(o){this.warn(`Could not construct new URL with HLS Delivery Directives: ${o}`)}let r=i.attrs["PATHWAY-ID"];this.log(`Loading level index ${t}${(e==null?void 0:e.msn)!==void 0?" at sn "+e.msn+" part "+e.part:""} with${r?" Pathway "+r:""} ${s}`),this.clearTimer(),this.hls.trigger(p.LEVEL_LOADING,{url:s,level:t,pathwayId:i.attrs["PATHWAY-ID"],id:0,deliveryDirectives:e||null})}}get nextLoadLevel(){return this.manualLevelIndex!==-1?this.manualLevelIndex:this.hls.nextAutoLevel}set nextLoadLevel(e){this.level=e,this.manualLevelIndex===-1&&(this.hls.nextAutoLevel=e)}removeLevel(e){var t;let i=this._levels.filter((s,r)=>r!==e?!0:(this.steering&&this.steering.removeLevel(s),s===this.currentLevel&&(this.currentLevel=null,this.currentLevelIndex=-1,s.details&&s.details.fragments.forEach(o=>o.level=-1)),!1));xa(i),this._levels=i,this.currentLevelIndex>-1&&(t=this.currentLevel)!=null&&t.details&&(this.currentLevelIndex=this.currentLevel.details.fragments[0].level),this.hls.trigger(p.LEVELS_UPDATED,{levels:i})}onLevelsUpdated(e,{levels:t}){this._levels=t}checkMaxAutoUpdated(){let{autoLevelCapping:e,maxAutoLevel:t,maxHdcpLevel:i}=this.hls;this._maxAutoLevel!==t&&(this._maxAutoLevel=t,this.hls.trigger(p.MAX_AUTO_LEVEL_UPDATED,{autoLevelCapping:e,levels:this.levels,maxAutoLevel:t,minAutoLevel:this.hls.minAutoLevel,maxHdcpLevel:i}))}};function Jo(n){let e={};n.forEach(t=>{let i=t.groupId||"";t.id=e[i]=e[i]||0,e[i]++})}var sn=class{constructor(e){this.config=void 0,this.keyUriToKeyInfo={},this.emeController=null,this.config=e}abort(e){for(let i in this.keyUriToKeyInfo){let s=this.keyUriToKeyInfo[i].loader;if(s){var t;if(e&&e!==((t=s.context)==null?void 0:t.frag.type))return;s.abort()}}}detach(){for(let e in this.keyUriToKeyInfo){let t=this.keyUriToKeyInfo[e];(t.mediaKeySessionContext||t.decryptdata.isCommonEncryption)&&delete this.keyUriToKeyInfo[e]}}destroy(){this.detach();for(let e in this.keyUriToKeyInfo){let t=this.keyUriToKeyInfo[e].loader;t&&t.destroy()}this.keyUriToKeyInfo={}}createKeyLoadError(e,t=I.KEY_LOAD_ERROR,i,s,r){return new Be({type:V.NETWORK_ERROR,details:t,fatal:!1,frag:e,response:r,error:i,networkDetails:s})}loadClear(e,t){if(this.emeController&&this.config.emeEnabled){let{sn:i,cc:s}=e;for(let r=0;r<t.length;r++){let o=t[r];if(s<=o.cc&&(i==="initSegment"||o.sn==="initSegment"||i<o.sn)){this.emeController.selectKeySystemFormat(o).then(a=>{o.setKeyFormat(a)});break}}}}load(e){return!e.decryptdata&&e.encrypted&&this.emeController?this.emeController.selectKeySystemFormat(e).then(t=>this.loadInternal(e,t)):this.loadInternal(e)}loadInternal(e,t){var i,s;t&&e.setKeyFormat(t);let r=e.decryptdata;if(!r){let c=new Error(t?`Expected frag.decryptdata to be defined after setting format ${t}`:"Missing decryption data on fragment in onKeyLoading");return Promise.reject(this.createKeyLoadError(e,I.KEY_LOAD_ERROR,c))}let o=r.uri;if(!o)return Promise.reject(this.createKeyLoadError(e,I.KEY_LOAD_ERROR,new Error(`Invalid key URI: "${o}"`)));let a=this.keyUriToKeyInfo[o];if((i=a)!=null&&i.decryptdata.key)return r.key=a.decryptdata.key,Promise.resolve({frag:e,keyInfo:a});if((s=a)!=null&&s.keyLoadPromise){var l;switch((l=a.mediaKeySessionContext)==null?void 0:l.keyStatus){case void 0:case"status-pending":case"usable":case"usable-in-future":return a.keyLoadPromise.then(c=>(r.key=c.keyInfo.decryptdata.key,{frag:e,keyInfo:a}))}}switch(a=this.keyUriToKeyInfo[o]={decryptdata:r,keyLoadPromise:null,loader:null,mediaKeySessionContext:null},r.method){case"ISO-23001-7":case"SAMPLE-AES":case"SAMPLE-AES-CENC":case"SAMPLE-AES-CTR":return r.keyFormat==="identity"?this.loadKeyHTTP(a,e):this.loadKeyEME(a,e);case"AES-128":return this.loadKeyHTTP(a,e);default:return Promise.reject(this.createKeyLoadError(e,I.KEY_LOAD_ERROR,new Error(`Key supplied with unsupported METHOD: "${r.method}"`)))}}loadKeyEME(e,t){let i={frag:t,keyInfo:e};if(this.emeController&&this.config.emeEnabled){let s=this.emeController.loadKey(i);if(s)return(e.keyLoadPromise=s.then(r=>(e.mediaKeySessionContext=r,i))).catch(r=>{throw e.keyLoadPromise=null,r})}return Promise.resolve(i)}loadKeyHTTP(e,t){let i=this.config,s=i.loader,r=new s(i);return t.keyLoader=e.loader=r,e.keyLoadPromise=new Promise((o,a)=>{let l={keyInfo:e,frag:t,responseType:"arraybuffer",url:e.decryptdata.uri},c=i.keyLoadPolicy.default,u={loadPolicy:c,timeout:c.maxLoadTimeMs,maxRetry:0,retryDelay:0,maxRetryDelay:0},h={onSuccess:(d,f,g,m)=>{let{frag:y,keyInfo:T,url:v}=g;if(!y.decryptdata||T!==this.keyUriToKeyInfo[v])return a(this.createKeyLoadError(y,I.KEY_LOAD_ERROR,new Error("after key load, decryptdata unset or changed"),m));T.decryptdata.key=y.decryptdata.key=new Uint8Array(d.data),y.keyLoader=null,T.loader=null,o({frag:y,keyInfo:T})},onError:(d,f,g,m)=>{this.resetLoader(f),a(this.createKeyLoadError(t,I.KEY_LOAD_ERROR,new Error(`HTTP Error ${d.code} loading key ${d.text}`),g,ye({url:l.url,data:void 0},d)))},onTimeout:(d,f,g)=>{this.resetLoader(f),a(this.createKeyLoadError(t,I.KEY_LOAD_TIMEOUT,new Error("key loading timed out"),g))},onAbort:(d,f,g)=>{this.resetLoader(f),a(this.createKeyLoadError(t,I.INTERNAL_ABORTED,new Error("key loading aborted"),g))}};r.load(l,u,h)})}resetLoader(e){let{frag:t,keyInfo:i,url:s}=e,r=i.loader;t.keyLoader===r&&(t.keyLoader=null,i.loader=null),delete this.keyUriToKeyInfo[s],r&&r.destroy()}};function Za(){return self.SourceBuffer||self.WebKitSourceBuffer}function el(){if(!Rt())return!1;let e=Za();return!e||e.prototype&&typeof e.prototype.appendBuffer=="function"&&typeof e.prototype.remove=="function"}function Ed(){if(!el())return!1;let n=Rt();return typeof(n==null?void 0:n.isTypeSupported)=="function"&&(["avc1.42E01E,mp4a.40.2","av01.0.01M.08","vp09.00.50.08"].some(e=>n.isTypeSupported(ri(e,"video")))||["mp4a.40.2","fLaC"].some(e=>n.isTypeSupported(ri(e,"audio"))))}function vd(){var n;let e=Za();return typeof(e==null||(n=e.prototype)==null?void 0:n.changeType)=="function"}var Sd=250,Ui=2,Ad=.1,Ld=.05,rn=class{constructor(e,t,i,s){this.config=void 0,this.media=null,this.fragmentTracker=void 0,this.hls=void 0,this.nudgeRetry=0,this.stallReported=!1,this.stalled=null,this.moved=!1,this.seeking=!1,this.config=e,this.media=t,this.fragmentTracker=i,this.hls=s}destroy(){this.media=null,this.hls=this.fragmentTracker=null}poll(e,t){let{config:i,media:s,stalled:r}=this;if(s===null)return;let{currentTime:o,seeking:a}=s,l=this.seeking&&!a,c=!this.seeking&&a;if(this.seeking=a,o!==e){if(this.moved=!0,a||(this.nudgeRetry=0),r!==null){if(this.stallReported){let y=self.performance.now()-r;L.warn(`playback not stuck anymore @${o}, after ${Math.round(y)}ms`),this.stallReported=!1}this.stalled=null}return}if(c||l){this.stalled=null;return}if(s.paused&&!a||s.ended||s.playbackRate===0||!J.getBuffered(s).length){this.nudgeRetry=0;return}let u=J.bufferInfo(s,o,0),h=u.nextStart||0;if(a){let y=u.len>Ui,T=!h||t&&t.start<=o||h-o>Ui&&!this.fragmentTracker.getPartialFragment(o);if(y||T)return;this.moved=!1}if(!this.moved&&this.stalled!==null){var d;if(!(u.len>0)&&!h)return;let T=Math.max(h,u.start||0)-o,v=this.hls.levels?this.hls.levels[this.hls.currentLevel]:null,S=(v==null||(d=v.details)==null?void 0:d.live)?v.details.targetduration*2:Ui,x=this.fragmentTracker.getPartialFragment(o);if(T>0&&(T<=S||x)){s.paused||this._trySkipBufferHole(x);return}}let f=self.performance.now();if(r===null){this.stalled=f;return}let g=f-r;if(!a&&g>=Sd&&(this._reportStall(u),!this.media))return;let m=J.bufferInfo(s,o,i.maxBufferHole);this._tryFixBufferStall(m,g)}_tryFixBufferStall(e,t){let{config:i,fragmentTracker:s,media:r}=this;if(r===null)return;let o=r.currentTime,a=s.getPartialFragment(o);a&&(this._trySkipBufferHole(a)||!this.media)||(e.len>i.maxBufferHole||e.nextStart&&e.nextStart-o<i.maxBufferHole)&&t>i.highBufferWatchdogPeriod*1e3&&(L.warn("Trying to nudge playhead over buffer-hole"),this.stalled=null,this._tryNudgeBuffer())}_reportStall(e){let{hls:t,media:i,stallReported:s}=this;if(!s&&i){this.stallReported=!0;let r=new Error(`Playback stalling at @${i.currentTime} due to low buffer (${JSON.stringify(e)})`);L.warn(r.message),t.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_STALLED_ERROR,fatal:!1,error:r,buffer:e.len})}}_trySkipBufferHole(e){let{config:t,hls:i,media:s}=this;if(s===null)return 0;let r=s.currentTime,o=J.bufferInfo(s,r,0),a=r<o.start?o.start:o.nextStart;if(a){let l=o.len<=t.maxBufferHole,c=o.len>0&&o.len<1&&s.readyState<3,u=a-r;if(u>0&&(l||c)){if(u>t.maxBufferHole){let{fragmentTracker:d}=this,f=!1;if(r===0){let g=d.getAppendedFrag(0,H.MAIN);g&&a<g.end&&(f=!0)}if(!f){let g=e||d.getAppendedFrag(r,H.MAIN);if(g){let m=!1,y=g.end;for(;y<a;){let T=d.getPartialFragment(y);if(T)y+=T.duration;else{m=!0;break}}if(m)return 0}}}let h=Math.max(a+Ld,r+Ad);if(L.warn(`skipping hole, adjusting currentTime from ${r} to ${h}`),this.moved=!0,this.stalled=null,s.currentTime=h,e&&!e.gap){let d=new Error(`fragment loaded with buffer holes, seeking from ${r} to ${h}`);i.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_SEEK_OVER_HOLE,fatal:!1,error:d,reason:d.message,frag:e})}return h}}return 0}_tryNudgeBuffer(){let{config:e,hls:t,media:i,nudgeRetry:s}=this;if(i===null)return;let r=i.currentTime;if(this.nudgeRetry++,s<e.nudgeMaxRetry){let o=r+(s+1)*e.nudgeOffset,a=new Error(`Nudging 'currentTime' from ${r} to ${o}`);L.warn(a.message),i.currentTime=o,t.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_NUDGE_ON_STALL,error:a,fatal:!1})}else{let o=new Error(`Playhead still not moving while enough data buffered @${r} after ${e.nudgeMaxRetry} nudges`);L.error(o.message),t.trigger(p.ERROR,{type:V.MEDIA_ERROR,details:I.BUFFER_STALLED_ERROR,error:o,fatal:!0})}}},bd=100,nn=class extends li{constructor(e,t,i){super(e,t,i,"[stream-controller]",H.MAIN),this.audioCodecSwap=!1,this.gapController=null,this.level=-1,this._forceStartLoad=!1,this.altAudio=!1,this.audioOnly=!1,this.fragPlaying=null,this.onvplaying=null,this.onvseeked=null,this.fragLastKbps=0,this.couldBacktrack=!1,this.backtrackFragment=null,this.audioCodecSwitch=!1,this.videoBuffer=null,this._registerListeners()}_registerListeners(){let{hls:e}=this;e.on(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.on(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.on(p.MANIFEST_LOADING,this.onManifestLoading,this),e.on(p.MANIFEST_PARSED,this.onManifestParsed,this),e.on(p.LEVEL_LOADING,this.onLevelLoading,this),e.on(p.LEVEL_LOADED,this.onLevelLoaded,this),e.on(p.FRAG_LOAD_EMERGENCY_ABORTED,this.onFragLoadEmergencyAborted,this),e.on(p.ERROR,this.onError,this),e.on(p.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this),e.on(p.AUDIO_TRACK_SWITCHED,this.onAudioTrackSwitched,this),e.on(p.BUFFER_CREATED,this.onBufferCreated,this),e.on(p.BUFFER_FLUSHED,this.onBufferFlushed,this),e.on(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.on(p.FRAG_BUFFERED,this.onFragBuffered,this)}_unregisterListeners(){let{hls:e}=this;e.off(p.MEDIA_ATTACHED,this.onMediaAttached,this),e.off(p.MEDIA_DETACHING,this.onMediaDetaching,this),e.off(p.MANIFEST_LOADING,this.onManifestLoading,this),e.off(p.MANIFEST_PARSED,this.onManifestParsed,this),e.off(p.LEVEL_LOADED,this.onLevelLoaded,this),e.off(p.FRAG_LOAD_EMERGENCY_ABORTED,this.onFragLoadEmergencyAborted,this),e.off(p.ERROR,this.onError,this),e.off(p.AUDIO_TRACK_SWITCHING,this.onAudioTrackSwitching,this),e.off(p.AUDIO_TRACK_SWITCHED,this.onAudioTrackSwitched,this),e.off(p.BUFFER_CREATED,this.onBufferCreated,this),e.off(p.BUFFER_FLUSHED,this.onBufferFlushed,this),e.off(p.LEVELS_UPDATED,this.onLevelsUpdated,this),e.off(p.FRAG_BUFFERED,this.onFragBuffered,this)}onHandlerDestroying(){this._unregisterListeners(),super.onHandlerDestroying()}startLoad(e){if(this.levels){let{lastCurrentTime:t,hls:i}=this;if(this.stopLoad(),this.setInterval(bd),this.level=-1,!this.startFragRequested){let s=i.startLevel;s===-1&&(i.config.testBandwidth&&this.levels.length>1?(s=0,this.bitrateTest=!0):s=i.firstAutoLevel),i.nextLoadLevel=s,this.level=i.loadLevel,this.loadedmetadata=!1}t>0&&e===-1&&(this.log(`Override startPosition with lastCurrentTime @${t.toFixed(3)}`),e=t),this.state=k.IDLE,this.nextLoadPosition=this.startPosition=this.lastCurrentTime=e,this.tick()}else this._forceStartLoad=!0,this.state=k.STOPPED}stopLoad(){this._forceStartLoad=!1,super.stopLoad()}doTick(){switch(this.state){case k.WAITING_LEVEL:{let{levels:t,level:i}=this,s=t==null?void 0:t[i],r=s==null?void 0:s.details;if(r&&(!r.live||this.levelLastLoaded===s)){if(this.waitForCdnTuneIn(r))break;this.state=k.IDLE;break}else if(this.hls.nextLoadLevel!==this.level){this.state=k.IDLE;break}break}case k.FRAG_LOADING_WAITING_RETRY:{var e;let t=self.performance.now(),i=this.retryDate;if(!i||t>=i||(e=this.media)!=null&&e.seeking){let{levels:s,level:r}=this,o=s==null?void 0:s[r];this.resetStartWhenNotLoaded(o||null),this.state=k.IDLE}}break}this.state===k.IDLE&&this.doTickIdle(),this.onTickEnd()}onTickEnd(){super.onTickEnd(),this.checkBuffer(),this.checkFragmentChanged()}doTickIdle(){let{hls:e,levelLastLoaded:t,levels:i,media:s}=this;if(t===null||!s&&(this.startFragRequested||!e.config.startFragPrefetch)||this.altAudio&&this.audioOnly)return;let r=e.nextLoadLevel;if(!(i!=null&&i[r]))return;let o=i[r],a=this.getMainFwdBufferInfo();if(a===null)return;let l=this.getLevelDetails();if(l&&this._streamEnded(a,l)){let m={};this.altAudio&&(m.type="video"),this.hls.trigger(p.BUFFER_EOS,m),this.state=k.ENDED;return}e.loadLevel!==r&&e.manualLevel===-1&&this.log(`Adapting to level ${r} from level ${this.level}`),this.level=e.nextLoadLevel=r;let c=o.details;if(!c||this.state===k.WAITING_LEVEL||c.live&&this.levelLastLoaded!==o){this.level=r,this.state=k.WAITING_LEVEL;return}let u=a.len,h=this.getMaxBufferLength(o.maxBitrate);if(u>=h)return;this.backtrackFragment&&this.backtrackFragment.start>a.end&&(this.backtrackFragment=null);let d=this.backtrackFragment?this.backtrackFragment.start:a.end,f=this.getNextFragment(d,c);if(this.couldBacktrack&&!this.fragPrevious&&f&&f.sn!=="initSegment"&&this.fragmentTracker.getState(f)!==pe.OK){var g;let y=((g=this.backtrackFragment)!=null?g:f).sn-c.startSN,T=c.fragments[y-1];T&&f.cc===T.cc&&(f=T,this.fragmentTracker.removeFragment(T))}else this.backtrackFragment&&a.len&&(this.backtrackFragment=null);if(f&&this.isLoopLoading(f,d)){if(!f.gap){let y=this.audioOnly&&!this.altAudio?Q.AUDIO:Q.VIDEO,T=(y===Q.VIDEO?this.videoBuffer:this.mediaBuffer)||this.media;T&&this.afterBufferFlushed(T,y,H.MAIN)}f=this.getNextFragmentLoopLoading(f,c,a,H.MAIN,h)}f&&(f.initSegment&&!f.initSegment.data&&!this.bitrateTest&&(f=f.initSegment),this.loadFragment(f,o,d))}loadFragment(e,t,i){let s=this.fragmentTracker.getState(e);this.fragCurrent=e,s===pe.NOT_LOADED||s===pe.PARTIAL?e.sn==="initSegment"?this._loadInitSegment(e,t):this.bitrateTest?(this.log(`Fragment ${e.sn} of level ${e.level} is being downloaded to test bitrate and will not be buffered`),this._loadBitrateTestFrag(e,t)):(this.startFragRequested=!0,super.loadFragment(e,t,i)):this.clearTrackerIfNeeded(e)}getBufferedFrag(e){return this.fragmentTracker.getBufferedFrag(e,H.MAIN)}followingBufferedFrag(e){return e?this.getBufferedFrag(e.end+.5):null}immediateLevelSwitch(){this.abortCurrentFrag(),this.flushMainBuffer(0,Number.POSITIVE_INFINITY)}nextLevelSwitch(){let{levels:e,media:t}=this;if(t!=null&&t.readyState){let i,s=this.getAppendedFrag(t.currentTime);s&&s.start>1&&this.flushMainBuffer(0,s.start-1);let r=this.getLevelDetails();if(r!=null&&r.live){let a=this.getMainFwdBufferInfo();if(!a||a.len<r.targetduration*2)return}if(!t.paused&&e){let a=this.hls.nextLoadLevel,l=e[a],c=this.fragLastKbps;c&&this.fragCurrent?i=this.fragCurrent.duration*l.maxBitrate/(1e3*c)+1:i=0}else i=0;let o=this.getBufferedFrag(t.currentTime+i);if(o){let a=this.followingBufferedFrag(o);if(a){this.abortCurrentFrag();let l=a.maxStartPTS?a.maxStartPTS:a.start,c=a.duration,u=Math.max(o.end,l+Math.min(Math.max(c-this.config.maxFragLookUpTolerance,c*(this.couldBacktrack?.5:.125)),c*(this.couldBacktrack?.75:.25)));this.flushMainBuffer(u,Number.POSITIVE_INFINITY)}}}}abortCurrentFrag(){let e=this.fragCurrent;switch(this.fragCurrent=null,this.backtrackFragment=null,e&&(e.abortRequests(),this.fragmentTracker.removeFragment(e)),this.state){case k.KEY_LOADING:case k.FRAG_LOADING:case k.FRAG_LOADING_WAITING_RETRY:case k.PARSING:case k.PARSED:this.state=k.IDLE;break}this.nextLoadPosition=this.getLoadPosition()}flushMainBuffer(e,t){super.flushMainBuffer(e,t,this.altAudio?"video":null)}onMediaAttached(e,t){super.onMediaAttached(e,t);let i=t.media;this.onvplaying=this.onMediaPlaying.bind(this),this.onvseeked=this.onMediaSeeked.bind(this),i.addEventListener("playing",this.onvplaying),i.addEventListener("seeked",this.onvseeked),this.gapController=new rn(this.config,i,this.fragmentTracker,this.hls)}onMediaDetaching(){let{media:e}=this;e&&this.onvplaying&&this.onvseeked&&(e.removeEventListener("playing",this.onvplaying),e.removeEventListener("seeked",this.onvseeked),this.onvplaying=this.onvseeked=null,this.videoBuffer=null),this.fragPlaying=null,this.gapController&&(this.gapController.destroy(),this.gapController=null),super.onMediaDetaching()}onMediaPlaying(){this.tick()}onMediaSeeked(){let e=this.media,t=e?e.currentTime:null;M(t)&&this.log(`Media seeked to ${t.toFixed(3)}`);let i=this.getMainFwdBufferInfo();if(i===null||i.len===0){this.warn(`Main forward buffer length on "seeked" event ${i?i.len:"empty"})`);return}this.tick()}onManifestLoading(){this.log("Trigger BUFFER_RESET"),this.hls.trigger(p.BUFFER_RESET,void 0),this.fragmentTracker.removeAllFragments(),this.couldBacktrack=!1,this.startPosition=this.lastCurrentTime=this.fragLastKbps=0,this.levels=this.fragPlaying=this.backtrackFragment=this.levelLastLoaded=null,this.altAudio=this.audioOnly=this.startFragRequested=!1}onManifestParsed(e,t){let i=!1,s=!1;t.levels.forEach(r=>{let o=r.audioCodec;o&&(i=i||o.indexOf("mp4a.40.2")!==-1,s=s||o.indexOf("mp4a.40.5")!==-1)}),this.audioCodecSwitch=i&&s&&!vd(),this.audioCodecSwitch&&this.log("Both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC"),this.levels=t.levels,this.startFragRequested=!1}onLevelLoading(e,t){let{levels:i}=this;if(!i||this.state!==k.IDLE)return;let s=i[t.level];(!s.details||s.details.live&&this.levelLastLoaded!==s||this.waitForCdnTuneIn(s.details))&&(this.state=k.WAITING_LEVEL)}onLevelLoaded(e,t){var i;let{levels:s}=this,r=t.level,o=t.details,a=o.totalduration;if(!s){this.warn(`Levels were reset while loading level ${r}`);return}this.log(`Level ${r} loaded [${o.startSN},${o.endSN}]${o.lastPartSn?`[part-${o.lastPartSn}-${o.lastPartIndex}]`:""}, cc [${o.startCC}, ${o.endCC}] duration:${a}`);let l=s[r],c=this.fragCurrent;c&&(this.state===k.FRAG_LOADING||this.state===k.FRAG_LOADING_WAITING_RETRY)&&c.level!==t.level&&c.loader&&this.abortCurrentFrag();let u=0;if(o.live||(i=l.details)!=null&&i.live){var h;if(this.checkLiveUpdate(o),o.deltaUpdateFailed)return;u=this.alignPlaylists(o,l.details,(h=this.levelLastLoaded)==null?void 0:h.details)}if(l.details=o,this.levelLastLoaded=l,this.hls.trigger(p.LEVEL_UPDATED,{details:o,level:r}),this.state===k.WAITING_LEVEL){if(this.waitForCdnTuneIn(o))return;this.state=k.IDLE}this.startFragRequested?o.live&&this.synchronizeToLiveEdge(o):this.setStartPosition(o,u),this.tick()}_handleFragmentLoadProgress(e){var t;let{frag:i,part:s,payload:r}=e,{levels:o}=this;if(!o){this.warn(`Levels were reset while fragment load was in progress. Fragment ${i.sn} of level ${i.level} will not be buffered`);return}let a=o[i.level],l=a.details;if(!l){this.warn(`Dropping fragment ${i.sn} of level ${i.level} after level details were reset`),this.fragmentTracker.removeFragment(i);return}let c=a.videoCodec,u=l.PTSKnown||!l.live,h=(t=i.initSegment)==null?void 0:t.data,d=this._getAudioCodec(a),f=this.transmuxer=this.transmuxer||new ns(this.hls,H.MAIN,this._handleTransmuxComplete.bind(this),this._handleTransmuxerFlush.bind(this)),g=s?s.index:-1,m=g!==-1,y=new oi(i.level,i.sn,i.stats.chunkCount,r.byteLength,g,m),T=this.initPTS[i.cc];f.push(r,h,d,c,i,s,l.totalduration,u,y,T)}onAudioTrackSwitching(e,t){let i=this.altAudio;if(!!!t.url){if(this.mediaBuffer!==this.media){this.log("Switching on main audio, use media.buffered to schedule main fragment loading"),this.mediaBuffer=this.media;let o=this.fragCurrent;o&&(this.log("Switching to main audio track, cancel main fragment load"),o.abortRequests(),this.fragmentTracker.removeFragment(o)),this.resetTransmuxer(),this.resetLoadingState()}else this.audioOnly&&this.resetTransmuxer();let r=this.hls;i&&(r.trigger(p.BUFFER_FLUSHING,{startOffset:0,endOffset:Number.POSITIVE_INFINITY,type:null}),this.fragmentTracker.removeAllFragments()),r.trigger(p.AUDIO_TRACK_SWITCHED,t)}}onAudioTrackSwitched(e,t){let i=t.id,s=!!this.hls.audioTracks[i].url;if(s){let r=this.videoBuffer;r&&this.mediaBuffer!==r&&(this.log("Switching on alternate audio, use video.buffered to schedule main fragment loading"),this.mediaBuffer=r)}this.altAudio=s,this.tick()}onBufferCreated(e,t){let i=t.tracks,s,r,o=!1;for(let a in i){let l=i[a];if(l.id==="main"){if(r=a,s=l,a==="video"){let c=i[a];c&&(this.videoBuffer=c.buffer)}}else o=!0}o&&s?(this.log(`Alternate track found, use ${r}.buffered to schedule main fragment loading`),this.mediaBuffer=s.buffer):this.mediaBuffer=this.media}onFragBuffered(e,t){let{frag:i,part:s}=t;if(i&&i.type!==H.MAIN)return;if(this.fragContextChanged(i)){this.warn(`Fragment ${i.sn}${s?" p: "+s.index:""} of level ${i.level} finished buffering, but was aborted. state: ${this.state}`),this.state===k.PARSED&&(this.state=k.IDLE);return}let r=s?s.stats:i.stats;this.fragLastKbps=Math.round(8*r.total/(r.buffering.end-r.loading.first)),i.sn!=="initSegment"&&(this.fragPrevious=i),this.fragBufferedComplete(i,s)}onError(e,t){var i;if(t.fatal){this.state=k.ERROR;return}switch(t.details){case I.FRAG_GAP:case I.FRAG_PARSING_ERROR:case I.FRAG_DECRYPT_ERROR:case I.FRAG_LOAD_ERROR:case I.FRAG_LOAD_TIMEOUT:case I.KEY_LOAD_ERROR:case I.KEY_LOAD_TIMEOUT:this.onFragmentOrKeyLoadError(H.MAIN,t);break;case I.LEVEL_LOAD_ERROR:case I.LEVEL_LOAD_TIMEOUT:case I.LEVEL_PARSING_ERROR:!t.levelRetry&&this.state===k.WAITING_LEVEL&&((i=t.context)==null?void 0:i.type)===z.LEVEL&&(this.state=k.IDLE);break;case I.BUFFER_APPEND_ERROR:case I.BUFFER_FULL_ERROR:if(!t.parent||t.parent!=="main")return;if(t.details===I.BUFFER_APPEND_ERROR){this.resetLoadingState();return}this.reduceLengthAndFlushBuffer(t)&&this.flushMainBuffer(0,Number.POSITIVE_INFINITY);break;case I.INTERNAL_EXCEPTION:this.recoverWorkerError(t);break}}checkBuffer(){let{media:e,gapController:t}=this;if(!(!e||!t||!e.readyState)){if(this.loadedmetadata||!J.getBuffered(e).length){let i=this.state!==k.IDLE?this.fragCurrent:null;t.poll(this.lastCurrentTime,i)}this.lastCurrentTime=e.currentTime}}onFragLoadEmergencyAborted(){this.state=k.IDLE,this.loadedmetadata||(this.startFragRequested=!1,this.nextLoadPosition=this.startPosition),this.tickImmediate()}onBufferFlushed(e,{type:t}){if(t!==Q.AUDIO||this.audioOnly&&!this.altAudio){let i=(t===Q.VIDEO?this.videoBuffer:this.mediaBuffer)||this.media;this.afterBufferFlushed(i,t,H.MAIN),this.tick()}}onLevelsUpdated(e,t){this.level>-1&&this.fragCurrent&&(this.level=this.fragCurrent.level),this.levels=t.levels}swapAudioCodec(){this.audioCodecSwap=!this.audioCodecSwap}seekToStartPos(){let{media:e}=this;if(!e)return;let t=e.currentTime,i=this.startPosition;if(i>=0&&t<i){if(e.seeking){this.log(`could not seek to ${i}, already seeking at ${t}`);return}let s=J.getBuffered(e),o=(s.length?s.start(0):0)-i;o>0&&(o<this.config.maxBufferHole||o<this.config.maxFragLookUpTolerance)&&(this.log(`adjusting start position by ${o} to match buffer start`),i+=o,this.startPosition=i),this.log(`seek to target start position ${i} from current time ${t}`),e.currentTime=i}}_getAudioCodec(e){let t=this.config.defaultAudioCodec||e.audioCodec;return this.audioCodecSwap&&t&&(this.log("Swapping audio codec"),t.indexOf("mp4a.40.5")!==-1?t="mp4a.40.2":t="mp4a.40.5"),t}_loadBitrateTestFrag(e,t){e.bitrateTest=!0,this._doFragLoad(e,t).then(i=>{let{hls:s}=this;if(!i||this.fragContextChanged(e))return;t.fragmentError=0,this.state=k.IDLE,this.startFragRequested=!1,this.bitrateTest=!1;let r=e.stats;r.parsing.start=r.parsing.end=r.buffering.start=r.buffering.end=self.performance.now(),s.trigger(p.FRAG_LOADED,i),e.bitrateTest=!1})}_handleTransmuxComplete(e){var t;let i="main",{hls:s}=this,{remuxResult:r,chunkMeta:o}=e,a=this.getCurrentContext(o);if(!a){this.resetWhenMissingContext(o);return}let{frag:l,part:c,level:u}=a,{video:h,text:d,id3:f,initSegment:g}=r,{details:m}=u,y=this.altAudio?void 0:r.audio;if(this.fragContextChanged(l)){this.fragmentTracker.removeFragment(l);return}if(this.state=k.PARSING,g){if(g!=null&&g.tracks){let E=l.initSegment||l;this._bufferInitSegment(u,g.tracks,E,o),s.trigger(p.FRAG_PARSING_INIT_SEGMENT,{frag:E,id:i,tracks:g.tracks})}let T=g.initPTS,v=g.timescale;M(T)&&(this.initPTS[l.cc]={baseTime:T,timescale:v},s.trigger(p.INIT_PTS_FOUND,{frag:l,id:i,initPTS:T,timescale:v}))}if(h&&m&&l.sn!=="initSegment"){let T=m.fragments[l.sn-1-m.startSN],v=l.sn===m.startSN,E=!T||l.cc>T.cc;if(r.independent!==!1){let{startPTS:S,endPTS:x,startDTS:A,endDTS:b}=h;if(c)c.elementaryStreams[h.type]={startPTS:S,endPTS:x,startDTS:A,endDTS:b};else if(h.firstKeyFrame&&h.independent&&o.id===1&&!E&&(this.couldBacktrack=!0),h.dropped&&h.independent){let C=this.getMainFwdBufferInfo(),_=(C?C.end:this.getLoadPosition())+this.config.maxBufferHole,D=h.firstKeyFramePTS?h.firstKeyFramePTS:S;if(!v&&_<D-this.config.maxBufferHole&&!E){this.backtrack(l);return}else E&&(l.gap=!0);l.setElementaryStreamInfo(h.type,l.start,x,l.start,b,!0)}else v&&S>Ui&&(l.gap=!0);l.setElementaryStreamInfo(h.type,S,x,A,b),this.backtrackFragment&&(this.backtrackFragment=l),this.bufferFragmentData(h,l,c,o,v||E)}else if(v||E)l.gap=!0;else{this.backtrack(l);return}}if(y){let{startPTS:T,endPTS:v,startDTS:E,endDTS:S}=y;c&&(c.elementaryStreams[Q.AUDIO]={startPTS:T,endPTS:v,startDTS:E,endDTS:S}),l.setElementaryStreamInfo(Q.AUDIO,T,v,E,S),this.bufferFragmentData(y,l,c,o)}if(m&&f!=null&&(t=f.samples)!=null&&t.length){let T={id:i,frag:l,details:m,samples:f.samples};s.trigger(p.FRAG_PARSING_METADATA,T)}if(m&&d){let T={id:i,frag:l,details:m,samples:d.samples};s.trigger(p.FRAG_PARSING_USERDATA,T)}}_bufferInitSegment(e,t,i,s){if(this.state!==k.PARSING)return;this.audioOnly=!!t.audio&&!t.video,this.altAudio&&!this.audioOnly&&delete t.audio;let{audio:r,video:o,audiovideo:a}=t;if(r){let l=e.audioCodec,c=navigator.userAgent.toLowerCase();if(this.audioCodecSwitch){l&&(l.indexOf("mp4a.40.5")!==-1?l="mp4a.40.2":l="mp4a.40.5");let u=r.metadata;u&&"channelCount"in u&&(u.channelCount||1)!==1&&c.indexOf("firefox")===-1&&(l="mp4a.40.5")}l&&l.indexOf("mp4a.40.5")!==-1&&c.indexOf("android")!==-1&&r.container!=="audio/mpeg"&&(l="mp4a.40.2",this.log(`Android: force audio codec to ${l}`)),e.audioCodec&&e.audioCodec!==l&&this.log(`Swapping manifest audio codec "${e.audioCodec}" for "${l}"`),r.levelCodec=l,r.id="main",this.log(`Init audio buffer, container:${r.container}, codecs[selected/level/parsed]=[${l||""}/${e.audioCodec||""}/${r.codec}]`)}o&&(o.levelCodec=e.videoCodec,o.id="main",this.log(`Init video buffer, container:${o.container}, codecs[level/parsed]=[${e.videoCodec||""}/${o.codec}]`)),a&&this.log(`Init audiovideo buffer, container:${a.container}, codecs[level/parsed]=[${e.codecs}/${a.codec}]`),this.hls.trigger(p.BUFFER_CODECS,t),Object.keys(t).forEach(l=>{let u=t[l].initSegment;u!=null&&u.byteLength&&this.hls.trigger(p.BUFFER_APPENDING,{type:l,data:u,frag:i,part:null,chunkMeta:s,parent:i.type})}),this.tickImmediate()}getMainFwdBufferInfo(){return this.getFwdBufferInfo(this.mediaBuffer?this.mediaBuffer:this.media,H.MAIN)}backtrack(e){this.couldBacktrack=!0,this.backtrackFragment=e,this.resetTransmuxer(),this.flushBufferGap(e),this.fragmentTracker.removeFragment(e),this.fragPrevious=null,this.nextLoadPosition=e.start,this.state=k.IDLE}checkFragmentChanged(){let e=this.media,t=null;if(e&&e.readyState>1&&e.seeking===!1){let i=e.currentTime;if(J.isBuffered(e,i)?t=this.getAppendedFrag(i):J.isBuffered(e,i+.1)&&(t=this.getAppendedFrag(i+.1)),t){this.backtrackFragment=null;let s=this.fragPlaying,r=t.level;(!s||t.sn!==s.sn||s.level!==r)&&(this.fragPlaying=t,this.hls.trigger(p.FRAG_CHANGED,{frag:t}),(!s||s.level!==r)&&this.hls.trigger(p.LEVEL_SWITCHED,{level:r}))}}}get nextLevel(){let e=this.nextBufferedFrag;return e?e.level:-1}get currentFrag(){let e=this.media;return e?this.fragPlaying||this.getAppendedFrag(e.currentTime):null}get currentProgramDateTime(){let e=this.media;if(e){let t=e.currentTime,i=this.currentFrag;if(i&&M(t)&&M(i.programDateTime)){let s=i.programDateTime+(t-i.start)*1e3;return new Date(s)}}return null}get currentLevel(){let e=this.currentFrag;return e?e.level:-1}get nextBufferedFrag(){let e=this.currentFrag;return e?this.followingBufferedFrag(e):null}get forceStartLoad(){return this._forceStartLoad}},$e=class{static get version(){return"1.5.13"}static isMSESupported(){return el()}static isSupported(){return Ed()}static getMediaSource(){return Rt()}static get Events(){return p}static get ErrorTypes(){return V}static get ErrorDetails(){return I}static get DefaultConfig(){return $e.defaultConfig?$e.defaultConfig:Ja}static set DefaultConfig(e){$e.defaultConfig=e}constructor(e={}){this.config=void 0,this.userConfig=void 0,this.coreComponents=void 0,this.networkControllers=void 0,this.started=!1,this._emitter=new gn,this._autoLevelCapping=-1,this._maxHdcpLevel=null,this.abrController=void 0,this.bufferController=void 0,this.capLevelController=void 0,this.latencyController=void 0,this.levelController=void 0,this.streamController=void 0,this.audioTrackController=void 0,this.subtitleTrackController=void 0,this.emeController=void 0,this.cmcdController=void 0,this._media=null,this.url=null,this.triggeringException=void 0,nc(e.debug||!1,"Hls instance");let t=this.config=Td($e.DefaultConfig,e);this.userConfig=e,t.progressive&&xd(t);let{abrController:i,bufferController:s,capLevelController:r,errorController:o,fpsController:a}=t,l=new o(this),c=this.abrController=new i(this),u=this.bufferController=new s(this),h=this.capLevelController=new r(this),d=new a(this),f=new sr(this),g=new or(this),m=t.contentSteeringController,y=m?new m(this):null,T=this.levelController=new tn(this,y),v=new mr(this),E=new sn(this.config),S=this.streamController=new nn(this,v,E);h.setStreamController(S),d.setStreamController(S);let x=[f,T,S];y&&x.splice(1,0,y),this.networkControllers=x;let A=[c,u,h,d,g,v];this.audioTrackController=this.createController(t.audioTrackController,x);let b=t.audioStreamController;b&&x.push(new b(this,v,E)),this.subtitleTrackController=this.createController(t.subtitleTrackController,x);let C=t.subtitleStreamController;C&&x.push(new C(this,v,E)),this.createController(t.timelineController,A),E.emeController=this.emeController=this.createController(t.emeController,A),this.cmcdController=this.createController(t.cmcdController,A),this.latencyController=this.createController(ar,A),this.coreComponents=A,x.push(l);let _=l.onErrorOut;typeof _=="function"&&this.on(p.ERROR,_,l)}createController(e,t){if(e){let i=new e(this);return t&&t.push(i),i}return null}on(e,t,i=this){this._emitter.on(e,t,i)}once(e,t,i=this){this._emitter.once(e,t,i)}removeAllListeners(e){this._emitter.removeAllListeners(e)}off(e,t,i=this,s){this._emitter.off(e,t,i,s)}listeners(e){return this._emitter.listeners(e)}emit(e,t,i){return this._emitter.emit(e,t,i)}trigger(e,t){if(this.config.debug)return this.emit(e,e,t);try{return this.emit(e,e,t)}catch(i){if(L.error("An internal error happened while handling event "+e+'. Error message: "'+i.message+'". Here is a stacktrace:',i),!this.triggeringException){this.triggeringException=!0;let s=e===p.ERROR;this.trigger(p.ERROR,{type:V.OTHER_ERROR,details:I.INTERNAL_EXCEPTION,fatal:s,event:e,error:i}),this.triggeringException=!1}}return!1}listenerCount(e){return this._emitter.listenerCount(e)}destroy(){L.log("destroy"),this.trigger(p.DESTROYING,void 0),this.detachMedia(),this.removeAllListeners(),this._autoLevelCapping=-1,this.url=null,this.networkControllers.forEach(t=>t.destroy()),this.networkControllers.length=0,this.coreComponents.forEach(t=>t.destroy()),this.coreComponents.length=0;let e=this.config;e.xhrSetup=e.fetchSetup=void 0,this.userConfig=null}attachMedia(e){L.log("attachMedia"),this._media=e,this.trigger(p.MEDIA_ATTACHING,{media:e})}detachMedia(){L.log("detachMedia"),this.trigger(p.MEDIA_DETACHING,void 0),this._media=null}loadSource(e){this.stopLoad();let t=this.media,i=this.url,s=this.url=on.buildAbsoluteURL(self.location.href,e,{alwaysNormalize:!0});this._autoLevelCapping=-1,this._maxHdcpLevel=null,L.log(`loadSource:${s}`),t&&i&&(i!==s||this.bufferController.hasSourceTypes())&&(this.detachMedia(),this.attachMedia(t)),this.trigger(p.MANIFEST_LOADING,{url:e})}startLoad(e=-1){L.log(`startLoad(${e})`),this.started=!0,this.networkControllers.forEach(t=>{t.startLoad(e)})}stopLoad(){L.log("stopLoad"),this.started=!1,this.networkControllers.forEach(e=>{e.stopLoad()})}resumeBuffering(){this.started&&this.networkControllers.forEach(e=>{"fragmentLoader"in e&&e.startLoad(-1)})}pauseBuffering(){this.networkControllers.forEach(e=>{"fragmentLoader"in e&&e.stopLoad()})}swapAudioCodec(){L.log("swapAudioCodec"),this.streamController.swapAudioCodec()}recoverMediaError(){L.log("recoverMediaError");let e=this._media;this.detachMedia(),e&&this.attachMedia(e)}removeLevel(e){this.levelController.removeLevel(e)}get levels(){let e=this.levelController.levels;return e||[]}get currentLevel(){return this.streamController.currentLevel}set currentLevel(e){L.log(`set currentLevel:${e}`),this.levelController.manualLevel=e,this.streamController.immediateLevelSwitch()}get nextLevel(){return this.streamController.nextLevel}set nextLevel(e){L.log(`set nextLevel:${e}`),this.levelController.manualLevel=e,this.streamController.nextLevelSwitch()}get loadLevel(){return this.levelController.level}set loadLevel(e){L.log(`set loadLevel:${e}`),this.levelController.manualLevel=e}get nextLoadLevel(){return this.levelController.nextLoadLevel}set nextLoadLevel(e){this.levelController.nextLoadLevel=e}get firstLevel(){return Math.max(this.levelController.firstLevel,this.minAutoLevel)}set firstLevel(e){L.log(`set firstLevel:${e}`),this.levelController.firstLevel=e}get startLevel(){let e=this.levelController.startLevel;return e===-1&&this.abrController.forcedAutoLevel>-1?this.abrController.forcedAutoLevel:e}set startLevel(e){L.log(`set startLevel:${e}`),e!==-1&&(e=Math.max(e,this.minAutoLevel)),this.levelController.startLevel=e}get capLevelToPlayerSize(){return this.config.capLevelToPlayerSize}set capLevelToPlayerSize(e){let t=!!e;t!==this.config.capLevelToPlayerSize&&(t?this.capLevelController.startCapping():(this.capLevelController.stopCapping(),this.autoLevelCapping=-1,this.streamController.nextLevelSwitch()),this.config.capLevelToPlayerSize=t)}get autoLevelCapping(){return this._autoLevelCapping}get bandwidthEstimate(){let{bwEstimator:e}=this.abrController;return e?e.getEstimate():NaN}set bandwidthEstimate(e){this.abrController.resetEstimator(e)}get ttfbEstimate(){let{bwEstimator:e}=this.abrController;return e?e.getEstimateTTFB():NaN}set autoLevelCapping(e){this._autoLevelCapping!==e&&(L.log(`set autoLevelCapping:${e}`),this._autoLevelCapping=e,this.levelController.checkMaxAutoUpdated())}get maxHdcpLevel(){return this._maxHdcpLevel}set maxHdcpLevel(e){tu(e)&&this._maxHdcpLevel!==e&&(this._maxHdcpLevel=e,this.levelController.checkMaxAutoUpdated())}get autoLevelEnabled(){return this.levelController.manualLevel===-1}get manualLevel(){return this.levelController.manualLevel}get minAutoLevel(){let{levels:e,config:{minAutoBitrate:t}}=this;if(!e)return 0;let i=e.length;for(let s=0;s<i;s++)if(e[s].maxBitrate>=t)return s;return 0}get maxAutoLevel(){let{levels:e,autoLevelCapping:t,maxHdcpLevel:i}=this,s;if(t===-1&&e!=null&&e.length?s=e.length-1:s=t,i)for(let r=s;r--;){let o=e[r].attrs["HDCP-LEVEL"];if(o&&o<=i)return r}return s}get firstAutoLevel(){return this.abrController.firstAutoLevel}get nextAutoLevel(){return this.abrController.nextAutoLevel}set nextAutoLevel(e){this.abrController.nextAutoLevel=e}get playingDate(){return this.streamController.currentProgramDateTime}get mainForwardBufferInfo(){return this.streamController.getMainFwdBufferInfo()}setAudioOption(e){var t;return(t=this.audioTrackController)==null?void 0:t.setAudioOption(e)}setSubtitleOption(e){var t;return(t=this.subtitleTrackController)==null||t.setSubtitleOption(e),null}get allAudioTracks(){let e=this.audioTrackController;return e?e.allAudioTracks:[]}get audioTracks(){let e=this.audioTrackController;return e?e.audioTracks:[]}get audioTrack(){let e=this.audioTrackController;return e?e.audioTrack:-1}set audioTrack(e){let t=this.audioTrackController;t&&(t.audioTrack=e)}get allSubtitleTracks(){let e=this.subtitleTrackController;return e?e.allSubtitleTracks:[]}get subtitleTracks(){let e=this.subtitleTrackController;return e?e.subtitleTracks:[]}get subtitleTrack(){let e=this.subtitleTrackController;return e?e.subtitleTrack:-1}get media(){return this._media}set subtitleTrack(e){let t=this.subtitleTrackController;t&&(t.subtitleTrack=e)}get subtitleDisplay(){let e=this.subtitleTrackController;return e?e.subtitleDisplay:!1}set subtitleDisplay(e){let t=this.subtitleTrackController;t&&(t.subtitleDisplay=e)}get lowLatencyMode(){return this.config.lowLatencyMode}set lowLatencyMode(e){this.config.lowLatencyMode=e}get liveSyncPosition(){return this.latencyController.liveSyncPosition}get latency(){return this.latencyController.latency}get maxLatency(){return this.latencyController.maxLatency}get targetLatency(){return this.latencyController.targetLatency}get drift(){return this.latencyController.drift}get forceStartLoad(){return this.streamController.forceStartLoad}};$e.defaultConfig=void 0;var Rd=/^(.*\.m3u8)/,Id=/#t=(\d+)(?:,(\d+))?/;function il(n){let e=n.querySelector("source");if(!e)return null;let t=e.src;return{sourceElement:e,src:t,linkMatch:t.match(Rd),timestampMatch:t.match(Id)}}function sl(n){n.querySelectorAll("video").forEach(e=>{let t=il(e);!t||!t.linkMatch||(tl(e,t.timestampMatch),e.addEventListener("error",()=>{console.log(`[cyu-tool-kit] Error occurred in video: ${e.src}. Retrying...`),tl(e,t.timestampMatch)}))})}function tl(n,e){let t=il(n);if(!t)return;let i=0,s=null;if(e&&(i=Number(e[1]),e[2]&&(s=Number(e[2])),n.addEventListener("loadedmetadata",function(){n.currentTime=i}),n.addEventListener("timeupdate",function(){s!==null&&n.currentTime>=s&&n.pause()})),$e.isSupported()){let r=new $e;r.loadSource(t.src),r.attachMedia(n)}}var fs=class extends Re.Plugin{constructor(){super(...arguments);this.settings=_s;this.eventsRegistered=!this.settings.setup_enable_hover_sider;this.toggleMode=0;this.audioCache=new Map;this.registerEvents=async()=>{this.renderClickCopyBlock(),this.renderGallerys(),this.registerMarkdownPostProcessor((t,i)=>{!(0,Re.parseFrontMatterEntry)(i.frontmatter,"ignore-modify-external-image")&&this.altExternalImageTags(t),this.settings.enable_parse_m3u8&&sl(t),this.setupSpeakerClickEvent(t)}),this.autoPinned()};this.renderClickCopyBlock=()=>{this.registerMarkdownPostProcessor((t,i)=>{i.addChild(new Xt(this.settings,t))})};this.toggleLeftSidebar=()=>{this.app.workspace.leftSplit.collapsed&&this.app.workspace.leftSplit.toggle()};this.toggleMiddleSidebar=()=>{window.setTimeout(()=>{this.app.workspace.leftSplit.collapsed||this.app.workspace.leftSplit.toggle(),this.app.workspace.rightSplit.collapsed||this.app.workspace.rightSplit.toggle()},200)};this.toggleRightSidebar=()=>{this.app.workspace.rightSplit.collapsed&&this.app.workspace.rightSplit.toggle()}}async onload(){await this.loadSettings(),this.addSettingTab(new Ei(this.app,this)),this.app.workspace.onLayoutReady(()=>{this.leftRibbon=document.querySelector(".side-dock-settings"),this.rightRibbon=document.querySelector(".workspace-ribbon.side-dock-ribbon.mod-right"),this.middleArea=document.querySelector(".mod-root"),this.settings.setup_enable_hover_sider&&this.hoverToggleSidebars(),this.registerCommands()}),this.registerEvents()}createWaveAnimation(){let t=document.createElement("style");t.type="text/css",t.innerHTML=`
		  .wave-svg {
			pointer-events: none;
			position: fixed;
			left: 0;
			bottom: 0;
			width: 100vw;
			height: 88px;
			z-index: 1;
		  }
		  .wave-main > use {
			animation: wave-move 12s linear infinite;
		  }
		  .wave-main > use:nth-child(1) {
			animation-delay: -2s;
		  }
		  .wave-main > use:nth-child(2) {
			animation-delay: -2s;
			animation-duration: 5s;
		  }
		  .wave-main > use:nth-child(3) {
			animation-delay: -4s;
			animation-duration: 3s;
		  }
		  @keyframes wave-move {
			0% { transform: translate(-90px, 0); }
			100% { transform: translate(85px, 0); }
		  }
		`,document.head.appendChild(t);let i=`
		  <svg class="wave-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
			   viewBox="0 24 150 28" preserveAspectRatio="none">
			<defs>
			  <path id="wave-path" d="M-160 44c30 0 58-18 88-18s58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"></path>
			</defs>
			<g class="wave-main">
			  <use xlink:href="#wave-path" x="50" y="0" fill="rgba(224,233,239,.5)" />
			  <use xlink:href="#wave-path" x="50" y="3" fill="rgba(224,233,239,.5)" />
			  <use xlink:href="#wave-path" x="50" y="6" fill="rgba(224,233,239,.5)" />
			</g>
		  </svg>
		`,o=new DOMParser().parseFromString(i,"image/svg+xml").querySelector("svg");o&&document.body.appendChild(o)}renderGallerys(){this.registerMarkdownPostProcessor((t,i)=>{let s=this.app.workspace.getActiveViewOfType(Re.MarkdownView),r=i.sourcePath===this.settings.folder_color_gallery,o=i.sourcePath===this.settings.folder_icon_gallery;s&&r&&i.addChild(new Qt(this.settings,t)),s&&o&&i.addChild(new Jt(this.settings,t))})}autoPinned(){if(!this.settings.enable_auto_pin)return;this.app.workspace.getLeavesOfType("markdown").forEach(s=>{s.getViewState().pinned||s.setPinned(!0)})}setupSpeakerClickEvent(t){let i=t.querySelectorAll("[data-speaker]"),s="https://tts-proxy.cyuhaonan.workers.dev/?url=",r=!1;i.forEach(async o=>{let a=o.getAttribute("data-speaker");if(!a)return;let l=document.createElement("a");l.href="javascript:void(0)",l.textContent="\u{1F50A}",l.style.marginLeft="4px",l.style.textDecoration="none",l.style.cursor="pointer";let c=`https://translate.google.com/translate_tts?ie=UTF-8&client=gtx&q=${encodeURIComponent(a)}&tl=en`,u=s+encodeURIComponent(c);try{let h=await fetch(u);if(!h.ok)throw new Error(`\u8BF7\u6C42\u5931\u8D25: ${h.statusText}`);let d=await h.blob(),f=URL.createObjectURL(d),g=new Audio(f);this.audioCache.set(a,g),l.addEventListener("mouseenter",()=>{if(r)return;r=!0;let m=this.audioCache.get(a);m&&(m.currentTime=0,m.volume=1,m.play().catch(y=>{console.warn(`\u97F3\u9891\u64AD\u653E\u5931\u8D25\uFF1A${y.message}`),new Re.Notice(`\u97F3\u9891\u64AD\u653E\u5931\u8D25\uFF1A${y.message}`),r=!1}),m.onended=()=>{r=!1})})}catch(h){console.warn(`\u97F3\u9891\u9884\u52A0\u8F7D\u5931\u8D25: ${h.message}`),new Re.Notice(`\u97F3\u9891\u9884\u52A0\u8F7D\u5931\u8D25: ${h.message}`)}o.insertAdjacentElement("afterend",l)})}altExternalImageTags(t){var s;let i=t.findAll("img[referrerpolicy]");for(let r of i){if(r.classList.contains("banner-image")||r.parentNode instanceof HTMLSpanElement)return;let o=document.createElement("span"),a=r.getAttribute("src"),l=r.alt;a&&o.setAttribute("src",a),l&&o.setAttribute("alt",l.split("|")[1]||l),o.setAttribute("id","external-link-image"),o.classList.add("image-embed"),(s=r.parentNode)==null||s.insertBefore(o,r),o.appendChild(r)}}removeIframeScrollbars(t){t.querySelectorAll("iframe").forEach(s=>{s.setAttribute("scrolling","no")})}sortHeadings(){let t=this.app.vault,i=this.app.workspace.getActiveFile();if(i)return t.process(i,s=>{let r=0,o=0,a=["I","II","III","IV","V","VI","VII","VIII","IX","X"],l=Array.from({length:20},(A,b)=>`${b+1}.`),c=Array.from({length:20},(A,b)=>`${b+1}`),u=["\u2460","\u2461","\u2462","\u2463","\u2464","\u2465","\u2466","\u2467","\u2468","\u2469"],h=new Array(10).fill(0),d=new Array(10).fill(0),f=-1,g=-1,m=!1,y=A=>{let b=/(?:I、|II、|III、|IV、|V、|VI、|VII、|VIII、|IX、|X、)/g,C=/[①②③④⑤⑥⑦⑧⑨⑩]/g,_=/[①②③④⑤⑥⑦⑧⑨⑩] /g;return A.replace(/^(#) 第.*?章/g,"$1").replace(/^(#|##|###) (\[\[.*?\|)\d{1,2}\.?\d?\.?\d?\s+/u,"$1 $2").replace(/^(#|##|###) (\[\[.*?\])\d{1,2}\.?\d?\.?\d?\s+/u,"$1 $2").replace(/^(#|##|###) (\[)\d{1,2}\.?\d?\.?\d?\s+/u,"$1 $2").replace(/^(#|##|###) \d{1,2}\.?\d?\.?\d?\s+/u,"$1 ").replace(/^(#|##|###) \d{1,2}\.?\d?\.?\d?\s+/u,"$1 ").replace(b,"").replace(_,"").replace(C,"")},T=(A,b)=>b.replace(A,(C,_,D)=>`# ${_||""}${a[r++]}\u3001${D}`),v=(A,b)=>b.replace(A,(C,_,D)=>`## ${_||""}${l[o++]} ${D}`),E=(A,b,C,_)=>b.replace(A,(D,w,B)=>`### ${w||""}${_===!0?`${u[h[f]++]} ${B}`:`${C}.${c[h[f]++]} ${B}`}`),S=s.split(`
`),x=!1;for(let A=0;A<S.length;A++){if(S[A],/^```/.test(S[A])){m=!m;continue}if(!m){if(S[A]=y(S[A]),/^# (\[\[.*?\|)?(.*?)]?$/.test(S[A])){x=/[✦★☆✧@]/.test(S[A]),g=r,o=0,S[A]=T(/^# (?!\[\[)(\[)?(.*?)]?$/,S[A]),S[A]=T(/^# (\[\[)([^\|]+)$/,S[A]),S[A]=T(/^# (\[\[.*?\|)(.*?)?$/,S[A]);continue}if(/^## /.test(S[A])&&o<20){if(x=/[✦★☆✧@]/.test(S[A]),x)continue;f=o,h[f]=0,S[A]=v(/^## (?!\[\[)(\[)?(.*?)]?$/,S[A]),S[A]=v(/^## (\[\[)([^\|]+)$/,S[A]),S[A]=v(/^## (\[\[.*?\|)(.*?)?$/,S[A]);continue}if(/^### /.test(S[A])&&f!==-1){if(/[✦★☆✧@]/.test(S[A]))continue;h[f]<10&&(S[A]=E(/^### (?!\[\[)(\[)?(.*?)]?$/,S[A],o,x),S[A]=E(/^### (\[\[)([^\|]+)$/,S[A],o,x),S[A]=E(/^### (\[\[.*?\|)(.*?)?$/,S[A],o,x))}}}return S.join(`
`)})}onunload(){}hoverToggleSidebars(){this.leftRibbon&&this.middleArea&&this.rightRibbon&&(this.leftRibbon.addEventListener("mouseenter",this.toggleLeftSidebar),this.middleArea.addEventListener("mouseenter",this.toggleMiddleSidebar),this.rightRibbon.addEventListener("mouseenter",this.toggleRightSidebar))}clickToggleSidebars(){this.leftRibbon&&this.middleArea&&this.rightRibbon&&(this.leftRibbon.addEventListener("click",this.toggleLeftSidebar),this.middleArea.addEventListener("click",this.toggleMiddleSidebar),this.rightRibbon.addEventListener("click",this.toggleRightSidebar))}removeHoverToggleSidebars(){this.leftRibbon&&this.middleArea&&this.rightRibbon&&(this.leftRibbon.removeEventListener("mouseenter",this.toggleLeftSidebar),this.middleArea.removeEventListener("mouseenter",this.toggleMiddleSidebar),this.rightRibbon.removeEventListener("mouseenter",this.toggleRightSidebar))}registerCommands(){this.addCommand({id:"hover-toggle-sidebars-toggle",name:"hover toggle sidebars toggle",hotkeys:[{modifiers:["Ctrl","Alt"],key:"W"}],callback:()=>{var i,s;(i=this.removeHoverToggleSidebars)==null||i.call(this),this.toggleMode===0?((s=this.hoverToggleSidebars)==null||s.call(this),new Re.Notice("\u5DF2\u6539\u4E3A \u201C\u60AC\u6D6E\u89E6\u53D1\u201D")):new Re.Notice("\u5DF2\u6539\u4E3A \u201C\u4E0D\u89E6\u53D1\u201D"),this.toggleMode=(this.toggleMode+1)%2}}),this.addCommand({id:"auto-pin-note",name:"auto pin all notes",callback:()=>{this.autoPinned()}}),this.addCommand({id:"add-word-comment-in-source",name:"\u6E90\u7801\u6A21\u5F0F\u4E0B\u6392\u5E8F\u5217\u8868",hotkeys:[{modifiers:["Ctrl","Shift"],key:"Q"}],editorCallback:(i,s)=>{this.sortHeadings()}}),this.addCommand({id:"open-specific-note",name:"\u6253\u5F00\u4E3B\u9875\u7B14\u8BB0",hotkeys:[{modifiers:["Alt"],key:"`"}],callback:async()=>{t("Kanban/Home/Home.kanban.md")}});let t=async i=>{let s=this.app.vault.getAbstractFileByPath(i);if(!(s instanceof Re.TFile)){console.warn("\u672A\u627E\u5230\u6709\u6548\u7684 Markdown \u6587\u4EF6:",i);return}let r=s,o=this.app.workspace.getLeaf("tab");await o.openFile(r,{active:!0}),window.setTimeout(()=>{this.app.workspace.setActiveLeaf(o,{focus:!0})},0),o.getViewState().pinned||o.setPinned(!0)}}async loadSettings(){this.settings=Object.assign({},_s,await this.loadData())}async saveSettings(){this.saveData(this.settings)}};
//# sourceMappingURL=data:application/json;base64,
